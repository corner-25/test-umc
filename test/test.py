import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import json
from datetime import datetime, timedelta
import os, base64

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Dashboard Ph√≤ng H√†nh ch√≠nh",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
.main-header {
    font-size: 2.5rem;
    font-weight: bold;
    color: #1f77b4;
    text-align: center;
    margin-bottom: 2rem;
}
.metric-container {
    background-color: #f0f2f6;
    padding: 1rem;
    border-radius: 10px;
    border-left: 4px solid #1f77b4;
}
.tab-header {
    font-size: 1.8rem;
    font-weight: bold;
    color: #2c3e50;
    margin-bottom: 1rem;
}

/* Centered header container and text */
.header-container {
    text-align: center;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    margin-bottom: 2rem;
}

.header-text {
    font-size: 3.2rem;
    font-weight: bold;
    color: #1f77b4;
    text-align: center;
    margin-top: 0.5rem;
}
</style>
""", unsafe_allow_html=True)

# HEADER: logo + title on one line (flexbox)
try:
    # Encode logo to base64 for inline <img>
    script_dir = os.path.dirname(os.path.abspath(__file__))
    logo_base64 = ""
    # Check for logo.png in current directory first, then in ./assets/
    for p in [
        os.path.join(script_dir, "logo.png"),                      # 1Ô∏è‚É£ same-level logo
        os.path.join(script_dir, "assets", "logo.png")            # 2Ô∏è‚É£ assets folder
    ]:
        if os.path.exists(p):
            with open(p, "rb") as f:
                logo_base64 = base64.b64encode(f.read()).decode()
            break
except Exception:
    logo_base64 = ""

# Build logo HTML (fallback emoji if logo not found)
if logo_base64:
    logo_html = f"<img src='data:image/png;base64,{logo_base64}' style='height:80px; width:auto;' />"
else:
    logo_html = "<span style='font-size:80px;'>üè¢</span>"

# Header ch√≠nh v·ªõi logo
st.markdown(f"""
<div class="header-container">
    {logo_html}
    <div class="header-text" style="margin-left: 20px;">
        Dashboard Ph√≤ng H√†nh ch√≠nh
    </div>
</div>
""", unsafe_allow_html=True)

# Sidebar - B·ªô l·ªçc to√†n c·ª•c
st.sidebar.markdown("## üîç B·ªô l·ªçc to√†n c·ª•c")

# Kh·ªüi t·∫°o bi·∫øn filter m·∫∑c ƒë·ªãnh
global_date_filter = None
global_dept_filter = None

# Checkbox ƒë·ªÉ b·∫≠t/t·∫Øt filter
enable_global_filter = st.sidebar.checkbox("üéØ B·∫≠t b·ªô l·ªçc to√†n c·ª•c", value=False)

if enable_global_filter:
    # Filter ng√†y
    st.sidebar.markdown("### üìÖ Kho·∫£ng th·ªùi gian")
    
    # S·ª≠ d·ª•ng 2 date_input ri√™ng bi·ªát ƒë·ªÉ tr√°nh l·ªói
    col1, col2 = st.sidebar.columns(2)
    with col1:
        start_date = st.date_input(
            "T·ª´ ng√†y:",
            value=None,
            help="Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu"
        )
    with col2:
        end_date = st.date_input(
            "ƒê·∫øn ng√†y:",
            value=None,
            help="Ch·ªçn ng√†y k·∫øt th√∫c"
        )
    
    # T·∫°o global_date_filter t·ª´ 2 ng√†y
    if start_date is not None and end_date is not None:
        global_date_filter = (start_date, end_date)
    elif start_date is not None:
        global_date_filter = start_date
    else:
        global_date_filter = None
    
    # Filter ph√≤ng ban (ch·ªâ hi·ªán khi c√≥ d·ªØ li·ªáu)
    st.sidebar.markdown("### üè¢ Ph√≤ng ban")
    st.sidebar.info("Filter ph√≤ng ban s·∫Ω xu·∫•t hi·ªán khi upload d·ªØ li·ªáu c√≥ th√¥ng tin ph√≤ng ban")

st.sidebar.markdown("---")

# H√†m ti·ªán √≠ch ƒë·ªÉ √°p d·ª•ng filter to√†n c·ª•c
def apply_global_filter(df, date_col='datetime'):
    """√Åp d·ª•ng b·ªô l·ªçc to√†n c·ª•c cho DataFrame"""
    if not enable_global_filter:
        return df
    
    filtered_df = df.copy()
    
    # √Åp d·ª•ng filter ng√†y
    if global_date_filter is not None:
        # Ki·ªÉm tra n·∫øu l√† tuple/list v·ªõi 2 ph·∫ßn t·ª≠
        if isinstance(global_date_filter, (list, tuple)) and len(global_date_filter) == 2:
            filtered_df = filtered_df[
                (filtered_df[date_col] >= pd.to_datetime(global_date_filter[0])) & 
                (filtered_df[date_col] <= pd.to_datetime(global_date_filter[1]))
            ]
        # N·∫øu ch·ªâ l√† 1 ng√†y, filter t·ª´ ng√†y ƒë√≥ tr·ªü ƒëi
        elif hasattr(global_date_filter, '__iter__') == False:  # single date
            filtered_df = filtered_df[filtered_df[date_col] >= pd.to_datetime(global_date_filter)]
    
    return filtered_df

# H√†m x·ª≠ l√Ω d·ªØ li·ªáu vƒÉn b·∫£n ƒë·∫øn
def process_incoming_documents_data(uploaded_file):
    try:
        if uploaded_file.type == "application/json":
            data = json.load(uploaded_file)
            if isinstance(data, dict) and "data" in data:
                df = pd.DataFrame(data["data"])
            else:
                df = pd.DataFrame(data)
        else:
            df = pd.read_csv(uploaded_file)
        
        # T·∫°o c·ªôt datetime (s·ª≠ d·ª•ng 'date' thay v√¨ 'day')
        df['datetime'] = pd.to_datetime(df[['year', 'month', 'date']].rename(columns={'date': 'day'}))
        df['weekday'] = df['datetime'].dt.day_name()
        df['week'] = df['datetime'].dt.isocalendar().week
        
        # ƒê·∫£m b·∫£o c√°c c·ªôt c·∫ßn thi·∫øt t·ªìn t·∫°i, n·∫øu kh√¥ng th√¨ t·∫°o v·ªõi gi√° tr·ªã 0
        required_columns = ['no_response_required', 'response_required', 
                          'response_required_VanBan', 'response_required_Email', 
                          'response_required_DienThoai', 'response_required_PhanMem']
        
        for col in required_columns:
            if col not in df.columns:
                df[col] = 0
        
        # ƒê·∫£m b·∫£o c·ªôt processed_rate_on_time v√† processed_rate_late t·ªìn t·∫°i
        if 'processed_rate_on_time' not in df.columns:
            df['processed_rate_on_time'] = 0
        if 'processed_rate_late' not in df.columns:
            df['processed_rate_late'] = 0
            
        return df
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}")
        return None

# H√†m t·∫°o pivot table
def create_pivot_table(df):
    st.markdown("### üìä B·∫£ng Pivot - Ph√¢n t√≠ch theo th·ªùi gian")

    # CSS cho table l·ªõn h∆°n v√† ƒë·∫πp h∆°n
    st.markdown("""
    <style>
    .pivot-table {
        font-size: 16px !important;
        font-weight: 500;
    }
    .pivot-table td {
        padding: 12px 8px !important;
        text-align: center !important;
    }
    .pivot-table th {
        padding: 15px 8px !important;
        text-align: center !important;
        background-color: #f0f2f6 !important;
        font-weight: bold !important;
        font-size: 17px !important;
    }
    .increase { color: #28a745 !important; font-weight: bold; }
    .decrease { color: #dc3545 !important; font-weight: bold; }
    .neutral { color: #6c757d !important; }
    .new-period { color: #007bff !important; font-weight: bold; }
    </style>
    """, unsafe_allow_html=True)

    # L·ª±a ch·ªçn m·ª©c ƒë·ªô t·ªïng h·ª£p
    col1, col2 = st.columns([1, 3])
    with col1:
        period_type = st.selectbox(
            "üìÖ T·ªïng h·ª£p theo:",
            options=['Ng√†y', 'Tu·∫ßn', 'Th√°ng', 'Qu√Ω', 'NƒÉm'],
            index=1,  # M·∫∑c ƒë·ªãnh l√† Tu·∫ßn
            key="pivot_period_type"
        )

    # Chu·∫©n b·ªã d·ªØ li·ªáu theo lo·∫°i period
    df_period = df.copy()

    if period_type == 'Tu·∫ßn':
        df_period['period'] = 'W' + df_period['week'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['week']
    elif period_type == 'Th√°ng':
        df_period['period'] = 'T' + df_period['month'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['month']
    elif period_type == 'Qu√Ω':
        df_period['quarter'] = ((df_period['month'] - 1) // 3) + 1
        df_period['period'] = 'Q' + df_period['quarter'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['quarter']
    elif period_type == 'NƒÉm':
        df_period['period'] = df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year']
    else:  # Ng√†y
        df_period['period'] = df_period['datetime'].dt.strftime('%d/%m/%Y')
        df_period['period_sort'] = df_period['datetime']

    # T·∫°o pivot table v·ªõi c√°c ch·ªâ s·ªë m·ªõi
    pivot_columns = ['total_incoming', 'no_response_required', 'response_required',
                    'processed_on_time', 'processed_late', 'response_required_VanBan',
                    'response_required_Email', 'response_required_DienThoai', 'response_required_PhanMem']

    # Ki·ªÉm tra c√°c c·ªôt c√≥ t·ªìn t·∫°i kh√¥ng
    available_columns = [col for col in pivot_columns if col in df_period.columns]

    pivot_data = df_period.groupby(['period', 'period_sort'])[available_columns].sum().reset_index()
    pivot_data = pivot_data.sort_values('period_sort', ascending=False)

    # T√≠nh to√°n bi·∫øn ƒë·ªông so v·ªõi k·ª≥ tr∆∞·ªõc
    for col in available_columns:
        pivot_data[f'{col}_prev'] = pivot_data[col].shift(-1)
        pivot_data[f'{col}_change'] = pivot_data[col] - pivot_data[f'{col}_prev']
        pivot_data[f'{col}_change_pct'] = ((pivot_data[col] / pivot_data[f'{col}_prev'] - 1) * 100).round(1)
        pivot_data[f'{col}_change_pct'] = pivot_data[f'{col}_change_pct'].fillna(0)

    # T√≠nh t·ª∑ l·ªá x·ª≠ l√Ω ƒë√∫ng h·∫°n
    if 'total_incoming' in available_columns and 'processed_on_time' in available_columns:
        pivot_data['on_time_rate'] = (pivot_data['processed_on_time'] / pivot_data['total_incoming'] * 100).round(1)
        pivot_data['on_time_rate'] = pivot_data['on_time_rate'].fillna(0)

    # T·∫°o DataFrame hi·ªÉn th·ªã v·ªõi bi·∫øn ƒë·ªông trong c√πng cell
    display_data = pivot_data.copy()

    # H√†m t·∫°o cell k·∫øt h·ª£p gi√° tr·ªã v√† bi·∫øn ƒë·ªông
    def format_cell_with_change(row, col):
        current_val = row[col]
        change_val = row[f'{col}_change']
        change_pct = row[f'{col}_change_pct']
        prev_val = row[f'{col}_prev']

        # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu k·ª≥ tr∆∞·ªõc, ch·ªâ hi·ªÉn th·ªã gi√° tr·ªã hi·ªán t·∫°i
        if pd.isna(prev_val) or prev_val == 0:
            return f"{int(current_val)}"

        # ƒê·ªãnh m√†u s·∫Øc theo chi·ªÅu h∆∞·ªõng thay ƒë·ªïi
        if change_val > 0:
            color_class = "increase"
            arrow = "‚Üó"
            sign = "+"
        elif change_val < 0:
            color_class = "decrease"
            arrow = "‚Üò"
            sign = ""
        else:
            color_class = "neutral"
            arrow = "‚Üí"
            sign = ""

        # Tr·∫£ v·ªÅ HTML v·ªõi m√†u s·∫Øc
        return f"""<div style="text-align: center; line-height: 1.2;">
            <div style="font-size: 16px; font-weight: 600;">{int(current_val)}</div>
            <div class="{color_class}" style="font-size: 12px; margin-top: 2px;">
                {arrow} {sign}{int(change_val)} ({change_pct:+.1f}%)
            </div>
        </div>"""

    # T·∫°o c·ªôt hi·ªÉn th·ªã m·ªõi
    display_columns = ['period']
    column_names = {f'period': f'{period_type}'}

    for col in available_columns:
        new_col = f'{col}_display'
        display_data[new_col] = display_data.apply(lambda row: format_cell_with_change(row, col), axis=1)
        display_columns.append(new_col)

        # Mapping t√™n c·ªôt
        if col == 'total_incoming':
            column_names[new_col] = 'T·ªïng VB ƒë·∫øn'
        elif col == 'no_response_required':
            column_names[new_col] = 'Kh√¥ng y√™u c·∫ßu ph·∫£n h·ªìi'
        elif col == 'response_required':
            column_names[new_col] = 'Y√™u c·∫ßu ph·∫£n h·ªìi'
        elif col == 'processed_on_time':
            column_names[new_col] = 'X·ª≠ l√Ω ƒë√∫ng h·∫°n'
        elif col == 'processed_late':
            column_names[new_col] = 'X·ª≠ l√Ω tr·ªÖ h·∫°n'
        elif col == 'response_required_VanBan':
            column_names[new_col] = 'PH - VƒÉn b·∫£n'
        elif col == 'response_required_Email':
            column_names[new_col] = 'PH - Email'
        elif col == 'response_required_DienThoai':
            column_names[new_col] = 'PH - ƒêi·ªán tho·∫°i'
        elif col == 'response_required_PhanMem':
            column_names[new_col] = 'PH - Ph·∫ßn m·ªÅm'

    # B·ªè t·ª∑ l·ªá ƒë√∫ng h·∫°n theo y√™u c·∫ßu

    st.markdown(f"#### üìã T·ªïng h·ª£p theo {period_type} (bao g·ªìm bi·∫øn ƒë·ªông)")

    # Hi·ªÉn th·ªã b·∫£ng v·ªõi HTML ƒë·ªÉ render m√†u s·∫Øc
    df_display = display_data[display_columns].rename(columns=column_names)

    # T·∫°o HTML table v·ªõi sticky header
    html_table = "<div style='max-height: 400px; overflow-y: auto; border: 1px solid #ddd;'><table class='pivot-table' style='width: 100%; border-collapse: collapse; font-size: 16px;'>"

    # Header v·ªõi sticky positioning
    html_table += "<thead><tr>"
    for col in df_display.columns:
        html_table += f"<th style='position: sticky; top: 0; padding: 15px 8px; text-align: center; background-color: #f0f2f6; font-weight: bold; font-size: 17px; border: 1px solid #ddd; z-index: 10;'>{col}</th>"
    html_table += "</tr></thead>"

    # Body
    html_table += "<tbody>"
    for _, row in df_display.iterrows():
        html_table += "<tr>"
        for i, col in enumerate(df_display.columns):
            cell_value = row[col]
            style = "padding: 12px 8px; text-align: center; border: 1px solid #ddd; vertical-align: middle;"
            if i == 0:  # Period column
                style += " font-weight: 600; background-color: #f8f9fa;"
            html_table += f"<td style='{style}'>{cell_value}</td>"
        html_table += "</tr>"
    html_table += "</tbody></table></div>"

    st.markdown(html_table, unsafe_allow_html=True)

    return period_type


# H√†m x·ª≠ l√Ω d·ªØ li·ªáu vƒÉn b·∫£n ƒëi
def process_outgoing_documents_data(uploaded_file):
    try:
        if uploaded_file.type == "application/json":
            data = json.load(uploaded_file)
            if isinstance(data, dict) and "data" in data:
                df = pd.DataFrame(data["data"])
            else:
                df = pd.DataFrame(data)
        else:
            df = pd.read_csv(uploaded_file)
        
        # T·∫°o c·ªôt datetime
        df['datetime'] = pd.to_datetime(df[['year', 'month', 'date']].rename(columns={'date': 'day'}))
        df['weekday'] = df['datetime'].dt.day_name()
        df['week'] = df['datetime'].dt.isocalendar().week
        
        # X·ª≠ l√Ω c√°c c·ªôt nested (contracts, decisions, etc.)
        def extract_total(col_data):
            if pd.isna(col_data):
                return 0
            if isinstance(col_data, dict):
                return col_data.get('total', 0)
            if isinstance(col_data, str):
                try:
                    parsed = json.loads(col_data)
                    return parsed.get('total', 0)
                except:
                    return 0
            return 0
        
        # H√†m tr√≠ch xu·∫•t chi ti·∫øt t·ª´ nested data
        def extract_detail(col_data):
            if pd.isna(col_data):
                return []
            if isinstance(col_data, dict) and 'detail' in col_data:
                return col_data.get('detail', [])
            if isinstance(col_data, str):
                try:
                    parsed = json.loads(col_data)
                    return parsed.get('detail', [])
                except:
                    return []
            return []
        
        # T·∫°o c√°c c·ªôt t·ªïng h·ª£p
        category_columns = ['contracts', 'decisions', 'regulations', 'rules', 'procedures', 'instruct']
        for col in category_columns:
            if col in df.columns:
                df[f'{col}_total'] = df[col].apply(extract_total)
                df[f'{col}_detail'] = df[col].apply(extract_detail)
            else:
                df[f'{col}_total'] = 0
                df[f'{col}_detail'] = []
        
        # ƒê·∫£m b·∫£o c·ªôt documents t·ªìn t·∫°i
        if 'documents' not in df.columns:
            df['documents'] = 0
            
        # T·ªïng vƒÉn b·∫£n ƒëi = documents + t·∫•t c·∫£ c√°c lo·∫°i kh√°c
        df['total_outgoing'] = (
            df['documents'] +
            df.get('contracts_total', 0) + 
            df.get('decisions_total', 0) + 
            df.get('regulations_total', 0) + 
            df.get('rules_total', 0) + 
            df.get('procedures_total', 0) + 
            df.get('instruct_total', 0)
        )
            
        return df
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu vƒÉn b·∫£n ƒëi: {str(e)}")
        return None

# H√†m t·∫°o pivot table cho vƒÉn b·∫£n ƒëi
def create_outgoing_pivot_table(df):
    st.markdown("### üìä B·∫£ng Pivot - Ph√¢n t√≠ch vƒÉn b·∫£n ƒëi theo th·ªùi gian")

    # CSS cho table l·ªõn h∆°n v√† ƒë·∫πp h∆°n
    st.markdown("""
    <style>
    .pivot-table-outgoing {
        font-size: 16px !important;
        font-weight: 500;
    }
    .pivot-table-outgoing td {
        padding: 12px 8px !important;
        text-align: center !important;
    }
    .pivot-table-outgoing th {
        padding: 15px 8px !important;
        text-align: center !important;
        background-color: #f0f2f6 !important;
        font-weight: bold !important;
        font-size: 17px !important;
    }
    </style>
    """, unsafe_allow_html=True)

    # L·ª±a ch·ªçn m·ª©c ƒë·ªô t·ªïng h·ª£p
    col1, col2 = st.columns([1, 3])
    with col1:
        period_type = st.selectbox(
            "üìÖ T·ªïng h·ª£p theo:",
            options=['Ng√†y', 'Tu·∫ßn', 'Th√°ng', 'Qu√Ω', 'NƒÉm'],
            index=1,  # M·∫∑c ƒë·ªãnh l√† Tu·∫ßn
            key="outgoing_period_type"
        )

    # Chu·∫©n b·ªã d·ªØ li·ªáu theo lo·∫°i period
    df_period = df.copy()

    if period_type == 'Tu·∫ßn':
        df_period['period'] = 'W' + df_period['week'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['week']
    elif period_type == 'Th√°ng':
        df_period['period'] = 'T' + df_period['month'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['month']
    elif period_type == 'Qu√Ω':
        df_period['quarter'] = ((df_period['month'] - 1) // 3) + 1
        df_period['period'] = 'Q' + df_period['quarter'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['quarter']
    elif period_type == 'NƒÉm':
        df_period['period'] = df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year']
    else:  # Ng√†y
        df_period['period'] = df_period['datetime'].dt.strftime('%d/%m/%Y')
        df_period['period_sort'] = df_period['datetime']

    # T·∫°o pivot table v·ªõi c√°c ch·ªâ s·ªë vƒÉn b·∫£n ƒëi
    pivot_columns = ['documents', 'contracts_total', 'decisions_total', 'regulations_total',
                    'rules_total', 'procedures_total', 'instruct_total']

    # Ki·ªÉm tra c√°c c·ªôt c√≥ t·ªìn t·∫°i kh√¥ng
    available_columns = [col for col in pivot_columns if col in df_period.columns]

    pivot_data = df_period.groupby(['period', 'period_sort'])[available_columns].sum().reset_index()

    # T√≠nh total_outgoing ƒë√∫ng c√¥ng th·ª©c = t·∫•t c·∫£ c√°c lo·∫°i c·ªông l·∫°i
    total_columns = ['documents', 'contracts_total', 'decisions_total', 'regulations_total',
                    'rules_total', 'procedures_total', 'instruct_total']

    # Ch·ªâ c·ªông c√°c c·ªôt c√≥ trong pivot_data
    existing_total_columns = [col for col in total_columns if col in pivot_data.columns]
    if existing_total_columns:
        pivot_data['total_outgoing'] = pivot_data[existing_total_columns].sum(axis=1)
    else:
        pivot_data['total_outgoing'] = 0

    # C·∫≠p nh·∫≠t available_columns ƒë·ªÉ bao g·ªìm total_outgoing
    available_columns = ['total_outgoing'] + available_columns
    pivot_data = pivot_data.sort_values('period_sort', ascending=False)

    # T√≠nh to√°n bi·∫øn ƒë·ªông so v·ªõi k·ª≥ tr∆∞·ªõc
    for col in available_columns:
        pivot_data[f'{col}_prev'] = pivot_data[col].shift(-1)
        pivot_data[f'{col}_change'] = pivot_data[col] - pivot_data[f'{col}_prev']
        pivot_data[f'{col}_change_pct'] = ((pivot_data[col] / pivot_data[f'{col}_prev'] - 1) * 100).round(1)
        pivot_data[f'{col}_change_pct'] = pivot_data[f'{col}_change_pct'].fillna(0)

    # T·∫°o DataFrame hi·ªÉn th·ªã v·ªõi bi·∫øn ƒë·ªông trong c√πng cell
    display_data = pivot_data.copy()

    # H√†m t·∫°o cell k·∫øt h·ª£p gi√° tr·ªã v√† bi·∫øn ƒë·ªông
    def format_cell_with_change(row, col):
        current_val = row[col]
        change_val = row[f'{col}_change']
        change_pct = row[f'{col}_change_pct']
        prev_val = row[f'{col}_prev']

        # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu k·ª≥ tr∆∞·ªõc, ch·ªâ hi·ªÉn th·ªã gi√° tr·ªã hi·ªán t·∫°i
        if pd.isna(prev_val) or prev_val == 0:
            return f"{int(current_val)}"

        # ƒê·ªãnh m√†u s·∫Øc theo chi·ªÅu h∆∞·ªõng thay ƒë·ªïi
        if change_val > 0:
            color_class = "increase"
            arrow = "‚Üó"
            sign = "+"
        elif change_val < 0:
            color_class = "decrease"
            arrow = "‚Üò"
            sign = ""
        else:
            color_class = "neutral"
            arrow = "‚Üí"
            sign = ""

        # Tr·∫£ v·ªÅ HTML v·ªõi m√†u s·∫Øc
        return f"""<div style="text-align: center; line-height: 1.2;">
            <div style="font-size: 16px; font-weight: 600;">{int(current_val)}</div>
            <div class="{color_class}" style="font-size: 12px; margin-top: 2px;">
                {arrow} {sign}{int(change_val)} ({change_pct:+.1f}%)
            </div>
        </div>"""

    # T·∫°o c·ªôt hi·ªÉn th·ªã m·ªõi
    display_columns = ['period']
    column_names = {f'period': f'{period_type}'}

    for col in available_columns:
        new_col = f'{col}_display'
        display_data[new_col] = display_data.apply(lambda row: format_cell_with_change(row, col), axis=1)
        display_columns.append(new_col)

        # Mapping t√™n c·ªôt
        if col == 'total_outgoing':
            column_names[new_col] = 'T·ªïng VB ƒëi'
        elif col == 'documents':
            column_names[new_col] = 'VB ph√°t h√†nh'
        elif col == 'contracts_total':
            column_names[new_col] = 'H·ª£p ƒë·ªìng'
        elif col == 'decisions_total':
            column_names[new_col] = 'Quy·∫øt ƒë·ªãnh'
        elif col == 'regulations_total':
            column_names[new_col] = 'Quy ch·∫ø'
        elif col == 'rules_total':
            column_names[new_col] = 'Quy ƒë·ªãnh'
        elif col == 'procedures_total':
            column_names[new_col] = 'Th·ªß t·ª•c'
        elif col == 'instruct_total':
            column_names[new_col] = 'H∆∞·ªõng d·∫´n'

    st.markdown(f"#### üìã T·ªïng h·ª£p theo {period_type} (bao g·ªìm bi·∫øn ƒë·ªông)")

    # Hi·ªÉn th·ªã b·∫£ng v·ªõi HTML ƒë·ªÉ render m√†u s·∫Øc
    df_display = display_data[display_columns].rename(columns=column_names)

    # T·∫°o HTML table v·ªõi sticky header
    html_table = "<div style='max-height: 400px; overflow-y: auto; border: 1px solid #ddd;'><table class='pivot-table-outgoing' style='width: 100%; border-collapse: collapse; font-size: 16px;'>"

    # Header v·ªõi sticky positioning
    html_table += "<thead><tr>"
    for col in df_display.columns:
        html_table += f"<th style='position: sticky; top: 0; padding: 15px 8px; text-align: center; background-color: #f0f2f6; font-weight: bold; font-size: 17px; border: 1px solid #ddd; z-index: 10;'>{col}</th>"
    html_table += "</tr></thead>"

    # Body
    html_table += "<tbody>"
    for _, row in df_display.iterrows():
        html_table += "<tr>"
        for i, col in enumerate(df_display.columns):
            cell_value = row[col]
            style = "padding: 12px 8px; text-align: center; border: 1px solid #ddd; vertical-align: middle;"
            if i == 0:  # Period column
                style += " font-weight: 600; background-color: #f8f9fa;"
            html_table += f"<td style='{style}'>{cell_value}</td>"
        html_table += "</tr>"
    html_table += "</tbody></table></div>"

    st.markdown(html_table, unsafe_allow_html=True)

    return period_type

# H√†m t·∫°o bi·ªÉu ƒë·ªì cho vƒÉn b·∫£n ƒëi
def create_outgoing_docs_charts(df, period_type='Tu·∫ßn'):
    # H√†ng 1: Bi·ªÉu ƒë·ªì t·ªïng quan
    col1, col2 = st.columns(2)
    
    with col1:
        # Chart 1: H∆∞·ªõng d·∫´n + Th·ªß t·ª•c
        # Bi·ªÉu ƒë·ªì theo period_type ƒë∆∞·ª£c ch·ªçn
        df_chart = df.copy()

        # T·∫°o period theo l·ª±a ch·ªçn
        if period_type == 'Tu·∫ßn':
            df_chart['period'] = 'W' + df_chart['week'].astype(str) + '-' + df_chart['year'].astype(str)
            df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['week']
            chart_title = 'üìà VƒÉn b·∫£n ƒëi theo tu·∫ßn'
            x_title = "Tu·∫ßn"
        elif period_type == 'Th√°ng':
            df_chart['period'] = 'T' + df_chart['month'].astype(str) + '-' + df_chart['year'].astype(str)
            df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['month']
            chart_title = 'üìà VƒÉn b·∫£n ƒëi theo th√°ng'
            x_title = "Th√°ng"
        elif period_type == 'Qu√Ω':
            df_chart['quarter'] = ((df_chart['month'] - 1) // 3) + 1
            df_chart['period'] = 'Q' + df_chart['quarter'].astype(str) + '-' + df_chart['year'].astype(str)
            df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['quarter']
            chart_title = 'üìà VƒÉn b·∫£n ƒëi theo qu√Ω'
            x_title = "Qu√Ω"
        elif period_type == 'NƒÉm':
            df_chart['period'] = df_chart['year'].astype(str)
            df_chart['period_sort'] = df_chart['year']
            chart_title = 'üìà VƒÉn b·∫£n ƒëi theo nƒÉm'
            x_title = "NƒÉm"
        else:  # Ng√†y
            df_chart['period'] = df_chart['datetime'].dt.strftime('%d/%m/%Y')
            df_chart['period_sort'] = df_chart['datetime']
            chart_title = 'üìà VƒÉn b·∫£n ƒëi theo ng√†y'
            x_title = "Ng√†y"

        business_categories = ['instruct_total', 'procedures_total']
        business_names = ['H∆∞·ªõng d·∫´n', 'Th·ªß t·ª•c']
        business_colors = ['#1f77b4', '#ff7f0e']

        # Ch·ªâ l·∫•y c√°c c·ªôt c√≥ trong DataFrame
        available_business_categories = [col for col in business_categories if col in df_chart.columns]

        # T√≠nh data theo period (ch·ªâ v·ªõi c√°c c·ªôt c√≥ s·∫µn)
        if available_business_categories:
            business_data = df_chart.groupby(['period', 'period_sort'])[available_business_categories].sum().reset_index()
        else:
            # T·∫°o DataFrame r·ªóng n·∫øu kh√¥ng c√≥ c·ªôt n√†o
            business_data = df_chart.groupby(['period', 'period_sort']).size().reset_index(name='count')
        business_data = business_data.sort_values('period_sort')

        fig_business = go.Figure()

        for i, cat in enumerate(business_categories):
            if cat in available_business_categories and cat in business_data.columns and business_data[cat].sum() > 0:
                fig_business.add_trace(go.Scatter(
                    x=business_data['period'],
                    y=business_data[cat],
                    mode='lines+markers',
                    name=business_names[i],
                    line=dict(color=business_colors[i], width=3),
                    marker=dict(size=8)
                ))

                # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng
                if len(business_data) >= 3:
                    ma_window = min(3, len(business_data)//2)
                    if ma_window > 0:
                        ma_trend = business_data[cat].rolling(window=ma_window, center=True).mean()
                        fig_business.add_trace(go.Scatter(
                            x=business_data['period'],
                            y=ma_trend,
                            mode='lines',
                            name=f'{business_names[i]} - Xu h∆∞·ªõng',
                            line=dict(color=business_colors[i], width=2, dash='dash'),
                            opacity=0.7,
                            showlegend=False
                        ))

        fig_business.update_layout(
            title=f'üìÑ H∆∞·ªõng d·∫´n & Th·ªß t·ª•c theo {period_type.lower()}',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            hovermode='x unified'
        )
        st.plotly_chart(fig_business, use_container_width=True)
    
    with col2:
        # Chart 2: Quy ch·∫ø + Quy ƒë·ªãnh (b·ªè h∆∞·ªõng d·∫´n v√† th·ªß t·ª•c)
        admin_categories = ['regulations_total', 'rules_total']
        admin_names = ['Quy ch·∫ø', 'Quy ƒë·ªãnh']
        admin_colors = ['#2ca02c', '#d62728']

        # Ch·ªâ l·∫•y c√°c c·ªôt c√≥ trong DataFrame
        available_admin_categories = [col for col in admin_categories if col in df_chart.columns]

        # T√≠nh data theo period (ch·ªâ v·ªõi c√°c c·ªôt c√≥ s·∫µn)
        if available_admin_categories:
            admin_data = df_chart.groupby(['period', 'period_sort'])[available_admin_categories].sum().reset_index()
        else:
            # T·∫°o DataFrame r·ªóng n·∫øu kh√¥ng c√≥ c·ªôt n√†o
            admin_data = df_chart.groupby(['period', 'period_sort']).size().reset_index(name='count')
        admin_data = admin_data.sort_values('period_sort')

        fig_admin = go.Figure()

        for i, cat in enumerate(admin_categories):
            if cat in available_admin_categories and cat in admin_data.columns and admin_data[cat].sum() > 0:
                fig_admin.add_trace(go.Scatter(
                    x=admin_data['period'],
                    y=admin_data[cat],
                    mode='lines+markers',
                    name=admin_names[i],
                    line=dict(color=admin_colors[i], width=3),
                    marker=dict(size=8)
                ))

                # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng
                if len(admin_data) >= 3:
                    ma_window = min(3, len(admin_data)//2)
                    if ma_window > 0:
                        ma_trend = admin_data[cat].rolling(window=ma_window, center=True).mean()
                        fig_admin.add_trace(go.Scatter(
                            x=admin_data['period'],
                            y=ma_trend,
                            mode='lines',
                            name=f'{admin_names[i]} - Xu h∆∞·ªõng',
                            line=dict(color=admin_colors[i], width=2, dash='dash'),
                            opacity=0.7,
                            showlegend=False
                        ))

        fig_admin.update_layout(
            title=f'üìã Quy ch·∫ø & Quy ƒë·ªãnh theo {period_type.lower()}',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            hovermode='x unified'
        )
        st.plotly_chart(fig_admin, use_container_width=True)
    
    # H√†ng 2: Bi·ªÉu ƒë·ªì chi ti·∫øt c√°c nh√≥m vƒÉn b·∫£n
    st.markdown("#### üìä Ph√¢n t√≠ch chi ti·∫øt theo nh√≥m vƒÉn b·∫£n")

    col1, col2 = st.columns(2)

    with col1:
        # Group data theo period
        period_data = df_chart.groupby(['period', 'period_sort']).agg({
            'total_outgoing': 'sum',
            'documents': 'sum'
        }).reset_index()
        period_data = period_data.sort_values('period_sort')

        # T·∫°o bi·ªÉu ƒë·ªì so s√°nh
        fig_compare = go.Figure()

        if 'total_outgoing' in df.columns:
            # ƒê∆∞·ªùng ch√≠nh
            fig_compare.add_trace(go.Scatter(
                x=period_data['period'],
                y=period_data['total_outgoing'],
                mode='lines+markers',
                name='T·ªïng vƒÉn b·∫£n ƒëi',
                line=dict(color='blue', width=3),
                marker=dict(size=8)
            ))

            # ƒê∆∞·ªùng xu h∆∞·ªõng
            if len(period_data) >= 3:
                ma_window = min(3, len(period_data)//2)
                if ma_window > 0:
                    ma_trend = period_data['total_outgoing'].rolling(window=ma_window, center=True).mean()
                    fig_compare.add_trace(go.Scatter(
                        x=period_data['period'],
                        y=ma_trend,
                        mode='lines',
                        name='Xu h∆∞·ªõng t·ªïng',
                        line=dict(color='blue', width=2, dash='dash'),
                        opacity=0.7,
                        showlegend=False
                    ))

        # ƒê∆∞·ªùng ch√≠nh
        fig_compare.add_trace(go.Scatter(
            x=period_data['period'],
            y=period_data['documents'],
            mode='lines+markers',
            name='VƒÉn b·∫£n ph√°t h√†nh',
            line=dict(color='orange', width=3),
            marker=dict(size=8)
        ))

        # ƒê∆∞·ªùng xu h∆∞·ªõng
        if len(period_data) >= 3:
            ma_window = min(3, len(period_data)//2)
            if ma_window > 0:
                ma_trend = period_data['documents'].rolling(window=ma_window, center=True).mean()
                fig_compare.add_trace(go.Scatter(
                    x=period_data['period'],
                    y=ma_trend,
                    mode='lines',
                    name='Xu h∆∞·ªõng ph√°t h√†nh',
                    line=dict(color='orange', width=2, dash='dash'),
                    opacity=0.7,
                    showlegend=False
                ))

        fig_compare.update_layout(
            title=f'{chart_title} (So s√°nh)',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            hovermode='x unified'
        )
        st.plotly_chart(fig_compare, use_container_width=True)

        # Bi·ªÉu ƒë·ªì ph√¢n b·ªë theo lo·∫°i vƒÉn b·∫£n theo period
        categories = ['contracts_total', 'decisions_total', 'regulations_total',
                     'rules_total', 'procedures_total', 'instruct_total']
        category_names = ['H·ª£p ƒë·ªìng', 'Quy·∫øt ƒë·ªãnh', 'Quy ch·∫ø', 'Quy ƒë·ªãnh', 'Th·ªß t·ª•c', 'H∆∞·ªõng d·∫´n']

        # Ch·ªâ l·∫•y c√°c c·ªôt c√≥ trong DataFrame
        available_categories = [col for col in categories if col in df_chart.columns]

        # T√≠nh t·ªïng c√°c lo·∫°i vƒÉn b·∫£n theo period (ch·ªâ v·ªõi c√°c c·ªôt c√≥ s·∫µn)
        if available_categories:
            category_data = df_chart.groupby(['period', 'period_sort'])[available_categories].sum().reset_index()
        else:
            # T·∫°o DataFrame r·ªóng n·∫øu kh√¥ng c√≥ c·ªôt n√†o
            category_data = df_chart.groupby(['period', 'period_sort']).size().reset_index(name='count')
        category_data = category_data.sort_values('period_sort')

        # T·∫°o stacked bar chart
        fig_stack = go.Figure()

        for i, cat in enumerate(categories):
            if cat in available_categories and cat in category_data.columns and category_data[cat].sum() > 0:
                fig_stack.add_trace(go.Bar(
                    name=category_names[i],
                    x=category_data['period'],
                    y=category_data[cat]
                ))

        fig_stack.update_layout(
            title=f'üìä Ph√¢n b·ªë lo·∫°i vƒÉn b·∫£n theo {period_type.lower()}',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            barmode='stack'
        )
        st.plotly_chart(fig_stack, use_container_width=True)

    with col2:
        # Bi·ªÉu ƒë·ªì xu h∆∞·ªõng c√°c lo·∫°i vƒÉn b·∫£n ch√≠nh theo period
        fig_trend = go.Figure()

        # Top 2 lo·∫°i vƒÉn b·∫£n ch√≠nh: H·ª£p ƒë·ªìng + Quy·∫øt ƒë·ªãnh (b·ªè quy ch·∫ø)
        top_categories = ['contracts_total', 'decisions_total']
        top_names = ['H·ª£p ƒë·ªìng', 'Quy·∫øt ƒë·ªãnh']
        colors = ['blue', 'red']

        for i, cat in enumerate(top_categories):
            if cat in df.columns and category_data[cat].sum() > 0:
                # ƒê∆∞·ªùng ch√≠nh
                fig_trend.add_trace(go.Scatter(
                    x=category_data['period'],
                    y=category_data[cat],
                    mode='lines+markers',
                    name=top_names[i],
                    line=dict(color=colors[i], width=3),
                    marker=dict(size=8)
                ))

                # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng
                if len(category_data) >= 3:
                    ma_window = min(3, len(category_data)//2)
                    if ma_window > 0:
                        ma_trend = category_data[cat].rolling(window=ma_window, center=True).mean()
                        fig_trend.add_trace(go.Scatter(
                            x=category_data['period'],
                            y=ma_trend,
                            mode='lines',
                            name=f'{top_names[i]} - Xu h∆∞·ªõng',
                            line=dict(color=colors[i], width=2, dash='dash'),
                            opacity=0.7,
                            showlegend=False
                        ))

        fig_trend.update_layout(
            title=f'üìà Xu h∆∞·ªõng vƒÉn b·∫£n ch√≠nh theo {period_type.lower()}',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            hovermode='x unified'
        )
        st.plotly_chart(fig_trend, use_container_width=True)

        # Bi·ªÉu ƒë·ªì pie t·ªïng h·ª£p
        category_totals = []
        available_names = []
        for i, cat in enumerate(categories):
            if cat in df.columns:
                total = df[cat].sum()
                if total > 0:
                    category_totals.append(total)
                    available_names.append(category_names[i])

        if category_totals:
            fig_pie = px.pie(
                values=category_totals,
                names=available_names,
                title='üìä Ph√¢n b·ªë t·ªïng h·ª£p theo lo·∫°i vƒÉn b·∫£n'
            )
            st.plotly_chart(fig_pie, use_container_width=True)

# H√†m x·ª≠ l√Ω d·ªØ li·ªáu qu·∫£n l√Ω c√¥ng vi·ªác
def process_task_management_data(uploaded_file):
    try:
        if uploaded_file.type == "application/json":
            data = json.load(uploaded_file)
            if isinstance(data, dict) and "data" in data:
                data_list = data["data"]
            else:
                data_list = data
        else:
            df_temp = pd.read_csv(uploaded_file)
            data_list = df_temp.to_dict('records')
        
        # T·∫°o DataFrame t·ª´ all_departments
        all_dept_records = []
        dept_detail_records = []
        
        for record in data_list:
            # X·ª≠ l√Ω Date -> date ƒë·ªÉ consistent v·ªõi c√°c tab kh√°c
            if 'Date' in record:
                record['date'] = record['Date']
            if 'Month' in record:
                record['month'] = record['Month'] 
            if 'Year' in record:
                record['year'] = record['Year']
            
            # T·∫°o record cho t·ªïng h·ª£p all_departments
            all_dept_data = record.get('all_departments', {})
            all_dept_record = {
                'date': record.get('date', record.get('Date', 1)),
                'month': record.get('month', record.get('Month', 1)),
                'year': record.get('year', record.get('Year', 2025)),
                'department': 'T·∫•t c·∫£ ph√≤ng ban',
                'tasks_assigned': all_dept_data.get('tasks_assigned', 0),
                'tasks_completed_on_time': all_dept_data.get('tasks_completed_on_time', 0),
                'tasks_completed_on_time_rate': all_dept_data.get('tasks_completed_on_time_rate', 0),
                'tasks_new': all_dept_data.get('tasks_new', 0),
                'tasks_new_rate': all_dept_data.get('tasks_new_rate', 0),
                'tasks_processing': all_dept_data.get('tasks_processing', 0),
                'tasks_processing_rate': all_dept_data.get('tasks_processing_rate', 0)
            }
            all_dept_records.append(all_dept_record)
            
            # T·∫°o records cho t·ª´ng ph√≤ng ban
            detail_depts = record.get('detail_departments', [])
            for dept in detail_depts:
                dept_record = {
                    'date': record.get('date', record.get('Date', 1)),
                    'month': record.get('month', record.get('Month', 1)),
                    'year': record.get('year', record.get('Year', 2025)),
                    'department': dept.get('Name', 'Kh√¥ng x√°c ƒë·ªãnh'),
                    'tasks_assigned': dept.get('tasks_assigned', 0),
                    'tasks_completed_on_time': dept.get('tasks_completed_on_time', 0),
                    'tasks_completed_on_time_rate': dept.get('tasks_completed_on_time_rate', 0),
                    'tasks_new': dept.get('tasks_new', 0),
                    'tasks_new_rate': dept.get('tasks_new_rate', 0),
                    'tasks_processing': dept.get('tasks_processing', 0),
                    'tasks_processing_rate': dept.get('tasks_processing_rate', 0)
                }
                dept_detail_records.append(dept_record)
        
        # T·∫°o DataFrame t·ªïng h·ª£p
        df_all = pd.DataFrame(all_dept_records)
        df_detail = pd.DataFrame(dept_detail_records)
        
        # T·∫°o datetime v√† week
        for df in [df_all, df_detail]:
            df['datetime'] = pd.to_datetime(df[['year', 'month', 'date']].rename(columns={'date': 'day'}))
            df['weekday'] = df['datetime'].dt.day_name()
            df['week'] = df['datetime'].dt.isocalendar().week
            
            # T√≠nh c√°c ch·ªâ s·ªë ph·ª•
            df['completion_rate'] = (df['tasks_completed_on_time'] / df['tasks_assigned'] * 100).fillna(0)
            df['processing_rate'] = (df['tasks_processing'] / df['tasks_assigned'] * 100).fillna(0)
            df['new_rate'] = (df['tasks_new'] / df['tasks_assigned'] * 100).fillna(0)
        
        return df_all, df_detail
        
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu qu·∫£n l√Ω c√¥ng vi·ªác: {str(e)}")
        return None, None

# H√†m x·ª≠ l√Ω d·ªØ li·ªáu l·ªãch h·ªçp
def process_meeting_data(uploaded_file):
    try:
        if uploaded_file.type == "application/json":
            data = json.load(uploaded_file)
            if isinstance(data, dict) and "data" in data:
                df = pd.DataFrame(data["data"])
            else:
                df = pd.DataFrame(data)
        else:
            df = pd.read_csv(uploaded_file)
        
        # Chu·∫©n h√≥a t√™n c·ªôt
        if 'Date' in df.columns:
            df['date'] = df['Date']
        if 'Month' in df.columns:
            df['month'] = df['Month']
        if 'Year' in df.columns:
            df['year'] = df['Year']
            
        # T·∫°o c·ªôt datetime
        df['datetime'] = pd.to_datetime(df[['year', 'month', 'date']].rename(columns={'date': 'day'}))
        df['weekday'] = df['datetime'].dt.day_name()
        df['weekday_vi'] = df['weekday'].map({
            'Monday': 'Th·ª© 2', 'Tuesday': 'Th·ª© 3', 'Wednesday': 'Th·ª© 4',
            'Thursday': 'Th·ª© 5', 'Friday': 'Th·ª© 6', 'Saturday': 'Th·ª© 7', 'Sunday': 'Ch·ªß nh·∫≠t'
        })
        df['week'] = df['datetime'].dt.isocalendar().week
        
        # ƒê·∫£m b·∫£o c·ªôt meeting_schedules t·ªìn t·∫°i
        if 'meeting_schedules' not in df.columns:
            df['meeting_schedules'] = 0
            
        # Ph√¢n lo·∫°i m·ª©c ƒë·ªô b·∫≠n r·ªôn
        df['meeting_level'] = df['meeting_schedules'].apply(lambda x: 
            'R·∫•t √≠t' if x <= 2 else
            '√çt' if x <= 5 else
            'Trung b√¨nh' if x <= 10 else
            'Nhi·ªÅu' if x <= 20 else
            'R·∫•t nhi·ªÅu'
        )
        
        # T√≠nh s·ªë ng√†y l√†m vi·ªác/cu·ªëi tu·∫ßn
        df['is_weekend'] = df['weekday'].isin(['Saturday', 'Sunday'])
        df['day_type'] = df['is_weekend'].map({False: 'Ng√†y l√†m vi·ªác', True: 'Cu·ªëi tu·∫ßn'})
        
        return df
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu l·ªãch h·ªçp: {str(e)}")
        return None

# H√†m t·∫°o pivot table cho qu·∫£n l√Ω c√¥ng vi·ªác
def create_task_pivot_table(df_all, df_detail):
    st.markdown("### üìä B·∫£ng Pivot - Ph√¢n t√≠ch c√¥ng vi·ªác theo th·ªùi gian")
    
    # L·ª±a ch·ªçn m·ª©c ƒë·ªô t·ªïng h·ª£p v√† lo·∫°i d·ªØ li·ªáu
    col1, col2 = st.columns(2)
    with col1:
        period_type = st.selectbox(
            "üìÖ T·ªïng h·ª£p theo:",
            options=['Ng√†y', 'Tu·∫ßn', 'Th√°ng', 'Qu√Ω', 'NƒÉm'],
            index=1,  # M·∫∑c ƒë·ªãnh l√† Tu·∫ßn
            key="task_period"
        )
    
    with col2:
        data_type = st.selectbox(
            "üìã D·ªØ li·ªáu:",
            options=['T·ªïng h·ª£p', 'Chi ti·∫øt ph√≤ng ban'],
            index=0,
            key="task_data_type"
        )
    
    # Ch·ªçn DataFrame ph√π h·ª£p
    df = df_all if data_type == 'T·ªïng h·ª£p' else df_detail
    
    # Chu·∫©n b·ªã d·ªØ li·ªáu theo lo·∫°i period
    df_period = df.copy()
    
    if period_type == 'Tu·∫ßn':
        df_period['period'] = 'W' + df_period['week'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['week']
    elif period_type == 'Th√°ng':
        df_period['period'] = 'T' + df_period['month'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['month']
    elif period_type == 'Qu√Ω':
        df_period['quarter'] = ((df_period['month'] - 1) // 3) + 1
        df_period['period'] = 'Q' + df_period['quarter'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['quarter']
    elif period_type == 'NƒÉm':
        df_period['period'] = df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year']
    else:  # Ng√†y
        df_period['period'] = df_period['datetime'].dt.strftime('%d/%m/%Y')
        df_period['period_sort'] = df_period['datetime']
    
    # Groupby columns
    group_cols = ['period', 'period_sort']
    if data_type == 'Chi ti·∫øt ph√≤ng ban':
        group_cols.append('department')
    
    # T·∫°o pivot table
    pivot_columns = ['tasks_assigned', 'tasks_completed_on_time', 'tasks_new', 'tasks_processing']
    
    pivot_data = df_period.groupby(group_cols)[pivot_columns].sum().reset_index()
    pivot_data = pivot_data.sort_values('period_sort', ascending=False)
    
    # T√≠nh l·∫°i c√°c t·ª∑ l·ªá sau khi group
    pivot_data['completion_rate'] = (pivot_data['tasks_completed_on_time'] / pivot_data['tasks_assigned'] * 100).fillna(0)
    pivot_data['processing_rate'] = (pivot_data['tasks_processing'] / pivot_data['tasks_assigned'] * 100).fillna(0)
    pivot_data['new_rate'] = (pivot_data['tasks_new'] / pivot_data['tasks_assigned'] * 100).fillna(0)
    
    # T√≠nh to√°n bi·∫øn ƒë·ªông so v·ªõi k·ª≥ tr∆∞·ªõc
    if data_type == 'T·ªïng h·ª£p':
        for col in pivot_columns + ['completion_rate']:
            pivot_data[f'{col}_prev'] = pivot_data[col].shift(-1)
            pivot_data[f'{col}_change'] = pivot_data[col] - pivot_data[f'{col}_prev']
            if col != 'completion_rate':
                pivot_data[f'{col}_change_pct'] = ((pivot_data[col] / pivot_data[f'{col}_prev'] - 1) * 100).round(1)
            else:
                pivot_data[f'{col}_change_pct'] = (pivot_data[col] - pivot_data[f'{col}_prev']).round(1)
            pivot_data[f'{col}_change_pct'] = pivot_data[f'{col}_change_pct'].fillna(0)
    
    st.markdown(f"#### üìã T·ªïng h·ª£p theo {period_type} - {data_type}")

    if data_type == 'T·ªïng h·ª£p':
        # H√†m format cell v·ªõi bi·∫øn ƒë·ªông (gi·ªëng nh∆∞ document modules)
        def format_cell_with_change(row, col):
            current_val = row[col]
            change_val = row[f'{col}_change']
            change_pct = row[f'{col}_change_pct']
            prev_val = row[f'{col}_prev']

            if pd.isna(prev_val) or (col != 'completion_rate' and prev_val == 0):
                if col == 'completion_rate':
                    return f"{current_val:.1f}%"
                else:
                    return f"{int(current_val)}"

            if change_val > 0:
                color = "#28a745"
                arrow = "‚Üó"
                sign = "+"
            elif change_val < 0:
                color = "#dc3545"
                arrow = "‚Üò"
                sign = ""
            else:
                color = "#6c757d"
                arrow = "‚Üí"
                sign = ""

            if col == 'completion_rate':
                return f"""<div style="text-align: center; line-height: 1.2;">
                    <div style="font-size: 16px; font-weight: 600;">{current_val:.1f}%</div>
                    <div style="color: {color}; font-weight: 600; font-size: 12px; margin-top: 2px;">
                        {arrow} {sign}{change_val:.1f}%
                    </div>
                </div>"""
            else:
                return f"""<div style="text-align: center; line-height: 1.2;">
                    <div style="font-size: 16px; font-weight: 600;">{int(current_val)}</div>
                    <div style="color: {color}; font-weight: 600; font-size: 12px; margin-top: 2px;">
                        {arrow} {sign}{int(change_val)} ({change_pct:+.1f}%)
                    </div>
                </div>"""

        # T·∫°o DataFrame hi·ªÉn th·ªã v·ªõi bi·∫øn ƒë·ªông trong c√πng cell
        display_data = pivot_data.copy()
        display_columns = ['period']
        column_names = {f'period': f'{period_type}'}

        # T·∫°o c·ªôt hi·ªÉn th·ªã m·ªõi cho t·ª´ng metric
        task_columns = ['tasks_assigned', 'tasks_completed_on_time', 'tasks_new', 'tasks_processing', 'completion_rate']
        task_names = ['Giao vi·ªác', 'Ho√†n th√†nh', 'Vi·ªác m·ªõi', 'ƒêang x·ª≠ l√Ω', 'T·ª∑ l·ªá ho√†n th√†nh']

        for i, col in enumerate(task_columns):
            new_col = f'{col}_display'
            display_data[new_col] = display_data.apply(lambda row: format_cell_with_change(row, col), axis=1)
            display_columns.append(new_col)
            column_names[new_col] = task_names[i]

        # Hi·ªÉn th·ªã b·∫£ng v·ªõi HTML ƒë·ªÉ render m√†u s·∫Øc (gi·ªëng nh∆∞ document modules)
        df_display = display_data[display_columns].rename(columns=column_names)

        # T·∫°o HTML table v·ªõi sticky header (gi·ªëng h·ªát document modules)
        html_table = "<div style='max-height: 400px; overflow-y: auto; border: 1px solid #ddd;'><table style='width: 100%; border-collapse: collapse; font-size: 16px;'>"

        # Header v·ªõi sticky positioning
        html_table += "<thead><tr>"
        for col in df_display.columns:
            html_table += f"<th style='position: sticky; top: 0; padding: 15px 8px; text-align: center; background-color: #f0f2f6; font-weight: bold; font-size: 17px; border: 1px solid #ddd; z-index: 10;'>{col}</th>"
        html_table += "</tr></thead>"

        # Body
        html_table += "<tbody>"
        for _, row in df_display.iterrows():
            html_table += "<tr>"
            for i, col in enumerate(df_display.columns):
                cell_value = row[col]
                style = "padding: 12px 8px; text-align: center; border: 1px solid #ddd; vertical-align: middle;"
                if i == 0:  # Period column
                    style += " font-weight: 600; background-color: #f8f9fa;"
                html_table += f"<td style='{style}'>{cell_value}</td>"
            html_table += "</tr>"
        html_table += "</tbody></table></div>"

        st.markdown(html_table, unsafe_allow_html=True)
    else:
        # Hi·ªÉn th·ªã b√¨nh th∆∞·ªùng cho chi ti·∫øt ph√≤ng ban
        display_columns = group_cols + pivot_columns + ['completion_rate']
        rename_dict = {
            'period': f'{period_type}',
            'department': 'Ph√≤ng ban',
            'tasks_assigned': 'Giao vi·ªác',
            'tasks_completed_on_time': 'Ho√†n th√†nh ƒë√∫ng h·∫°n',
            'tasks_new': 'Vi·ªác m·ªõi',
            'tasks_processing': 'ƒêang x·ª≠ l√Ω',
            'completion_rate': 'T·ª∑ l·ªá ho√†n th√†nh (%)'
        }

        display_df = pivot_data[display_columns].copy()
        display_df['completion_rate'] = display_df['completion_rate'].round(1)
        st.dataframe(display_df.rename(columns=rename_dict), use_container_width=True)

    return period_type

# H√†m t·∫°o bi·ªÉu ƒë·ªì cho qu·∫£n l√Ω c√¥ng vi·ªác
def create_task_management_charts(df_all, df_detail, period_type='Tu·∫ßn'):
    # Chart t·ªïng s·ªë l∆∞·ª£ng c√¥ng vi·ªác theo ph√≤ng ban tr∆∞·ªõc
    if len(df_detail) > 0:
        st.markdown("#### üìä T·ªïng s·ªë l∆∞·ª£ng c√¥ng vi·ªác theo ph√≤ng ban")

        dept_summary = df_detail.groupby('department').agg({
            'tasks_assigned': 'sum',
            'tasks_completed_on_time': 'sum',
            'tasks_processing': 'sum',
            'tasks_new': 'sum'
        }).reset_index()

        # T√≠nh s·ªë c√¥ng vi·ªác ch∆∞a ho√†n th√†nh (bao g·ªìm ƒëang x·ª≠ l√Ω + m·ªõi)
        dept_summary['tasks_incomplete'] = dept_summary['tasks_processing'] + dept_summary['tasks_new']

        # S·∫Øp x·∫øp theo t·ªïng s·ªë c√¥ng vi·ªác (t·ª´ nhi·ªÅu nh·∫•t ƒë·∫øn √≠t nh·∫•t)
        dept_summary = dept_summary.sort_values('tasks_assigned', ascending=False)

        # Hi·ªÉn th·ªã t·∫•t c·∫£ ph√≤ng ban v·ªõi chi·ªÅu cao ƒë·ªông
        dept_display = dept_summary.iloc[::-1]  # Reverse ƒë·ªÉ chart hi·ªÉn th·ªã ƒë√∫ng th·ª© t·ª±

        # T·∫°o chart v·ªõi t·∫•t c·∫£ d·ªØ li·ªáu
        fig_dept_full = go.Figure()

        # Th√™m c·ªôt ho√†n th√†nh (xanh)
        fig_dept_full.add_trace(go.Bar(
            name='Ho√†n th√†nh',
            y=dept_display['department'],
            x=dept_display['tasks_completed_on_time'],
            orientation='h',
            marker_color='#28a745'
        ))

        # Th√™m c·ªôt ch∆∞a ho√†n th√†nh (ƒë·ªè)
        fig_dept_full.add_trace(go.Bar(
            name='Ch∆∞a ho√†n th√†nh',
            y=dept_display['department'],
            x=dept_display['tasks_incomplete'],
            orientation='h',
            marker_color='#dc3545'
        ))

        # C·∫•u h√¨nh layout v·ªõi chi·ªÅu cao ƒë·∫ßy ƒë·ªß ƒë·ªÉ hi·ªÉn th·ªã t·∫•t c·∫£ ph√≤ng ban
        fig_dept_full.update_layout(
            title=f'üìä T·ªïng s·ªë l∆∞·ª£ng c√¥ng vi·ªác theo ph√≤ng ban (T·∫•t c·∫£ {len(dept_summary)} ph√≤ng ban)',
            xaxis_title="S·ªë l∆∞·ª£ng",
            yaxis_title="",
            barmode='stack',
            showlegend=True,
            height=max(500, len(dept_summary) * 25 + 100),  # Dynamic height v·ªõi minimum 500px
            margin=dict(l=150, r=30, t=60, b=30)  # TƒÉng left margin ƒë·ªÉ hi·ªÉn th·ªã t√™n ph√≤ng ban d√†i
        )

        st.plotly_chart(fig_dept_full, use_container_width=True)

        # Th√™m b·∫£ng chi ti·∫øt ph√≤ng ban
        with st.expander(f"üìã Chi ti·∫øt t·∫•t c·∫£ {len(dept_summary)} ph√≤ng ban"):
            dept_display_table = dept_summary.copy()
            dept_display_table['completion_rate'] = (dept_display_table['tasks_completed_on_time'] / dept_display_table['tasks_assigned'] * 100).round(1)

            st.dataframe(
                dept_display_table[['department', 'tasks_assigned', 'tasks_completed_on_time', 'tasks_processing', 'tasks_new', 'completion_rate']].rename(columns={
                    'department': 'Ph√≤ng ban',
                    'tasks_assigned': 'T·ªïng giao vi·ªác',
                    'tasks_completed_on_time': 'Ho√†n th√†nh',
                    'tasks_processing': 'ƒêang x·ª≠ l√Ω',
                    'tasks_new': 'Vi·ªác m·ªõi',
                    'completion_rate': 'T·ª∑ l·ªá ho√†n th√†nh (%)'
                }),
                use_container_width=True
            )

        st.markdown("---")

    # Bi·ªÉu ƒë·ªì cumulative l·ªõn
    st.markdown("#### üìà Xu h∆∞·ªõng t√≠ch l≈©y t·∫•t c·∫£ c√°c c√¥ng vi·ªác")

    # S·∫Øp x·∫øp theo th·ªùi gian v√† t√≠nh cumulative
    df_all_sorted = df_all.sort_values('datetime').reset_index(drop=True)

    # T√≠nh to√°n c·ªông d·ªìn
    df_all_sorted['cumulative_assigned'] = df_all_sorted['tasks_assigned'].cumsum()
    df_all_sorted['cumulative_completed'] = df_all_sorted['tasks_completed_on_time'].cumsum()
    df_all_sorted['cumulative_processing'] = df_all_sorted['tasks_processing'].cumsum()
    df_all_sorted['cumulative_new'] = df_all_sorted['tasks_new'].cumsum()

    # Bi·ªÉu ƒë·ªì cumulative l·ªõn
    fig_cumulative = go.Figure()

    # Th√™m c√°c ƒë∆∞·ªùng cumulative
    fig_cumulative.add_trace(go.Scatter(
        x=df_all_sorted['datetime'],
        y=df_all_sorted['cumulative_assigned'],
        mode='lines+markers',
        name='üìã T·ªïng giao vi·ªác',
        line=dict(color='#1f77b4', width=4),
        marker=dict(size=10)
    ))

    fig_cumulative.add_trace(go.Scatter(
        x=df_all_sorted['datetime'],
        y=df_all_sorted['cumulative_completed'],
        mode='lines+markers',
        name='‚úÖ T·ªïng ƒë√£ ho√†n th√†nh',
        line=dict(color='#28a745', width=4),
        marker=dict(size=10)
    ))

    fig_cumulative.add_trace(go.Scatter(
        x=df_all_sorted['datetime'],
        y=df_all_sorted['cumulative_processing'],
        mode='lines+markers',
        name='üîÑ T·ªïng ƒëang x·ª≠ l√Ω',
        line=dict(color='#fd7e14', width=3),
        marker=dict(size=8)
    ))

    fig_cumulative.add_trace(go.Scatter(
        x=df_all_sorted['datetime'],
        y=df_all_sorted['cumulative_new'],
        mode='lines+markers',
        name='üÜï T·ªïng vi·ªác m·ªõi',
        line=dict(color='#dc3545', width=3),
        marker=dict(size=8)
    ))

    fig_cumulative.update_layout(
        title='üìä T√≠ch l≈©y t·∫•t c·∫£ c√¥ng vi·ªác theo th·ªùi gian',
        xaxis_title="Th·ªùi gian",
        yaxis_title="S·ªë l∆∞·ª£ng t√≠ch l≈©y",
        hovermode='x unified',
        height=500,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="center",
            x=0.5
        )
    )

    st.plotly_chart(fig_cumulative, use_container_width=True)

    st.markdown("---")

    # C√°c bi·ªÉu ƒë·ªì chi ti·∫øt
    col1, col2 = st.columns(2)

    # Chu·∫©n b·ªã d·ªØ li·ªáu theo period_type cho c·∫£ 2 c·ªôt
    df_chart = df_all.copy()

    # T·∫°o period theo l·ª±a ch·ªçn
    if period_type == 'Tu·∫ßn':
        df_chart['period'] = 'W' + df_chart['week'].astype(str) + '-' + df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['week']
        chart_title_base = 'theo tu·∫ßn'
        x_title = "Tu·∫ßn"
    elif period_type == 'Th√°ng':
        df_chart['period'] = 'T' + df_chart['month'].astype(str) + '-' + df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['month']
        chart_title_base = 'theo th√°ng'
        x_title = "Th√°ng"
    elif period_type == 'Qu√Ω':
        df_chart['quarter'] = ((df_chart['month'] - 1) // 3) + 1
        df_chart['period'] = 'Q' + df_chart['quarter'].astype(str) + '-' + df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['quarter']
        chart_title_base = 'theo qu√Ω'
        x_title = "Qu√Ω"
    elif period_type == 'NƒÉm':
        df_chart['period'] = df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year']
        chart_title_base = 'theo nƒÉm'
        x_title = "NƒÉm"
    else:  # Ng√†y
        df_chart['period'] = df_chart['datetime'].dt.strftime('%d/%m/%Y')
        df_chart['period_sort'] = df_chart['datetime']
        chart_title_base = 'theo ng√†y'
        x_title = "Ng√†y"

    # Group data theo period
    period_data = df_chart.groupby(['period', 'period_sort']).agg({
        'tasks_assigned': 'sum',
        'tasks_completed_on_time': 'sum',
        'tasks_processing': 'sum',
        'tasks_new': 'sum'
    }).reset_index()
    period_data = period_data.sort_values('period_sort')

    with col1:
        # Chart 1: Ch·ªâ hi·ªÉn th·ªã Giao vi·ªác
        fig_assigned = go.Figure()

        fig_assigned.add_trace(go.Scatter(
            x=period_data['period'],
            y=period_data['tasks_assigned'],
            mode='lines+markers',
            name='Giao vi·ªác',
            line=dict(color='#1f77b4', width=4),
            marker=dict(size=10)
        ))

        # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng cho giao vi·ªác
        if len(period_data) >= 3:
            ma_window = min(3, len(period_data)//2)
            if ma_window > 0:
                ma_trend = period_data['tasks_assigned'].rolling(window=ma_window, center=True).mean()
                fig_assigned.add_trace(go.Scatter(
                    x=period_data['period'],
                    y=ma_trend,
                    mode='lines',
                    name='Xu h∆∞·ªõng',
                    line=dict(color='#1f77b4', width=2, dash='dash'),
                    opacity=0.7,
                    showlegend=False
                ))

        fig_assigned.update_layout(
            title=f'üìã Giao vi·ªác {chart_title_base}',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            hovermode='x unified',
            height=400
        )
        st.plotly_chart(fig_assigned, use_container_width=True)

    with col2:
        # Chart 2: Ho√†n th√†nh, ƒêang x·ª≠ l√Ω, Vi·ªác m·ªõi
        fig_status = go.Figure()

        # Th√™m c√°c ƒë∆∞·ªùng cho c√°c lo·∫°i c√¥ng vi·ªác (tr·ª´ giao vi·ªác)
        status_data = [
            ('tasks_completed_on_time', 'Ho√†n th√†nh', '#28a745'),
            ('tasks_processing', 'ƒêang x·ª≠ l√Ω', '#fd7e14'),
            ('tasks_new', 'Vi·ªác m·ªõi', '#dc3545')
        ]

        for col_name, name, color in status_data:
            fig_status.add_trace(go.Scatter(
                x=period_data['period'],
                y=period_data[col_name],
                mode='lines+markers',
                name=name,
                line=dict(color=color, width=3),
                marker=dict(size=8)
            ))

            # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng
            if len(period_data) >= 3:
                ma_window = min(3, len(period_data)//2)
                if ma_window > 0:
                    ma_trend = period_data[col_name].rolling(window=ma_window, center=True).mean()
                    fig_status.add_trace(go.Scatter(
                        x=period_data['period'],
                        y=ma_trend,
                        mode='lines',
                        name=f'{name} - Xu h∆∞·ªõng',
                        line=dict(color=color, width=2, dash='dash'),
                        opacity=0.7,
                        showlegend=False
                    ))

        fig_status.update_layout(
            title=f'üìä Tr·∫°ng th√°i c√¥ng vi·ªác {chart_title_base}',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            hovermode='x unified',
            height=400
        )
        st.plotly_chart(fig_status, use_container_width=True)

    # H√†ng 2: 2 charts b·ªï sung
    st.markdown("---")
    col3, col4 = st.columns(2)

    with col3:
        # Chart 3: T·ª∑ l·ªá ho√†n th√†nh
        period_data['completion_rate'] = (period_data['tasks_completed_on_time'] / period_data['tasks_assigned'] * 100).fillna(0)

        fig_completion = go.Figure()
        fig_completion.add_trace(go.Scatter(
            x=period_data['period'],
            y=period_data['completion_rate'],
            mode='lines+markers',
            name='T·ª∑ l·ªá ho√†n th√†nh',
            line=dict(color='purple', width=3),
            marker=dict(size=8)
        ))

        # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng cho t·ª∑ l·ªá ho√†n th√†nh
        if len(period_data) >= 3:
            ma_window = min(3, len(period_data)//2)
            if ma_window > 0:
                ma_trend = period_data['completion_rate'].rolling(window=ma_window, center=True).mean()
                fig_completion.add_trace(go.Scatter(
                    x=period_data['period'],
                    y=ma_trend,
                    mode='lines',
                    name='Xu h∆∞·ªõng t·ª∑ l·ªá',
                    line=dict(color='purple', width=2, dash='dash'),
                    opacity=0.7,
                    showlegend=False
                ))

        fig_completion.update_layout(
            title=f'üìä T·ª∑ l·ªá ho√†n th√†nh {chart_title_base}',
            xaxis_title=x_title,
            yaxis_title="T·ª∑ l·ªá (%)",
            hovermode='x unified',
            height=400
        )
        st.plotly_chart(fig_completion, use_container_width=True)

    with col4:
        # Chart 4: Pie chart t·ªïng h·ª£p tr·∫°ng th√°i
        total_completed = period_data['tasks_completed_on_time'].sum()
        total_processing = period_data['tasks_processing'].sum()
        total_new = period_data['tasks_new'].sum()

        # Ch·ªâ hi·ªÉn th·ªã c√°c tr·∫°ng th√°i c√≥ gi√° tr·ªã > 0
        status_data = []
        status_values = []
        status_colors = []

        if total_completed > 0:
            status_data.append('Ho√†n th√†nh')
            status_values.append(total_completed)
            status_colors.append('#28a745')  # Xanh

        if total_processing > 0:
            status_data.append('ƒêang x·ª≠ l√Ω')
            status_values.append(total_processing)
            status_colors.append('#fd7e14')  # Cam

        if total_new > 0:
            status_data.append('Vi·ªác m·ªõi')
            status_values.append(total_new)
            status_colors.append('#dc3545')  # ƒê·ªè

        if status_values:  # Ch·ªâ v·∫Ω n·∫øu c√≥ d·ªØ li·ªáu
            fig_pie = go.Figure(data=[go.Pie(
                labels=status_data,
                values=status_values,
                hole=0.4,
                marker_colors=status_colors,
                textinfo='label+value+percent',
                textposition='auto'
            )])

            fig_pie.update_layout(
                title='üìã T·ªïng h·ª£p tr·∫°ng th√°i c√¥ng vi·ªác',
                showlegend=True,
                legend=dict(orientation="v", yanchor="middle", y=0.5),
                height=400
            )

            st.plotly_chart(fig_pie, use_container_width=True)

        else:
            st.info("üìã Kh√¥ng c√≥ d·ªØ li·ªáu tr·∫°ng th√°i c√¥ng vi·ªác")

# H√†m t·∫°o pivot table cho l·ªãch h·ªçp
def create_meeting_pivot_table(df):
    st.markdown("### üìä B·∫£ng Pivot - Ph√¢n t√≠ch l·ªãch h·ªçp theo th·ªùi gian")

    # L·ª±a ch·ªçn m·ª©c ƒë·ªô t·ªïng h·ª£p
    period_type = st.selectbox(
        "üìÖ T·ªïng h·ª£p theo:",
        options=['Ng√†y', 'Tu·∫ßn', 'Th√°ng', 'Qu√Ω', 'NƒÉm'],
        index=1,  # M·∫∑c ƒë·ªãnh l√† Tu·∫ßn
        key="meeting_period"
    )

    # Chu·∫©n b·ªã d·ªØ li·ªáu theo lo·∫°i period
    df_period = df.copy()

    if period_type == 'Tu·∫ßn':
        df_period['period'] = 'W' + df_period['week'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['week']
    elif period_type == 'Th√°ng':
        df_period['period'] = 'T' + df_period['month'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['month']
    elif period_type == 'Qu√Ω':
        df_period['quarter'] = ((df_period['month'] - 1) // 3) + 1
        df_period['period'] = 'Q' + df_period['quarter'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['quarter']
    elif period_type == 'NƒÉm':
        df_period['period'] = df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year']
    else:  # Ng√†y
        df_period['period'] = df_period['datetime'].dt.strftime('%d/%m/%Y')
        df_period['period_sort'] = df_period['datetime']

    # T·∫°o pivot table cho meeting data
    pivot_columns = ['meeting_schedules']

    pivot_data = df_period.groupby(['period', 'period_sort'])[pivot_columns].sum().reset_index()
    pivot_data = pivot_data.sort_values('period_sort', ascending=False)

    # T√≠nh t·ª∑ l·ªá ng√†y b·∫≠n r·ªôn (>5 cu·ªôc h·ªçp)
    busy_days = df_period.groupby(['period', 'period_sort']).apply(
        lambda x: (x['meeting_schedules'] > 5).sum()
    ).reset_index(name='busy_days')

    total_days = df_period.groupby(['period', 'period_sort']).size().reset_index(name='total_days')

    pivot_data = pivot_data.merge(busy_days, on=['period', 'period_sort'])
    pivot_data = pivot_data.merge(total_days, on=['period', 'period_sort'])

    pivot_data['busy_rate'] = (pivot_data['busy_days'] / pivot_data['total_days'] * 100).fillna(0)

    # T√≠nh to√°n bi·∫øn ƒë·ªông so v·ªõi k·ª≥ tr∆∞·ªõc
    for col in ['meeting_schedules', 'busy_days', 'busy_rate']:
        pivot_data[f'{col}_prev'] = pivot_data[col].shift(-1)
        pivot_data[f'{col}_change'] = pivot_data[col] - pivot_data[f'{col}_prev']
        if col not in ['busy_rate']:
            pivot_data[f'{col}_change_pct'] = ((pivot_data[col] / pivot_data[f'{col}_prev'] - 1) * 100).round(1)
        else:
            pivot_data[f'{col}_change_pct'] = (pivot_data[col] - pivot_data[f'{col}_prev']).round(1)
        pivot_data[f'{col}_change_pct'] = pivot_data[f'{col}_change_pct'].fillna(0)

    st.markdown(f"#### üìã T·ªïng h·ª£p theo {period_type}")

    # H√†m format cell v·ªõi bi·∫øn ƒë·ªông (gi·ªëng nh∆∞ task management)
    def format_cell_with_change(row, col):
        current_val = row[col]
        change_val = row[f'{col}_change']
        change_pct = row[f'{col}_change_pct']
        prev_val = row[f'{col}_prev']

        if pd.isna(prev_val) or (col not in ['busy_rate'] and prev_val == 0):
            if col == 'busy_rate':
                return f"{current_val:.1f}%"
            else:
                return f"{int(current_val)}"

        if change_val > 0:
            color = "#28a745"
            arrow = "‚Üó"
            sign = "+"
        elif change_val < 0:
            color = "#dc3545"
            arrow = "‚Üò"
            sign = ""
        else:
            color = "#6c757d"
            arrow = "‚Üí"
            sign = ""

        if col == 'busy_rate':
            return f"""<div style="text-align: center; line-height: 1.2;">
                <div style="font-size: 16px; font-weight: 600;">{current_val:.1f}%</div>
                <div style="color: {color}; font-weight: 600; font-size: 12px; margin-top: 2px;">
                    {arrow} {sign}{change_val:.1f}%
                </div>
            </div>"""
        else:
            return f"""<div style="text-align: center; line-height: 1.2;">
                <div style="font-size: 16px; font-weight: 600;">{int(current_val)}</div>
                <div style="color: {color}; font-weight: 600; font-size: 12px; margin-top: 2px;">
                    {arrow} {sign}{int(change_val)} ({change_pct:+.1f}%)
                </div>
            </div>"""

    # T·∫°o DataFrame hi·ªÉn th·ªã v·ªõi bi·∫øn ƒë·ªông trong c√πng cell
    display_data = pivot_data.copy()
    display_columns = ['period']
    column_names = {f'period': f'{period_type}'}

    # T·∫°o c·ªôt hi·ªÉn th·ªã m·ªõi cho t·ª´ng metric
    meeting_columns = ['meeting_schedules', 'busy_days', 'busy_rate']
    meeting_names = ['T·ªïng cu·ªôc h·ªçp', 'Ng√†y b·∫≠n r·ªôn', 'T·ª∑ l·ªá ng√†y b·∫≠n (%)']

    for i, col in enumerate(meeting_columns):
        new_col = f'{col}_display'
        display_data[new_col] = display_data.apply(lambda row: format_cell_with_change(row, col), axis=1)
        display_columns.append(new_col)
        column_names[new_col] = meeting_names[i]

    # Hi·ªÉn th·ªã b·∫£ng v·ªõi HTML ƒë·ªÉ render m√†u s·∫Øc (gi·ªëng nh∆∞ task management)
    df_display = display_data[display_columns].rename(columns=column_names)

    # T·∫°o HTML table v·ªõi sticky header (gi·ªëng h·ªát task management)
    html_table = "<div style='max-height: 400px; overflow-y: auto; border: 1px solid #ddd;'><table style='width: 100%; border-collapse: collapse; font-size: 16px;'>"

    # Header v·ªõi sticky positioning
    html_table += "<thead><tr>"
    for col in df_display.columns:
        html_table += f"<th style='position: sticky; top: 0; padding: 15px 8px; text-align: center; background-color: #f0f2f6; font-weight: bold; font-size: 17px; border: 1px solid #ddd; z-index: 10;'>{col}</th>"
    html_table += "</tr></thead>"

    # Body
    html_table += "<tbody>"
    for _, row in df_display.iterrows():
        html_table += "<tr>"
        for i, col in enumerate(df_display.columns):
            cell_value = row[col]
            style = "padding: 12px 8px; text-align: center; border: 1px solid #ddd; vertical-align: middle;"
            if i == 0:  # Period column
                style += " font-weight: 600; background-color: #f8f9fa;"
            html_table += f"<td style='{style}'>{cell_value}</td>"
        html_table += "</tr>"
    html_table += "</tbody></table></div>"

    st.markdown(html_table, unsafe_allow_html=True)

    return period_type

# H√†m t·∫°o pivot table cho qu·∫£n l√Ω ph√≤ng h·ªçp
def create_room_pivot_table(df):
    st.markdown("### üìä B·∫£ng Pivot - Ph√¢n t√≠ch ƒëƒÉng k√Ω ph√≤ng h·ªçp theo th·ªùi gian")

    # L·ª±a ch·ªçn m·ª©c ƒë·ªô t·ªïng h·ª£p
    period_type = st.selectbox(
        "üìÖ T·ªïng h·ª£p theo:",
        options=['Ng√†y', 'Tu·∫ßn', 'Th√°ng', 'Qu√Ω', 'NƒÉm'],
        index=1,  # M·∫∑c ƒë·ªãnh l√† Tu·∫ßn
        key="room_period"
    )

    # Chu·∫©n b·ªã d·ªØ li·ªáu theo lo·∫°i period
    df_period = df.copy()
    df_period['year'] = df_period['datetime'].dt.year
    df_period['month'] = df_period['datetime'].dt.month
    df_period['week'] = df_period['datetime'].dt.isocalendar().week

    if period_type == 'Tu·∫ßn':
        df_period['period'] = 'W' + df_period['week'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['week']
    elif period_type == 'Th√°ng':
        df_period['period'] = 'T' + df_period['month'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['month']
    elif period_type == 'Qu√Ω':
        df_period['quarter'] = ((df_period['month'] - 1) // 3) + 1
        df_period['period'] = 'Q' + df_period['quarter'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['quarter']
    elif period_type == 'NƒÉm':
        df_period['period'] = df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year']
    else:  # Ng√†y
        df_period['period'] = df_period['datetime'].dt.strftime('%d/%m/%Y')
        df_period['period_sort'] = df_period['datetime']

    # T·∫°o pivot table cho room data
    pivot_data = df_period.groupby(['period', 'period_sort']).agg({
        'register_room': 'sum',
        'register_room_cancel': 'sum',
        'net_bookings': 'sum'
    }).reset_index()
    pivot_data = pivot_data.sort_values('period_sort', ascending=False)

    # T√≠nh t·ª∑ l·ªá h·ªßy
    pivot_data['cancel_rate'] = (pivot_data['register_room_cancel'] / pivot_data['register_room'] * 100).fillna(0)

    # T√≠nh to√°n bi·∫øn ƒë·ªông so v·ªõi k·ª≥ tr∆∞·ªõc
    for col in ['register_room', 'register_room_cancel', 'net_bookings', 'cancel_rate']:
        pivot_data[f'{col}_prev'] = pivot_data[col].shift(-1)
        pivot_data[f'{col}_change'] = pivot_data[col] - pivot_data[f'{col}_prev']
        if col not in ['cancel_rate']:
            pivot_data[f'{col}_change_pct'] = ((pivot_data[col] / pivot_data[f'{col}_prev'] - 1) * 100).round(1)
        else:
            pivot_data[f'{col}_change_pct'] = (pivot_data[col] - pivot_data[f'{col}_prev']).round(1)
        pivot_data[f'{col}_change_pct'] = pivot_data[f'{col}_change_pct'].fillna(0)

    st.markdown(f"#### üìã T·ªïng h·ª£p theo {period_type}")

    # H√†m format cell v·ªõi bi·∫øn ƒë·ªông
    def format_cell_with_change(row, col):
        current_val = row[col]
        change_val = row[f'{col}_change']
        change_pct = row[f'{col}_change_pct']
        prev_val = row[f'{col}_prev']

        if pd.isna(prev_val) or (col not in ['cancel_rate'] and prev_val == 0):
            if col == 'cancel_rate':
                return f"{current_val:.1f}%"
            else:
                return f"{int(current_val)}"

        if change_val > 0:
            color = "#28a745"
            arrow = "‚Üó"
            sign = "+"
        elif change_val < 0:
            color = "#dc3545"
            arrow = "‚Üò"
            sign = ""
        else:
            color = "#6c757d"
            arrow = "‚Üí"
            sign = ""

        if col == 'cancel_rate':
            return f"""<div style="text-align: center; line-height: 1.2;">
                <div style="font-size: 16px; font-weight: 600;">{current_val:.1f}%</div>
                <div style="color: {color}; font-weight: 600; font-size: 12px; margin-top: 2px;">
                    {arrow} {sign}{change_val:.1f}%
                </div>
            </div>"""
        else:
            return f"""<div style="text-align: center; line-height: 1.2;">
                <div style="font-size: 16px; font-weight: 600;">{int(current_val)}</div>
                <div style="color: {color}; font-weight: 600; font-size: 12px; margin-top: 2px;">
                    {arrow} {sign}{int(change_val)} ({change_pct:+.1f}%)
                </div>
            </div>"""

    # T·∫°o DataFrame hi·ªÉn th·ªã v·ªõi bi·∫øn ƒë·ªông trong c√πng cell
    display_data = pivot_data.copy()
    display_columns = ['period']
    column_names = {f'period': f'{period_type}'}

    # T·∫°o c·ªôt hi·ªÉn th·ªã m·ªõi cho t·ª´ng metric
    room_columns = ['register_room', 'register_room_cancel', 'net_bookings', 'cancel_rate']
    room_names = ['T·ªïng ƒëƒÉng k√Ω', 'T·ªïng h·ªßy', 'ƒêƒÉng k√Ω th·ª±c', 'T·ª∑ l·ªá h·ªßy (%)']

    for i, col in enumerate(room_columns):
        new_col = f'{col}_display'
        display_data[new_col] = display_data.apply(lambda row: format_cell_with_change(row, col), axis=1)
        display_columns.append(new_col)
        column_names[new_col] = room_names[i]

    # Hi·ªÉn th·ªã b·∫£ng v·ªõi HTML ƒë·ªÉ render m√†u s·∫Øc
    df_display = display_data[display_columns].rename(columns=column_names)

    # T·∫°o HTML table v·ªõi sticky header
    html_table = "<div style='max-height: 400px; overflow-y: auto; border: 1px solid #ddd;'><table style='width: 100%; border-collapse: collapse; font-size: 16px;'>"

    # Header v·ªõi sticky positioning
    html_table += "<thead><tr>"
    for col in df_display.columns:
        html_table += f"<th style='position: sticky; top: 0; padding: 15px 8px; text-align: center; background-color: #f0f2f6; font-weight: bold; font-size: 17px; border: 1px solid #ddd; z-index: 10;'>{col}</th>"
    html_table += "</tr></thead>"

    # Body
    html_table += "<tbody>"
    for _, row in df_display.iterrows():
        html_table += "<tr>"
        for i, col in enumerate(df_display.columns):
            cell_value = row[col]
            style = "padding: 12px 8px; text-align: center; border: 1px solid #ddd; vertical-align: middle;"
            if i == 0:  # Period column
                style += " font-weight: 600; background-color: #f8f9fa;"
            html_table += f"<td style='{style}'>{cell_value}</td>"
        html_table += "</tr>"
    html_table += "</tbody></table></div>"

    st.markdown(html_table, unsafe_allow_html=True)

    return period_type

# H√†m t·∫°o bi·ªÉu ƒë·ªì cho qu·∫£n l√Ω ph√≤ng h·ªçp
def create_room_charts(df, period_type='Tu·∫ßn'):
    # C√°c bi·ªÉu ƒë·ªì chi ti·∫øt
    col1, col2 = st.columns(2)
    # Chu·∫©n b·ªã d·ªØ li·ªáu theo period_type
    df_chart = df.copy()

    # Th√™m c√°c c·ªôt c·∫ßn thi·∫øt
    df_chart['year'] = df_chart['datetime'].dt.year
    df_chart['month'] = df_chart['datetime'].dt.month
    df_chart['week'] = df_chart['datetime'].dt.isocalendar().week

    # T·∫°o period theo l·ª±a ch·ªçn
    if period_type == 'Tu·∫ßn':
        df_chart['period'] = 'W' + df_chart['week'].astype(str) + '-' + df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['week']
        chart_title_base = 'theo tu·∫ßn'
        x_title = "Tu·∫ßn"
    elif period_type == 'Th√°ng':
        df_chart['period'] = 'T' + df_chart['month'].astype(str) + '-' + df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['month']
        chart_title_base = 'theo th√°ng'
        x_title = "Th√°ng"
    elif period_type == 'Qu√Ω':
        df_chart['quarter'] = ((df_chart['month'] - 1) // 3) + 1
        df_chart['period'] = 'Q' + df_chart['quarter'].astype(str) + '-' + df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['quarter']
        chart_title_base = 'theo qu√Ω'
        x_title = "Qu√Ω"
    elif period_type == 'NƒÉm':
        df_chart['period'] = df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year']
        chart_title_base = 'theo nƒÉm'
        x_title = "NƒÉm"
    else:  # Ng√†y
        df_chart['period'] = df_chart['datetime'].dt.strftime('%d/%m/%Y')
        df_chart['period_sort'] = df_chart['datetime']
        chart_title_base = 'theo ng√†y'
        x_title = "Ng√†y"

    # Group data theo period
    period_data = df_chart.groupby(['period', 'period_sort']).agg({
        'register_room': 'sum',
        'register_room_cancel': 'sum',
        'net_bookings': 'sum'
    }).reset_index()
    period_data = period_data.sort_values('period_sort')
    period_data['cancel_rate'] = (period_data['register_room_cancel'] / period_data['register_room'] * 100).fillna(0)

    with col1:
        # Chart 1: ƒêƒÉng k√Ω ph√≤ng theo period
        fig_bookings = go.Figure()

        fig_bookings.add_trace(go.Scatter(
            x=period_data['period'],
            y=period_data['register_room'],
            mode='lines+markers',
            name='ƒêƒÉng k√Ω',
            line=dict(color='#007bff', width=4),
            marker=dict(size=10)
        ))

        # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng
        if len(period_data) >= 3:
            ma_window = min(3, len(period_data)//2)
            if ma_window > 0:
                ma_trend = period_data['register_room'].rolling(window=ma_window, center=True).mean()
                fig_bookings.add_trace(go.Scatter(
                    x=period_data['period'],
                    y=ma_trend,
                    mode='lines',
                    name='Xu h∆∞·ªõng',
                    line=dict(color='#007bff', width=2, dash='dash'),
                    opacity=0.7,
                    showlegend=False
                ))

        fig_bookings.update_layout(
            title=f'üè¢ ƒêƒÉng k√Ω ph√≤ng {chart_title_base}',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            hovermode='x unified',
            height=400
        )
        st.plotly_chart(fig_bookings, use_container_width=True)

    with col2:
        # Chart 2: So s√°nh ƒëƒÉng k√Ω vs h·ªßy
        fig_compare = go.Figure()

        fig_compare.add_trace(go.Bar(
            x=period_data['period'],
            y=period_data['register_room'],
            name='ƒêƒÉng k√Ω',
            marker_color='#28a745'
        ))

        fig_compare.add_trace(go.Bar(
            x=period_data['period'],
            y=period_data['register_room_cancel'],
            name='H·ªßy b·ªè',
            marker_color='#dc3545'
        ))

        fig_compare.update_layout(
            title=f'üìä So s√°nh ƒëƒÉng k√Ω vs h·ªßy {chart_title_base}',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            barmode='group',
            height=400
        )
        st.plotly_chart(fig_compare, use_container_width=True)

    # H√†ng 2: 2 charts b·ªï sung
    st.markdown("---")
    col3, col4 = st.columns(2)

    with col3:
        # Chart 3: T·ª∑ l·ªá h·ªßy theo period
        fig_cancel_rate = go.Figure()

        fig_cancel_rate.add_trace(go.Scatter(
            x=period_data['period'],
            y=period_data['cancel_rate'],
            mode='lines+markers',
            name='T·ª∑ l·ªá h·ªßy',
            line=dict(color='#ffc107', width=4),
            marker=dict(size=10)
        ))

        # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng
        if len(period_data) >= 3:
            ma_window = min(3, len(period_data)//2)
            if ma_window > 0:
                ma_trend_cancel = period_data['cancel_rate'].rolling(window=ma_window, center=True).mean()
                fig_cancel_rate.add_trace(go.Scatter(
                    x=period_data['period'],
                    y=ma_trend_cancel,
                    mode='lines',
                    name='Xu h∆∞·ªõng',
                    line=dict(color='#ffc107', width=2, dash='dash'),
                    opacity=0.7,
                    showlegend=False
                ))

        fig_cancel_rate.update_layout(
            title=f'üìâ T·ª∑ l·ªá h·ªßy {chart_title_base}',
            xaxis_title=x_title,
            yaxis_title="T·ª∑ l·ªá (%)",
            hovermode='x unified',
            height=400
        )
        st.plotly_chart(fig_cancel_rate, use_container_width=True)

    with col4:
        # Chart 4: Ph√¢n b·ªë theo ng√†y trong tu·∫ßn
        weekday_summary = df.groupby('weekday_vi').agg({
            'register_room': 'sum',
            'register_room_cancel': 'sum'
        }).reindex([
            'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7', 'Ch·ªß nh·∫≠t'
        ]).fillna(0)

        fig_weekday = go.Figure()

        fig_weekday.add_trace(go.Bar(
            name='ƒêƒÉng k√Ω',
            x=weekday_summary.index,
            y=weekday_summary['register_room'],
            marker_color='#007bff'
        ))

        fig_weekday.add_trace(go.Bar(
            name='H·ªßy b·ªè',
            x=weekday_summary.index,
            y=weekday_summary['register_room_cancel'],
            marker_color='#dc3545'
        ))

        fig_weekday.update_layout(
            title='üìÖ Ph√¢n b·ªë theo ng√†y trong tu·∫ßn',
            xaxis_title="Ng√†y trong tu·∫ßn",
            yaxis_title="S·ªë l∆∞·ª£ng",
            barmode='group',
            height=400
        )
        st.plotly_chart(fig_weekday, use_container_width=True)

# H√†m t·∫°o bi·ªÉu ƒë·ªì cho l·ªãch h·ªçp
def create_meeting_charts(df, period_type='Tu·∫ßn'):

    # C√°c bi·ªÉu ƒë·ªì chi ti·∫øt
    col1, col2 = st.columns(2)
    # Chu·∫©n b·ªã d·ªØ li·ªáu theo period_type
    df_chart = df.copy()

    # T·∫°o period theo l·ª±a ch·ªçn
    if period_type == 'Tu·∫ßn':
        df_chart['period'] = 'W' + df_chart['week'].astype(str) + '-' + df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['week']
        chart_title_base = 'theo tu·∫ßn'
        x_title = "Tu·∫ßn"
    elif period_type == 'Th√°ng':
        df_chart['period'] = 'T' + df_chart['month'].astype(str) + '-' + df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['month']
        chart_title_base = 'theo th√°ng'
        x_title = "Th√°ng"
    elif period_type == 'Qu√Ω':
        df_chart['quarter'] = ((df_chart['month'] - 1) // 3) + 1
        df_chart['period'] = 'Q' + df_chart['quarter'].astype(str) + '-' + df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['quarter']
        chart_title_base = 'theo qu√Ω'
        x_title = "Qu√Ω"
    elif period_type == 'NƒÉm':
        df_chart['period'] = df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year']
        chart_title_base = 'theo nƒÉm'
        x_title = "NƒÉm"
    else:  # Ng√†y
        df_chart['period'] = df_chart['datetime'].dt.strftime('%d/%m/%Y')
        df_chart['period_sort'] = df_chart['datetime']
        chart_title_base = 'theo ng√†y'
        x_title = "Ng√†y"

    # Group data theo period
    period_data = df_chart.groupby(['period', 'period_sort']).agg({
        'meeting_schedules': 'sum'
    }).reset_index()
    period_data = period_data.sort_values('period_sort')

    with col1:
        # Chart 1: Cu·ªôc h·ªçp theo period
        fig_meetings = go.Figure()

        fig_meetings.add_trace(go.Scatter(
            x=period_data['period'],
            y=period_data['meeting_schedules'],
            mode='lines+markers',
            name='Cu·ªôc h·ªçp',
            line=dict(color='#007bff', width=4),
            marker=dict(size=10)
        ))

        # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng
        if len(period_data) >= 3:
            ma_window = min(3, len(period_data)//2)
            if ma_window > 0:
                ma_trend = period_data['meeting_schedules'].rolling(window=ma_window, center=True).mean()
                fig_meetings.add_trace(go.Scatter(
                    x=period_data['period'],
                    y=ma_trend,
                    mode='lines',
                    name='Xu h∆∞·ªõng',
                    line=dict(color='#007bff', width=2, dash='dash'),
                    opacity=0.7,
                    showlegend=False
                ))

        fig_meetings.update_layout(
            title=f'üìÖ Cu·ªôc h·ªçp {chart_title_base}',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            hovermode='x unified',
            height=400
        )
        st.plotly_chart(fig_meetings, use_container_width=True)

    with col2:
        # Chart 2: Ph√¢n b·ªë theo ng√†y trong tu·∫ßn
        weekday_summary = df.groupby('weekday_vi')['meeting_schedules'].sum().reindex([
            'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7', 'Ch·ªß nh·∫≠t'
        ]).fillna(0)

        colors = ['#28a745' if day in ['Th·ª© 7', 'Ch·ªß nh·∫≠t'] else '#007bff' for day in weekday_summary.index]

        fig_weekday = px.bar(
            x=weekday_summary.index,
            y=weekday_summary.values,
            title='üìÖ Ph√¢n b·ªë cu·ªôc h·ªçp theo ng√†y trong tu·∫ßn',
            color=weekday_summary.index,
            color_discrete_sequence=colors
        )
        fig_weekday.update_layout(
            xaxis_title="Ng√†y trong tu·∫ßn",
            yaxis_title="T·ªïng s·ªë cu·ªôc h·ªçp",
            showlegend=False,
            height=400
        )
        st.plotly_chart(fig_weekday, use_container_width=True)

    # H√†ng 2: 2 charts b·ªï sung
    st.markdown("---")
    col3, col4 = st.columns(2)

    with col3:
        # Chart 3: M·ª©c ƒë·ªô b·∫≠n r·ªôn
        level_counts = df['meeting_level'].value_counts()
        level_order = ['R·∫•t √≠t', '√çt', 'Trung b√¨nh', 'Nhi·ªÅu', 'R·∫•t nhi·ªÅu']
        level_counts = level_counts.reindex(level_order).fillna(0)

        colors_level = {'R·∫•t √≠t': '#28a745', '√çt': '#6c757d', 'Trung b√¨nh': '#ffc107',
                       'Nhi·ªÅu': '#fd7e14', 'R·∫•t nhi·ªÅu': '#dc3545'}

        fig_level = px.pie(
            values=level_counts.values,
            names=level_counts.index,
            title='üìä Ph√¢n b·ªë m·ª©c ƒë·ªô b·∫≠n r·ªôn',
            color=level_counts.index,
            color_discrete_map=colors_level,
            hole=0.4
        )
        fig_level.update_layout(height=400)
        st.plotly_chart(fig_level, use_container_width=True)

    with col4:
        # Chart 4: So s√°nh ng√†y l√†m vi·ªác vs cu·ªëi tu·∫ßn
        day_type_summary = df.groupby('day_type')['meeting_schedules'].agg(['count', 'sum', 'mean']).round(1)

        fig_daytype = go.Figure()
        fig_daytype.add_trace(go.Bar(
            name='S·ªë ng√†y',
            x=day_type_summary.index,
            y=day_type_summary['count'],
            marker_color='lightblue'
        ))
        fig_daytype.add_trace(go.Bar(
            name='T·ªïng cu·ªôc h·ªçp',
            x=day_type_summary.index,
            y=day_type_summary['sum'],
            marker_color='darkblue'
        ))

        fig_daytype.update_layout(
            title='üìä So s√°nh ng√†y l√†m vi·ªác vs cu·ªëi tu·∫ßn',
            xaxis_title="Lo·∫°i ng√†y",
            yaxis_title="S·ªë l∆∞·ª£ng",
            barmode='group',
            height=400
        )
        st.plotly_chart(fig_daytype, use_container_width=True)

# H√†m t·∫°o bi·ªÉu ƒë·ªì cho vƒÉn b·∫£n ƒë·∫øn
def create_incoming_docs_charts(df, period_type='Tu·∫ßn'):
    col1, col2 = st.columns(2)
    
    with col1:
        # Bi·ªÉu ƒë·ªì theo period_type ƒë∆∞·ª£c ch·ªçn
        df_chart = df.copy()

        # T·∫°o period theo l·ª±a ch·ªçn
        if period_type == 'Tu·∫ßn':
            df_chart['period'] = 'W' + df_chart['week'].astype(str) + '-' + df_chart['year'].astype(str)
            df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['week']
            chart_title = 'üìà S·ªë l∆∞·ª£ng vƒÉn b·∫£n ƒë·∫øn theo tu·∫ßn'
            x_title = "Tu·∫ßn"
        elif period_type == 'Th√°ng':
            df_chart['period'] = 'T' + df_chart['month'].astype(str) + '-' + df_chart['year'].astype(str)
            df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['month']
            chart_title = 'üìà S·ªë l∆∞·ª£ng vƒÉn b·∫£n ƒë·∫øn theo th√°ng'
            x_title = "Th√°ng"
        elif period_type == 'Qu√Ω':
            df_chart['quarter'] = ((df_chart['month'] - 1) // 3) + 1
            df_chart['period'] = 'Q' + df_chart['quarter'].astype(str) + '-' + df_chart['year'].astype(str)
            df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['quarter']
            chart_title = 'üìà S·ªë l∆∞·ª£ng vƒÉn b·∫£n ƒë·∫øn theo qu√Ω'
            x_title = "Qu√Ω"
        elif period_type == 'NƒÉm':
            df_chart['period'] = df_chart['year'].astype(str)
            df_chart['period_sort'] = df_chart['year']
            chart_title = 'üìà S·ªë l∆∞·ª£ng vƒÉn b·∫£n ƒë·∫øn theo nƒÉm'
            x_title = "NƒÉm"
        else:  # Ng√†y
            df_chart['period'] = df_chart['datetime'].dt.strftime('%d/%m/%Y')
            df_chart['period_sort'] = df_chart['datetime']
            chart_title = 'üìà S·ªë l∆∞·ª£ng vƒÉn b·∫£n ƒë·∫øn theo ng√†y'
            x_title = "Ng√†y"

        # Group data theo period
        period_data = df_chart.groupby(['period', 'period_sort'])['total_incoming'].sum().reset_index()
        period_data = period_data.sort_values('period_sort')

        # T·∫°o bi·ªÉu ƒë·ªì
        fig_period = go.Figure()

        # ƒê∆∞·ªùng bi·ªÉu ƒë·ªì ch√≠nh
        fig_period.add_trace(go.Scatter(
            x=period_data['period'],
            y=period_data['total_incoming'],
            mode='lines+markers',
            name='VƒÉn b·∫£n ƒë·∫øn',
            line=dict(color='#1f77b4', width=2),
            marker=dict(size=8)
        ))

        # ƒê∆∞·ªùng xu h∆∞·ªõng (n·∫øu ƒë·ªß d·ªØ li·ªáu)
        if len(period_data) >= 3:
            ma_window = min(3, len(period_data)//2)
            ma_trend = period_data['total_incoming'].rolling(window=ma_window, center=True).mean()
            fig_period.add_trace(go.Scatter(
                x=period_data['period'],
                y=ma_trend,
                mode='lines',
                name=f'Xu h∆∞·ªõng ({ma_window} {period_type.lower()})',
                line=dict(color='red', width=3, dash='dash'),
                opacity=0.8
            ))

        fig_period.update_layout(
            title=f'{chart_title} (c√≥ xu h∆∞·ªõng)',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng vƒÉn b·∫£n",
            hovermode='x unified'
        )
        st.plotly_chart(fig_period, use_container_width=True)
        
        # Bi·ªÉu ƒë·ªì t·ª∑ l·ªá x·ª≠ l√Ω ƒë√∫ng h·∫°n vs tr·ªÖ h·∫°n theo period_type
        # T√≠nh l·∫°i processed data theo period
        processed_summary = df_chart.groupby(['period', 'period_sort']).agg({
            'processed_on_time': 'sum',
            'processed_late': 'sum'
        }).reset_index()
        processed_summary = processed_summary.sort_values('period_sort')

        fig_processed = go.Figure()
        fig_processed.add_trace(go.Scatter(x=processed_summary['period'],
                                         y=processed_summary['processed_on_time'],
                                         mode='lines+markers', name='ƒê√∫ng h·∫°n',
                                         line=dict(color='green')))
        fig_processed.add_trace(go.Scatter(x=processed_summary['period'],
                                         y=processed_summary['processed_late'],
                                         mode='lines+markers', name='Tr·ªÖ h·∫°n',
                                         line=dict(color='red')))
        fig_processed.update_layout(title=f'‚è∞ T√¨nh h√¨nh x·ª≠ l√Ω vƒÉn b·∫£n theo {period_type.lower()}',
                                  xaxis_title=x_title, yaxis_title="S·ªë l∆∞·ª£ng")
        st.plotly_chart(fig_processed, use_container_width=True)
    
    with col2:
        # Bi·ªÉu ƒë·ªì ph√¢n b·ªë theo ƒë∆°n v·ªã g·ª≠i
        def extract_sender_name(x):
            try:
                if isinstance(x, dict):
                    return x.get('send_name', 'Kh√°c')
                elif isinstance(x, str):
                    import json
                    parsed = json.loads(x)
                    return parsed.get('send_name', 'Kh√°c')
                else:
                    return 'Kh√°c'
            except:
                return 'Kh√°c'

        sender_data = df['total_incoming_detail'].apply(extract_sender_name).value_counts()
        fig_sender = px.pie(values=sender_data.values, names=sender_data.index,
                           title='üèõÔ∏è Ph√¢n b·ªë theo ƒë∆°n v·ªã g·ª≠i')
        st.plotly_chart(fig_sender, use_container_width=True)

        # Bi·ªÉu ƒë·ªì top ƒë∆°n v·ªã g·ª≠i theo period_type
        try:
            # T·∫°o DataFrame v·ªõi sender cho t·ª´ng period
            df_chart['sender'] = df_chart['total_incoming_detail'].apply(extract_sender_name)

            # T√¨m top 5 senders t·ªïng th·ªÉ
            top_senders = df_chart['sender'].value_counts().head(5).index.tolist()

            if len(top_senders) > 0:
                fig_sender_trend = go.Figure()

                for sender in top_senders:
                    # ƒê·∫øm s·ªë vƒÉn b·∫£n t·ª´ sender n√†y theo period
                    sender_data = df_chart[df_chart['sender'] == sender].groupby(['period', 'period_sort']).size().reset_index(name='count')
                    sender_data = sender_data.sort_values('period_sort')

                    # ƒê·∫£m b·∫£o t·∫•t c·∫£ periods ƒë·ªÅu c√≥ d·ªØ li·ªáu (fill missing v·ªõi 0)
                    all_periods = period_data[['period', 'period_sort']].drop_duplicates()
                    sender_data = all_periods.merge(sender_data, on=['period', 'period_sort'], how='left')
                    sender_data['count'] = sender_data['count'].fillna(0)

                    fig_sender_trend.add_trace(go.Bar(
                        name=sender,
                        x=sender_data['period'],
                        y=sender_data['count']
                    ))

                fig_sender_trend.update_layout(
                    title=f'üìä Top 5 ƒë∆°n v·ªã g·ª≠i theo {period_type.lower()}',
                    xaxis_title=x_title,
                    yaxis_title="S·ªë l∆∞·ª£ng vƒÉn b·∫£n",
                    barmode='stack'
                )
                st.plotly_chart(fig_sender_trend, use_container_width=True)
            else:
                st.info(f"Kh√¥ng c√≥ d·ªØ li·ªáu ƒë∆°n v·ªã g·ª≠i theo {period_type.lower()}")
        except Exception as e:
            st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì ƒë∆°n v·ªã g·ª≠i: {str(e)}")
            st.info("Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ƒë∆°n v·ªã g·ª≠i ƒë∆°n gi·∫£n thay th·∫ø")

            # Fallback - bi·ªÉu ƒë·ªì ƒë∆°n gi·∫£n h∆°n
            if 'total_incoming_detail' in df.columns:
                simple_sender_data = df['total_incoming_detail'].apply(extract_sender_name).value_counts().head(5)
                fig_simple = px.bar(
                    x=simple_sender_data.index,
                    y=simple_sender_data.values,
                    title='üìä Top 5 ƒë∆°n v·ªã g·ª≠i (t·ªïng h·ª£p)',
                    labels={'x': 'ƒê∆°n v·ªã', 'y': 'S·ªë l∆∞·ª£ng vƒÉn b·∫£n'}
                )
                st.plotly_chart(fig_simple, use_container_width=True)

# T·∫°o tabs
tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
    "üè† T·ªïng quan", 
    "üì• VƒÉn b·∫£n ƒë·∫øn", 
    "üì§ VƒÉn b·∫£n ƒëi", 
    "üìã Qu·∫£n l√Ω c√¥ng vi·ªác", 
    "üìÖ Qu·∫£n l√Ω l·ªãch h·ªçp", 
    "üè¢ Qu·∫£n l√Ω ph√≤ng h·ªçp"
])

# Tab 1: T·ªïng quan
with tab1:
    st.markdown('<div class="tab-header">üìä T·ªïng quan Ph√≤ng H√†nh ch√≠nh</div>', unsafe_allow_html=True)
    
    def load_summary_data():
        """Load d·ªØ li·ªáu t·ªïng h·ª£p t·ª´ tonghop.json"""
        try:
            with open('tonghop.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                df = pd.DataFrame(data['data'])
                
                # T·∫°o c·ªôt datetime
                df['datetime'] = pd.to_datetime(df[['year', 'month', 'date']].rename(columns={'date': 'day'}))
                
                # Chu·∫©n h√≥a category names
                df['category_clean'] = df['category'].str.replace(' ', '_').str.lower()
                df['category_vi'] = df['category'].map({
                    'Van ban den': 'üì• VƒÉn b·∫£n ƒë·∫øn',
                    'Van ban phat hanh di': 'üì§ VƒÉn b·∫£n ƒëi', 
                    'Van ban phat hanh quyet dinh': 'üìú Quy·∫øt ƒë·ªãnh',
                    'Van ban phat hanhquy dinh': 'üìã Quy ƒë·ªãnh',
                    'Van ban phat hanhquy trinh': 'üìã Quy tr√¨nh',
                    'Van ban phat hanh hop dong': 'üìù H·ª£p ƒë·ªìng',
                    'Quan ly phong hop': 'üè¢ Ph√≤ng h·ªçp',
                    'Quan ly cong viec': 'üíº C√¥ng vi·ªác'
                }).fillna('üî∏ ' + df['category'])
                
                return df
        except Exception as e:
            st.error(f"L·ªói khi load d·ªØ li·ªáu t·ªïng h·ª£p: {e}")
            return None
    
    # Load d·ªØ li·ªáu
    df_summary = load_summary_data()
    
    if df_summary is not None:
        # √Åp d·ª•ng global filter
        df_summary = apply_global_filter(df_summary)
        
        # T√≠nh to√°n metrics t·ªïng quan
        categories_summary = df_summary.groupby('category_vi')['count'].sum().sort_values(ascending=False)
        total_items = df_summary['count'].sum()
        
        # Metrics t·ªïng quan
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            vb_den = categories_summary.get('üì• VƒÉn b·∫£n ƒë·∫øn', 0)
            st.metric("üì• VƒÉn b·∫£n ƒë·∫øn", vb_den)
        
        with col2:
            vb_di = categories_summary.get('üì§ VƒÉn b·∫£n ƒëi', 0)
            st.metric("üì§ VƒÉn b·∫£n ƒëi", vb_di)
        
        with col3:
            phong_hop = categories_summary.get('üè¢ Ph√≤ng h·ªçp', 0)
            st.metric("üè¢ Cu·ªôc h·ªçp", phong_hop)
        
        with col4:
            hop_dong = categories_summary.get('üìù H·ª£p ƒë·ªìng', 0)
            quyet_dinh = categories_summary.get('üìú Quy·∫øt ƒë·ªãnh', 0)
            st.metric("üìú Qƒê + Hƒê", hop_dong + quyet_dinh)
        
        st.markdown("---")
        
        # Bi·ªÉu ƒë·ªì t·ªïng quan
        col1, col2 = st.columns(2)
        
        with col1:
            # Bi·ªÉu ƒë·ªì xu h∆∞·ªõng theo th·ªùi gian
            daily_summary = df_summary.groupby(['datetime', 'category_vi'])['count'].sum().reset_index()
            
            fig_trend = px.line(daily_summary, x='datetime', y='count', color='category_vi',
                               title='üìà Xu h∆∞·ªõng ho·∫°t ƒë·ªông theo th·ªùi gian',
                               labels={'count': 'S·ªë l∆∞·ª£ng', 'datetime': 'Ng√†y', 'category_vi': 'Lo·∫°i ho·∫°t ƒë·ªông'})
            fig_trend.update_layout(height=400, hovermode='x unified')
            st.plotly_chart(fig_trend, use_container_width=True)
        
        with col2:
            # Bi·ªÉu ƒë·ªì ph√¢n b·ªë theo lo·∫°i ho·∫°t ƒë·ªông
            fig_pie = px.pie(values=categories_summary.values, names=categories_summary.index,
                           title='üìä Ph√¢n b·ªë theo lo·∫°i ho·∫°t ƒë·ªông',
                           hole=0.4)
            fig_pie.update_layout(height=400)
            st.plotly_chart(fig_pie, use_container_width=True)
        
        # Ph√¢n t√≠ch chi ti·∫øt
        st.markdown('<div class="section-header">üìà Ph√¢n t√≠ch chi ti·∫øt</div>', unsafe_allow_html=True)
        
        # Tabs con cho ph√¢n t√≠ch
        subtab1, subtab2, subtab3 = st.tabs(["üìÖ Theo th·ªùi gian", "üìä Theo lo·∫°i", "üìà Top ng√†y"])
        
        with subtab1:
            # Ph√¢n t√≠ch theo th√°ng li√™n t·ª•c
            df_summary['year_month'] = df_summary['year'].astype(str) + '-' + df_summary['month'].astype(str).str.zfill(2)
            df_summary['month_year_vi'] = df_summary['month'].astype(str) + '/' + df_summary['year'].astype(str)
            
            monthly_data = df_summary.groupby(['year_month', 'month_year_vi', 'category_vi'])['count'].sum().reset_index()
            
            fig_monthly = px.bar(monthly_data, x='month_year_vi', y='count', color='category_vi',
                               title='Ho·∫°t ƒë·ªông theo th·ªùi gian (th√°ng/nƒÉm)', barmode='group',
                               labels={'count': 'S·ªë l∆∞·ª£ng', 'month_year_vi': 'Th√°ng/NƒÉm', 'category_vi': 'Lo·∫°i'})
            fig_monthly.update_xaxes(tickangle=45)
            st.plotly_chart(fig_monthly, use_container_width=True)
            
            # B·∫£ng th·ªëng k√™ theo th√°ng li√™n t·ª•c
            monthly_stats = df_summary.groupby(['month_year_vi', 'category_vi'])['count'].sum().unstack(fill_value=0)
            monthly_stats = monthly_stats.sort_index(key=lambda x: pd.to_datetime(x, format='%m/%Y'))
            st.dataframe(monthly_stats, use_container_width=True)
        
        with subtab2:
            # Ph√¢n t√≠ch chi ti·∫øt theo t·ª´ng lo·∫°i
            for category in categories_summary.index[:4]:  # Top 4 categories
                category_data = df_summary[df_summary['category_vi'] == category]
                daily_trend = category_data.groupby('datetime')['count'].sum()
                
                st.markdown(f"#### {category}")
                col_a, col_b, col_c = st.columns([2, 1, 1])
                
                with col_a:
                    fig_cat = px.line(x=daily_trend.index, y=daily_trend.values,
                                     title=f'Xu h∆∞·ªõng {category}')
                    fig_cat.update_layout(height=300)
                    st.plotly_chart(fig_cat, use_container_width=True)
                
                with col_b:
                    st.metric("T·ªïng", f"{category_data['count'].sum():,}")
                
                with col_c:
                    st.metric("TB/ng√†y", f"{category_data['count'].mean():.1f}")
        
        with subtab3:
            # Top ng√†y c√≥ ho·∫°t ƒë·ªông cao nh·∫•t
            daily_total = df_summary.groupby('datetime')['count'].sum().sort_values(ascending=False)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("#### üèÜ Top 10 ng√†y ho·∫°t ƒë·ªông m·∫°nh nh·∫•t")
                for i, (date, count) in enumerate(daily_total.head(10).items(), 1):
                    day_detail = df_summary[df_summary['datetime'] == date].groupby('category_vi')['count'].sum()
                    detail_text = " | ".join([f"{cat}: {val}" for cat, val in day_detail.items()])
                    st.success(f"#{i}. {date.strftime('%d/%m/%Y')}: **{count}** ho·∫°t ƒë·ªông\n\n{detail_text}")
            
            with col2:
                st.markdown("#### üìä Ho·∫°t ƒë·ªông theo ng√†y trong tu·∫ßn")
                df_summary['weekday'] = df_summary['datetime'].dt.day_name()
                df_summary['weekday_vi'] = df_summary['weekday'].map({
                    'Monday': 'Th·ª© 2', 'Tuesday': 'Th·ª© 3', 'Wednesday': 'Th·ª© 4',
                    'Thursday': 'Th·ª© 5', 'Friday': 'Th·ª© 6', 'Saturday': 'Th·ª© 7', 'Sunday': 'CN'
                })
                
                weekday_stats = df_summary.groupby('weekday_vi')['count'].agg(['sum', 'mean']).round(2)
                weekday_stats.columns = ['T·ªïng', 'TB/ng√†y']
                
                fig_weekday = px.bar(x=weekday_stats.index, y=weekday_stats['T·ªïng'],
                                   title='T·ªïng ho·∫°t ƒë·ªông theo ng√†y trong tu·∫ßn')
                st.plotly_chart(fig_weekday, use_container_width=True)
                
                st.dataframe(weekday_stats, use_container_width=True)
    
    else:
        st.error("‚ùå Kh√¥ng th·ªÉ load d·ªØ li·ªáu t·ªïng h·ª£p t·ª´ file tonghop.json")
        st.info("üìÅ ƒê·∫£m b·∫£o file tonghop.json t·ªìn t·∫°i trong th∆∞ m·ª•c g·ªëc")

# Tab 2: VƒÉn b·∫£n ƒë·∫øn
with tab2:
    st.markdown('<div class="tab-header">üì• Qu·∫£n l√Ω VƒÉn b·∫£n ƒê·∫øn</div>', unsafe_allow_html=True)
    
    # Load d·ªØ li·ªáu t·ª´ file c√≥ s·∫µn
    def load_incoming_docs_data():
        """Load d·ªØ li·ªáu vƒÉn b·∫£n ƒë·∫øn t·ª´ file vbden.json"""
        try:
            with open('vbden.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                df = pd.DataFrame(data['data'] if isinstance(data, dict) and 'data' in data else data)

                # X·ª≠ l√Ω d·ªØ li·ªáu t∆∞∆°ng t·ª± nh∆∞ process_incoming_documents_data
                if 'datetime' not in df.columns:
                    if all(col in df.columns for col in ['year', 'month', 'date']):
                        df['datetime'] = pd.to_datetime(df[['year', 'month', 'date']].rename(columns={'date': 'day'}))
                    elif all(col in df.columns for col in ['Year', 'Month', 'Date']):
                        df['datetime'] = pd.to_datetime(df[['Year', 'Month', 'Date']].rename(columns={'Date': 'day'}))

                # Th√™m c√°c c·ªôt c·∫ßn thi·∫øt
                df['weekday'] = df['datetime'].dt.day_name()
                df['weekday_vi'] = df['weekday'].map({
                    'Monday': 'Th·ª© 2', 'Tuesday': 'Th·ª© 3', 'Wednesday': 'Th·ª© 4',
                    'Thursday': 'Th·ª© 5', 'Friday': 'Th·ª© 6', 'Saturday': 'Th·ª© 7', 'Sunday': 'Ch·ªß nh·∫≠t'
                })
                df['year'] = df['datetime'].dt.year
                df['month'] = df['datetime'].dt.month
                df['week'] = df['datetime'].dt.isocalendar().week

                return df
        except Exception as e:
            st.error(f"L·ªói khi load d·ªØ li·ªáu t·ª´ vbden.json: {e}")
            return None

    df = load_incoming_docs_data()

    if df is not None:
        # √Åp d·ª•ng filter to√†n c·ª•c
        df = apply_global_filter(df)
        # Th·ªëng k√™ t·ªïng quan
        st.markdown("### üìä Th·ªëng k√™ t·ªïng quan")

        # H√†ng 1: Th·ªëng k√™ ch√≠nh
        col1, col2, col3, col4, col5 = st.columns(5)

        with col1:
            total_docs = df['total_incoming'].sum()
            st.metric("üìë T·ªïng vƒÉn b·∫£n", f"{total_docs:,}")

        with col2:
            avg_daily = df['total_incoming'].mean()
            st.metric("üìà Trung b√¨nh/ng√†y", f"{avg_daily:.1f}")

        with col3:
            total_on_time = df['processed_on_time'].sum()
            st.metric("‚úÖ X·ª≠ l√Ω ƒë√∫ng h·∫°n", f"{total_on_time:,}")

        with col4:
            total_late = df['processed_late'].sum()
            st.metric("‚ö†Ô∏è X·ª≠ l√Ω tr·ªÖ h·∫°n", f"{total_late:,}")

        with col5:
            if total_docs > 0:
                on_time_rate = (total_on_time / total_docs) * 100
            else:
                on_time_rate = 0
            st.metric("üìä T·ª∑ l·ªá ƒë√∫ng h·∫°n", f"{on_time_rate:.1f}%")

        # H√†ng 2: Ph√¢n lo·∫°i ph·∫£n h·ªìi
        st.markdown("#### üìã Ph√¢n lo·∫°i theo y√™u c·∫ßu ph·∫£n h·ªìi")
        col1, col2, col3, col4, col5 = st.columns(5)

        with col1:
            no_response = df['no_response_required'].sum()
            st.metric("üîï Kh√¥ng c·∫ßn ph·∫£n h·ªìi", f"{no_response:,}")

        with col2:
            need_response = df['response_required'].sum()
            st.metric("üì¢ C·∫ßn ph·∫£n h·ªìi", f"{need_response:,}")

        with col3:
            vanban_response = df['response_required_VanBan'].sum()
            st.metric("üìÑ PH VƒÉn b·∫£n", f"{vanban_response:,}")

        with col4:
            email_response = df['response_required_Email'].sum()
            st.metric("üìß PH Email", f"{email_response:,}")

        with col5:
            phone_response = df['response_required_DienThoai'].sum()
            st.metric("üìû PH ƒêi·ªán tho·∫°i", f"{phone_response:,}")

        st.markdown("---")

        # Pivot Table
        selected_period_type = create_pivot_table(df)

        st.markdown("---")

        # Bi·ªÉu ƒë·ªì
        create_incoming_docs_charts(df, selected_period_type)

        # B·∫£ng d·ªØ li·ªáu chi ti·∫øt
        st.markdown("### üìã Chi ti·∫øt d·ªØ li·ªáu")
            
        # L·ªçc d·ªØ li·ªáu
        col1, col2 = st.columns(2)
        with col1:
                date_range = st.date_input(
                    "üìÖ Ch·ªçn kho·∫£ng th·ªùi gian",
                    value=(df['datetime'].min(), df['datetime'].max()),
                    min_value=df['datetime'].min(),
                    max_value=df['datetime'].max()
                )
            
        with col2:
                min_docs = st.number_input("üìä S·ªë vƒÉn b·∫£n t·ªëi thi·ªÉu", min_value=0, value=0)
            
            # √Åp d·ª•ng filter
        if len(date_range) == 2:
                filtered_df = df[
                    (df['datetime'] >= pd.to_datetime(date_range[0])) & 
                    (df['datetime'] <= pd.to_datetime(date_range[1])) &
                    (df['total_incoming'] >= min_docs)
                ]
        else:
                filtered_df = df[df['total_incoming'] >= min_docs]
            
        display_cols = ['datetime', 'total_incoming', 'no_response_required', 'response_required',
                           'processed_on_time', 'processed_late']
            
            # Th√™m c√°c c·ªôt ph·∫£n h·ªìi n·∫øu c√≥
        response_cols = ['response_required_VanBan', 'response_required_Email', 
                           'response_required_DienThoai', 'response_required_PhanMem']
        for col in response_cols:
                if col in filtered_df.columns:
                    display_cols.append(col)
            
            # Th√™m c·ªôt detail n·∫øu c√≥
        if 'total_incoming_detail' in filtered_df.columns:
                display_cols.append('total_incoming_detail')
            
        st.dataframe(filtered_df[display_cols], use_container_width=True)
    else:
        st.info("üìÅ Vui l√≤ng upload file d·ªØ li·ªáu ƒë·ªÉ xem th·ªëng k√™ chi ti·∫øt")

# Tab 3: VƒÉn b·∫£n ƒëi
with tab3:
    st.markdown('<div class="tab-header">üì§ Qu·∫£n l√Ω VƒÉn b·∫£n ƒêi</div>', unsafe_allow_html=True)
    
    # Load d·ªØ li·ªáu t·ª´ file c√≥ s·∫µn
    def load_outgoing_docs_data():
        """Load d·ªØ li·ªáu vƒÉn b·∫£n ƒëi t·ª´ file vbdi.json"""
        try:
            with open('vbdi.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                df = pd.DataFrame(data['data'] if isinstance(data, dict) and 'data' in data else data)

                # Flatten nested structure ƒë·ªÉ t·∫°o c√°c c·ªôt _total
                for index, row in df.iterrows():
                    # Extract totals from nested objects
                    if 'contracts' in row and isinstance(row['contracts'], dict):
                        df.loc[index, 'contracts_total'] = row['contracts'].get('total', 0)
                    if 'decisions' in row and isinstance(row['decisions'], dict):
                        df.loc[index, 'decisions_total'] = row['decisions'].get('total', 0)
                    if 'regulations' in row and isinstance(row['regulations'], dict):
                        df.loc[index, 'regulations_total'] = row['regulations'].get('total', 0)
                    if 'rules' in row and isinstance(row['rules'], dict):
                        df.loc[index, 'rules_total'] = row['rules'].get('total', 0)
                    if 'procedures' in row and isinstance(row['procedures'], dict):
                        df.loc[index, 'procedures_total'] = row['procedures'].get('total', 0)
                    if 'instruct' in row and isinstance(row['instruct'], dict):
                        df.loc[index, 'instruct_total'] = row['instruct'].get('total', 0)

                # X·ª≠ l√Ω datetime
                if 'datetime' not in df.columns:
                    if all(col in df.columns for col in ['year', 'month', 'date']):
                        df['datetime'] = pd.to_datetime(df[['year', 'month', 'date']].rename(columns={'date': 'day'}))
                    elif all(col in df.columns for col in ['Year', 'Month', 'Date']):
                        df['datetime'] = pd.to_datetime(df[['Year', 'Month', 'Date']].rename(columns={'Date': 'day'}))

                # Th√™m c√°c c·ªôt c·∫ßn thi·∫øt
                df['weekday'] = df['datetime'].dt.day_name()
                df['weekday_vi'] = df['weekday'].map({
                    'Monday': 'Th·ª© 2', 'Tuesday': 'Th·ª© 3', 'Wednesday': 'Th·ª© 4',
                    'Thursday': 'Th·ª© 5', 'Friday': 'Th·ª© 6', 'Saturday': 'Th·ª© 7', 'Sunday': 'Ch·ªß nh·∫≠t'
                })
                df['year'] = df['datetime'].dt.year
                df['month'] = df['datetime'].dt.month
                df['week'] = df['datetime'].dt.isocalendar().week

                # T√≠nh total_outgoing (t·ªïng c√°c lo·∫°i vƒÉn b·∫£n bao g·ªìm c·∫£ documents)
                total_columns = ['documents', 'contracts_total', 'decisions_total', 'regulations_total',
                               'rules_total', 'procedures_total', 'instruct_total']
                for col in total_columns:
                    if col not in df.columns:
                        df[col] = 0

                df['total_outgoing'] = df[total_columns].sum(axis=1)

                return df
        except Exception as e:
            st.error(f"L·ªói khi load d·ªØ li·ªáu t·ª´ vbdi.json: {e}")
            return None

    df_out = load_outgoing_docs_data()

    if df_out is not None:
            # √Åp d·ª•ng filter to√†n c·ª•c
            df_out = apply_global_filter(df_out)
            # Th·ªëng k√™ t·ªïng quan
            st.markdown("### üìä Th·ªëng k√™ t·ªïng quan vƒÉn b·∫£n ƒëi")
            
            # H√†ng 1: Th·ªëng k√™ ch√≠nh
            col1, col2, col3, col4, col5 = st.columns(5)
            
            with col1:
                # T√≠nh t·ªïng t·∫•t c·∫£ c√°c lo·∫°i vƒÉn b·∫£n ƒëi (bao g·ªìm c·∫£ documents)
                total_docs = df_out['documents'].sum() if 'documents' in df_out.columns else 0
                total_contracts = df_out['contracts_total'].sum() if 'contracts_total' in df_out.columns else 0
                total_decisions = df_out['decisions_total'].sum() if 'decisions_total' in df_out.columns else 0
                total_regulations = df_out['regulations_total'].sum() if 'regulations_total' in df_out.columns else 0
                total_rules = df_out['rules_total'].sum() if 'rules_total' in df_out.columns else 0
                total_procedures = df_out['procedures_total'].sum() if 'procedures_total' in df_out.columns else 0
                total_instruct = df_out['instruct_total'].sum() if 'instruct_total' in df_out.columns else 0

                total_outgoing = total_docs + total_contracts + total_decisions + total_regulations + total_rules + total_procedures + total_instruct
                st.metric("üìÑ T·ªïng vƒÉn b·∫£n ƒëi", total_outgoing)

            with col2:
                st.metric("üìù VƒÉn b·∫£n ph√°t h√†nh", total_docs)

            with col3:
                st.metric("üìÅ H·ª£p ƒë·ªìng", total_contracts)

            with col4:
                st.metric("‚öñÔ∏è Quy·∫øt ƒë·ªãnh", total_decisions)
            
            with col5:
                # T√≠nh trung b√¨nh d·ª±a tr√™n t·ªïng vƒÉn b·∫£n th·ª±c t·∫ø
                if len(df_out) > 0:
                    avg_daily = total_outgoing / len(df_out)
                    st.metric("üìà TB/ng√†y", f"{avg_daily:.1f}")
                else:
                    st.metric("üìà TB/ng√†y", "0")

            # H√†ng 2: Th·ªëng k√™ quy ch·∫ø v√† quy ƒë·ªãnh
            st.markdown("#### üìã Th·ªëng k√™ quy ch·∫ø v√† quy ƒë·ªãnh")
            col1, col2, col3, col4 = st.columns(4)

            with col1:
                st.metric("üìú Quy ƒë·ªãnh", total_regulations)

            with col2:
                st.metric("üìã Quy ch·∫ø", total_rules)

            with col3:
                st.metric("üîÑ Th·ªß t·ª•c", total_procedures)

            with col4:
                st.metric("üìö H∆∞·ªõng d·∫´n", total_instruct)
            
            st.markdown("---")
            
            # Pivot Table
            selected_period_type_out = create_outgoing_pivot_table(df_out)

            st.markdown("---")

            # Bi·ªÉu ƒë·ªì
            create_outgoing_docs_charts(df_out, selected_period_type_out)
            
            # B·∫£ng d·ªØ li·ªáu chi ti·∫øt
            st.markdown("### üìã Chi ti·∫øt d·ªØ li·ªáu")

            # L·ªçc d·ªØ li·ªáu
            col1, col2 = st.columns(2)
            with col1:
                date_range_out = st.date_input(
                    "üìÖ Ch·ªçn kho·∫£ng th·ªùi gian",
                    value=(df_out['datetime'].min(), df_out['datetime'].max()),
                    min_value=df_out['datetime'].min(),
                    max_value=df_out['datetime'].max(),
                    key="outgoing_date_range"
                )

            with col2:
                min_docs_out = st.number_input("üìä S·ªë vƒÉn b·∫£n t·ªëi thi·ªÉu", min_value=0, value=0, key="outgoing_min_docs")

            # √Åp d·ª•ng filter
            if len(date_range_out) == 2:
                filtered_df_out = df_out[
                    (df_out['datetime'] >= pd.to_datetime(date_range_out[0])) &
                    (df_out['datetime'] <= pd.to_datetime(date_range_out[1])) &
                    (df_out['documents'] >= min_docs_out)
                ]
            else:
                filtered_df_out = df_out[df_out['documents'] >= min_docs_out]
            display_cols_out = ['datetime', 'total_outgoing', 'documents', 'contracts_total', 'decisions_total',
                               'regulations_total', 'rules_total', 'procedures_total', 'instruct_total']
            # Ch·ªâ hi·ªÉn th·ªã c√°c c·ªôt c√≥ trong DataFrame
            display_cols_out = [col for col in display_cols_out if col in filtered_df_out.columns]

            # Th√™m c·ªôt contracts, decisions detail n·∫øu c√≥
            detail_cols = ['contracts', 'decisions']
            for col in detail_cols:
                if col in filtered_df_out.columns:
                    display_cols_out.append(col)

            st.dataframe(filtered_df_out[display_cols_out], use_container_width=True)
    else:
        st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ vbdi.json")

# Tab 4: Qu·∫£n l√Ω c√¥ng vi·ªác
with tab4:
    st.markdown('<div class="tab-header">üìã Qu·∫£n l√Ω C√¥ng Vi·ªác</div>', unsafe_allow_html=True)
    
    # Load d·ªØ li·ªáu t·ª´ file c√≥ s·∫µn
    def load_task_data():
        """Load d·ªØ li·ªáu c√¥ng vi·ªác t·ª´ file cviec.json"""
        try:
            with open('cviec.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                df = pd.DataFrame(data['data'] if isinstance(data, dict) and 'data' in data else data)

                # Flatten nested structure t·ª´ all_departments
                for index, row in df.iterrows():
                    if 'all_departments' in row and isinstance(row['all_departments'], dict):
                        all_dept = row['all_departments']
                        df.loc[index, 'tasks_assigned'] = all_dept.get('tasks_assigned', 0)
                        df.loc[index, 'tasks_completed_on_time'] = all_dept.get('tasks_completed_on_time', 0)
                        df.loc[index, 'tasks_completed_on_time_rate'] = all_dept.get('tasks_completed_on_time_rate', 0)
                        df.loc[index, 'tasks_new'] = all_dept.get('tasks_new', 0)
                        df.loc[index, 'tasks_new_rate'] = all_dept.get('tasks_new_rate', 0)
                        df.loc[index, 'tasks_processing'] = all_dept.get('tasks_processing', 0)
                        df.loc[index, 'tasks_processing_rate'] = all_dept.get('tasks_processing_rate', 0)

                # X·ª≠ l√Ω datetime
                if 'datetime' not in df.columns:
                    if all(col in df.columns for col in ['year', 'month', 'date']):
                        df['datetime'] = pd.to_datetime(df[['year', 'month', 'date']].rename(columns={'date': 'day'}))
                    elif all(col in df.columns for col in ['Year', 'Month', 'Date']):
                        df['datetime'] = pd.to_datetime(df[['Year', 'Month', 'Date']].rename(columns={'Date': 'day'}))

                # Th√™m c√°c c·ªôt c·∫ßn thi·∫øt
                df['weekday'] = df['datetime'].dt.day_name()
                df['weekday_vi'] = df['weekday'].map({
                    'Monday': 'Th·ª© 2', 'Tuesday': 'Th·ª© 3', 'Wednesday': 'Th·ª© 4',
                    'Thursday': 'Th·ª© 5', 'Friday': 'Th·ª© 6', 'Saturday': 'Th·ª© 7', 'Sunday': 'Ch·ªß nh·∫≠t'
                })
                df['year'] = df['datetime'].dt.year
                df['month'] = df['datetime'].dt.month
                df['week'] = df['datetime'].dt.isocalendar().week

                # ƒê·∫£m b·∫£o c√°c c·ªôt task t·ªìn t·∫°i v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
                task_columns = ['tasks_assigned', 'tasks_completed_on_time', 'tasks_completed_on_time_rate',
                               'tasks_new', 'tasks_new_rate', 'tasks_processing', 'tasks_processing_rate']
                for col in task_columns:
                    if col not in df.columns:
                        df[col] = 0

                # T√≠nh completion_rate cho m·ªói h√†ng
                df['completion_rate'] = df.apply(lambda row:
                    (row['tasks_completed_on_time'] / row['tasks_assigned'] * 100)
                    if row['tasks_assigned'] > 0 else 0, axis=1)

                # T·∫°o DataFrame ri√™ng cho detail_departments
                detail_rows = []
                for index, row in df.iterrows():
                    if 'detail_departments' in row and isinstance(row['detail_departments'], list):
                        for dept in row['detail_departments']:
                            if isinstance(dept, dict):
                                detail_row = {
                                    'Date': row.get('Date', row.get('date', '')),
                                    'Month': row.get('Month', row.get('month', '')),
                                    'Year': row.get('Year', row.get('year', '')),
                                    'datetime': row.get('datetime', ''),
                                    'weekday': row.get('weekday', ''),
                                    'weekday_vi': row.get('weekday_vi', ''),
                                    'year': row.get('year', ''),
                                    'month': row.get('month', ''),
                                    'week': row.get('week', ''),
                                    'department': dept.get('Name', ''),
                                    'tasks_assigned': dept.get('tasks_assigned', 0),
                                    'tasks_completed_on_time': dept.get('tasks_completed_on_time', 0),
                                    'tasks_completed_on_time_rate': dept.get('tasks_completed_on_time_rate', 0),
                                    'tasks_new': dept.get('tasks_new', 0),
                                    'tasks_new_rate': dept.get('tasks_new_rate', 0),
                                    'tasks_processing': dept.get('tasks_processing', 0),
                                    'tasks_processing_rate': dept.get('tasks_processing_rate', 0)
                                }
                                detail_rows.append(detail_row)

                if detail_rows:
                    df_detail = pd.DataFrame(detail_rows)
                    # T√≠nh completion_rate cho detail
                    df_detail['completion_rate'] = df_detail.apply(lambda row:
                        (row['tasks_completed_on_time'] / row['tasks_assigned'] * 100)
                        if row['tasks_assigned'] > 0 else 0, axis=1)
                else:
                    df_detail = pd.DataFrame()

                return df, df_detail
        except Exception as e:
            st.error(f"L·ªói khi load d·ªØ li·ªáu t·ª´ cviec.json: {e}")
            return None, None

    df_all_tasks, df_detail_tasks = load_task_data()

    if df_all_tasks is not None and df_detail_tasks is not None:
            # √Åp d·ª•ng filter to√†n c·ª•c
            df_all_tasks_filtered = apply_global_filter(df_all_tasks)
            df_detail_tasks_filtered = apply_global_filter(df_detail_tasks)
            # Th·ªëng k√™ t·ªïng quan
            st.markdown("### üìä Th·ªëng k√™ t·ªïng quan c√¥ng vi·ªác")
            
            # H√†ng 1: Th·ªëng k√™ ch√≠nh
            col1, col2, col3, col4, col5 = st.columns(5)
            
            with col1:
                total_assigned = df_all_tasks_filtered['tasks_assigned'].sum()
                st.metric("üìã T·ªïng giao vi·ªác", total_assigned)
            
            with col2:
                total_completed = df_all_tasks_filtered['tasks_completed_on_time'].sum()
                st.metric("‚úÖ Ho√†n th√†nh", total_completed)
            
            with col3:
                total_processing = df_all_tasks_filtered['tasks_processing'].sum()
                st.metric("üîÑ ƒêang x·ª≠ l√Ω", total_processing)
            
            with col4:
                total_new = df_all_tasks_filtered['tasks_new'].sum()
                st.metric("üÜï Vi·ªác m·ªõi", total_new)
            
            with col5:
                # T√≠nh t·ª∑ l·ªá ho√†n th√†nh: (completed / assigned) * 100
                total_assigned_all = df_all_tasks_filtered['tasks_assigned'].sum()
                total_completed_all = df_all_tasks_filtered['tasks_completed_on_time'].sum()
                if total_assigned_all > 0:
                    avg_completion = (total_completed_all / total_assigned_all) * 100
                    st.metric("üìä T·ª∑ l·ªá ho√†n th√†nh", f"{avg_completion:.1f}%")
                else:
                    st.metric("üìä T·ª∑ l·ªá ho√†n th√†nh", "0%")
            
            # H√†ng 2: Th·ªëng k√™ ph√≤ng ban
            st.markdown("#### üìã Th·ªëng k√™ theo ph√≤ng ban")
            if len(df_detail_tasks_filtered) > 0:
                dept_summary = df_detail_tasks_filtered.groupby('department').agg({
                    'tasks_assigned': 'sum',
                    'tasks_completed_on_time': 'sum',
                    'tasks_processing': 'sum',
                    'tasks_new': 'sum'
                }).reset_index()
                dept_summary['completion_rate'] = (dept_summary['tasks_completed_on_time'] / dept_summary['tasks_assigned'] * 100).fillna(0)
                
                # Top 3 ph√≤ng ban theo t·ªïng s·ªë c√¥ng vi·ªác ƒë∆∞·ª£c giao
                top_depts = dept_summary.nlargest(3, 'tasks_assigned')

                col1, col2, col3 = st.columns(3)
                for i, (idx, dept) in enumerate(top_depts.iterrows()):
                    with [col1, col2, col3][i]:
                        completion_rate = (dept['tasks_completed_on_time'] / dept['tasks_assigned'] * 100) if dept['tasks_assigned'] > 0 else 0
                        st.metric(f"üèÜ {dept['department']}",
                                f"{dept['tasks_completed_on_time']}/{dept['tasks_assigned']} vi·ªác",
                                f"T·ª∑ l·ªá: {completion_rate:.1f}%")
            
            st.markdown("---")
            
            # Pivot Table
            selected_period_type_tasks = create_task_pivot_table(df_all_tasks_filtered, df_detail_tasks_filtered)

            st.markdown("---")

            # Bi·ªÉu ƒë·ªì
            create_task_management_charts(df_all_tasks_filtered, df_detail_tasks_filtered, selected_period_type_tasks)
            
            # B·∫£ng d·ªØ li·ªáu chi ti·∫øt
            st.markdown("### üìã Chi ti·∫øt d·ªØ li·ªáu")
            
            # Ch·ªçn lo·∫°i d·ªØ li·ªáu hi·ªÉn th·ªã
            detail_type = st.selectbox(
                "üìä Hi·ªÉn th·ªã d·ªØ li·ªáu:",
                options=['T·ªïng h·ª£p t·∫•t c·∫£ ph√≤ng ban', 'Chi ti·∫øt t·ª´ng ph√≤ng ban'],
                key="task_detail_type"
            )
            
            # Ch·ªçn DataFrame ƒë√£ ƒë∆∞·ª£c filter to√†n c·ª•c
            display_df = df_all_tasks_filtered if detail_type == 'T·ªïng h·ª£p t·∫•t c·∫£ ph√≤ng ban' else df_detail_tasks_filtered
            
            # L·ªçc th√™m theo s·ªë vi·ªác t·ªëi thi·ªÉu
            min_tasks = st.number_input("üìä S·ªë vi·ªác t·ªëi thi·ªÉu", min_value=0, value=0, key="tasks_min")
            filtered_df_tasks = display_df[display_df['tasks_assigned'] >= min_tasks]
            
            # C√°c c·ªôt hi·ªÉn th·ªã
            display_cols_tasks = ['datetime', 'tasks_assigned', 'tasks_completed_on_time', 
                                 'tasks_processing', 'tasks_new', 'completion_rate']
            
            if detail_type == 'Chi ti·∫øt t·ª´ng ph√≤ng ban':
                display_cols_tasks.insert(1, 'department')
            
            # Format completion_rate
            filtered_df_display = filtered_df_tasks[display_cols_tasks].copy()
            filtered_df_display['completion_rate'] = filtered_df_display['completion_rate'].round(1)
            
            st.dataframe(
                filtered_df_display.rename(columns={
                    'datetime': 'Ng√†y',
                    'department': 'Ph√≤ng ban',
                    'tasks_assigned': 'Giao vi·ªác',
                    'tasks_completed_on_time': 'Ho√†n th√†nh',
                    'tasks_processing': 'ƒêang x·ª≠ l√Ω',
                    'tasks_new': 'Vi·ªác m·ªõi',
                    'completion_rate': 'T·ª∑ l·ªá ho√†n th√†nh (%)'
                }), 
                use_container_width=True
            )
    else:
        st.info("üìÅ Vui l√≤ng upload file d·ªØ li·ªáu ƒë·ªÉ xem th·ªëng k√™ chi ti·∫øt")

# Tab 5: Qu·∫£n l√Ω l·ªãch h·ªçp
with tab5:
    st.markdown('<div class="tab-header">üìÖ Qu·∫£n l√Ω L·ªãch H·ªçp</div>', unsafe_allow_html=True)
    
    # Load d·ªØ li·ªáu t·ª´ file c√≥ s·∫µn
    def load_meeting_data():
        """Load d·ªØ li·ªáu l·ªãch h·ªçp t·ª´ file lhop.json"""
        try:
            with open('lhop.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                df = pd.DataFrame(data['data'] if isinstance(data, dict) and 'data' in data else data)

                # X·ª≠ l√Ω d·ªØ li·ªáu t∆∞∆°ng t·ª± nh∆∞ process_meeting_data
                if 'datetime' not in df.columns:
                    if all(col in df.columns for col in ['year', 'month', 'date']):
                        df['datetime'] = pd.to_datetime(df[['year', 'month', 'date']].rename(columns={'date': 'day'}))
                    elif all(col in df.columns for col in ['Year', 'Month', 'Date']):
                        df['datetime'] = pd.to_datetime(df[['Year', 'Month', 'Date']].rename(columns={'Date': 'day'}))

                # Th√™m c√°c c·ªôt c·∫ßn thi·∫øt
                df['weekday'] = df['datetime'].dt.day_name()
                df['weekday_vi'] = df['weekday'].map({
                    'Monday': 'Th·ª© 2', 'Tuesday': 'Th·ª© 3', 'Wednesday': 'Th·ª© 4',
                    'Thursday': 'Th·ª© 5', 'Friday': 'Th·ª© 6', 'Saturday': 'Th·ª© 7', 'Sunday': 'Ch·ªß nh·∫≠t'
                })
                df['year'] = df['datetime'].dt.year
                df['month'] = df['datetime'].dt.month
                df['week'] = df['datetime'].dt.isocalendar().week

                # Th√™m c·ªôt day_type d·ª±a tr√™n weekday
                df['day_type'] = df['weekday'].map({
                    'Monday': 'Ng√†y l√†m vi·ªác', 'Tuesday': 'Ng√†y l√†m vi·ªác', 'Wednesday': 'Ng√†y l√†m vi·ªác',
                    'Thursday': 'Ng√†y l√†m vi·ªác', 'Friday': 'Ng√†y l√†m vi·ªác',
                    'Saturday': 'Cu·ªëi tu·∫ßn', 'Sunday': 'Cu·ªëi tu·∫ßn'
                })

                # ƒê·∫£m b·∫£o c·ªôt meeting_schedules t·ªìn t·∫°i
                if 'meeting_schedules' not in df.columns:
                    df['meeting_schedules'] = 0

                # Th√™m c·ªôt meeting_level d·ª±a tr√™n s·ªë l∆∞·ª£ng meeting_schedules
                def categorize_meeting_level(count):
                    if count == 0:
                        return 'Kh√¥ng c√≥ h·ªçp'
                    elif count <= 2:
                        return '√çt h·ªçp'
                    elif count <= 5:
                        return 'Trung b√¨nh'
                    else:
                        return 'Nhi·ªÅu h·ªçp'

                df['meeting_level'] = df['meeting_schedules'].apply(categorize_meeting_level)

                return df
        except Exception as e:
            st.error(f"L·ªói khi load d·ªØ li·ªáu t·ª´ lhop.json: {e}")
            return None

    df_meetings = load_meeting_data()

    if df_meetings is not None:
            # √Åp d·ª•ng filter to√†n c·ª•c
            df_meetings = apply_global_filter(df_meetings)
            
            # Th·ªëng k√™ t·ªïng quan
            st.markdown("### üìä Th·ªëng k√™ t·ªïng quan l·ªãch h·ªçp")
            
            col1, col2, col3, col4, col5 = st.columns(5)
            
            with col1:
                total_meetings = df_meetings['meeting_schedules'].sum()
                st.metric("üìÖ T·ªïng cu·ªôc h·ªçp", f"{total_meetings:,}")
            
            with col2:
                avg_daily = df_meetings['meeting_schedules'].mean()
                st.metric("üìà TB/ng√†y", f"{avg_daily:.1f}")
            
            with col3:
                max_day = df_meetings['meeting_schedules'].max()
                st.metric("üî• Nhi·ªÅu nh·∫•t", f"{max_day} cu·ªôc")
            
            with col4:
                min_day = df_meetings['meeting_schedules'].min()
                st.metric("üîª √çt nh·∫•t", f"{min_day} cu·ªôc")
            
            with col5:
                total_days = len(df_meetings)
                st.metric("üìÜ T·ªïng ng√†y", f"{total_days} ng√†y")
            
            # H√†ng 2: Th·ªëng k√™ theo lo·∫°i ng√†y
            st.markdown("#### üìã Ph√¢n t√≠ch theo lo·∫°i ng√†y")
            col1, col2, col3 = st.columns(3)
            
            workday_data = df_meetings[df_meetings['day_type'] == 'Ng√†y l√†m vi·ªác']
            weekend_data = df_meetings[df_meetings['day_type'] == 'Cu·ªëi tu·∫ßn']
            
            with col1:
                workday_total = workday_data['meeting_schedules'].sum()
                workday_count = len(workday_data)
                st.metric("üíº Ng√†y l√†m vi·ªác", f"{workday_total} cu·ªôc", f"{workday_count} ng√†y")
            
            with col2:
                weekend_total = weekend_data['meeting_schedules'].sum()
                weekend_count = len(weekend_data)
                st.metric("üè° Cu·ªëi tu·∫ßn", f"{weekend_total} cu·ªôc", f"{weekend_count} ng√†y")
            
            with col3:
                busy_days = len(df_meetings[df_meetings['meeting_schedules'] > 10])
                st.metric("üî• Ng√†y b·∫≠n r·ªôn", f"{busy_days} ng√†y", ">10 cu·ªôc")
            
            st.markdown("---")

            # Pivot Table
            selected_period_type_meetings = create_meeting_pivot_table(df_meetings)

            st.markdown("---")

            # Tab ƒë·ªãnh nghƒ©a m·ª©c ƒë·ªô b·∫≠n r·ªôn
            with st.expander("‚ÑπÔ∏è ƒê·ªãnh nghƒ©a m·ª©c ƒë·ªô b·∫≠n r·ªôn"):
                st.markdown("""
                #### üìä Ph√¢n lo·∫°i m·ª©c ƒë·ªô ho·∫°t ƒë·ªông l·ªãch h·ªçp:

                | M·ª©c ƒë·ªô | S·ªë cu·ªôc h·ªçp/ng√†y | M√¥ t·∫£ |
                |--------|------------------|-------|
                | üü¢ **R·∫•t √≠t** | 0-2 cu·ªôc | Ng√†y l√†m vi·ªác b√¨nh th∆∞·ªùng, √≠t ho·∫°t ƒë·ªông h·ªçp |
                | üîµ **√çt** | 3-5 cu·ªôc | Ng√†y c√≥ m·ªôt s·ªë cu·ªôc h·ªçp, m·ª©c ƒë·ªô v·ª´a ph·∫£i |
                | üü° **Trung b√¨nh** | 6-8 cu·ªôc | Ng√†y kh√° b·∫≠n r·ªôn v·ªõi nhi·ªÅu cu·ªôc h·ªçp |
                | üü† **Nhi·ªÅu** | 9-12 cu·ªôc | Ng√†y r·∫•t b·∫≠n v·ªõi m·∫≠t ƒë·ªô h·ªçp cao |
                | üî¥ **R·∫•t nhi·ªÅu** | >12 cu·ªôc | Ng√†y c·ª±c k·ª≥ b·∫≠n r·ªôn, li√™n t·ª•c c√°c cu·ªôc h·ªçp |

                ---
                #### üìà C√°c ch·ªâ s·ªë quan tr·ªçng:
                - **Ng√†y b·∫≠n r·ªôn**: Ng√†y c√≥ >5 cu·ªôc h·ªçp (t·ª´ m·ª©c Trung b√¨nh tr·ªü l√™n)
                - **T·ª∑ l·ªá ng√†y b·∫≠n**: % ng√†y trong k·ª≥ c√≥ >5 cu·ªôc h·ªçp
                - **Xu h∆∞·ªõng**: So s√°nh v·ªõi k·ª≥ tr∆∞·ªõc ƒë·ªÉ theo d√µi bi·∫øn ƒë·ªông
                """)

            # Bi·ªÉu ƒë·ªì
            create_meeting_charts(df_meetings, selected_period_type_meetings)
            
            st.markdown("---")
            
            # B·∫£ng d·ªØ li·ªáu chi ti·∫øt
            st.markdown("### üìã Chi ti·∫øt d·ªØ li·ªáu l·ªãch h·ªçp")
            
        # L·ªçc d·ªØ li·ªáu
    col1, col2 = st.columns(2)
    with col1:
                min_meetings = st.number_input("üìä S·ªë cu·ªôc h·ªçp t·ªëi thi·ªÉu", min_value=0, value=0, key="meetings_min")
    with col2:
                selected_level = st.selectbox(
                    "üìÖ M·ª©c ƒë·ªô b·∫≠n r·ªôn",
                    options=['T·∫•t c·∫£'] + list(df_meetings['meeting_level'].unique()),
                    key="meeting_level_filter"
                )
            
            # √Åp d·ª•ng filter
    filtered_meetings = df_meetings[df_meetings['meeting_schedules'] >= min_meetings]
    if selected_level != 'T·∫•t c·∫£':
                filtered_meetings = filtered_meetings[filtered_meetings['meeting_level'] == selected_level]
            
            # Hi·ªÉn th·ªã b·∫£ng
    display_cols_meetings = ['datetime', 'weekday_vi', 'meeting_schedules', 'meeting_level', 'day_type']
            
    st.dataframe(
                filtered_meetings[display_cols_meetings].rename(columns={
                    'datetime': 'Ng√†y',
                    'weekday_vi': 'Ng√†y trong tu·∫ßn', 
                    'meeting_schedules': 'S·ªë cu·ªôc h·ªçp',
                    'meeting_level': 'M·ª©c ƒë·ªô b·∫≠n r·ªôn',
                    'day_type': 'Lo·∫°i ng√†y'
                }),
                use_container_width=True
            )
            
            # Th·ªëng k√™ cu·ªëi
    st.markdown("**üìä Insights ch√≠nh:**")
    insights = []
            
    if len(df_meetings) > 0:
                busiest_day = df_meetings.loc[df_meetings['meeting_schedules'].idxmax()]
                insights.append(f"üî• Ng√†y b·∫≠n r·ªôn nh·∫•t: {busiest_day['datetime'].strftime('%d/%m/%Y')} ({busiest_day['weekday_vi']}) v·ªõi {busiest_day['meeting_schedules']} cu·ªôc h·ªçp")
                
                quietest_day = df_meetings.loc[df_meetings['meeting_schedules'].idxmin()]
                insights.append(f"üîª Ng√†y √≠t h·ªçp nh·∫•t: {quietest_day['datetime'].strftime('%d/%m/%Y')} ({quietest_day['weekday_vi']}) v·ªõi {quietest_day['meeting_schedules']} cu·ªôc h·ªçp")
                
                most_common_level = df_meetings['meeting_level'].mode()[0] if len(df_meetings['meeting_level'].mode()) > 0 else 'Kh√¥ng x√°c ƒë·ªãnh'
                insights.append(f"üìä M·ª©c ƒë·ªô ph·ªï bi·∫øn nh·∫•t: {most_common_level}")
                
                for insight in insights:
                    st.write(f"- {insight}")
    else:
        st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch h·ªçp")
        st.info("üìÅ Upload d·ªØ li·ªáu ƒë·ªÉ qu·∫£n l√Ω l·ªãch h·ªçp chi ti·∫øt")

# Tab 6: Qu·∫£n l√Ω ph√≤ng h·ªçp
with tab6:
    st.markdown('<div class="tab-header">üè¢ Qu·∫£n l√Ω Ph√≤ng H·ªçp</div>', unsafe_allow_html=True)
    
    def load_room_data_from_file():
        """Load d·ªØ li·ªáu ph√≤ng h·ªçp t·ª´ file c√≥ s·∫µn"""
        try:
            with open('phop.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                df = pd.DataFrame(data['data'])
                
                # T·∫°o c·ªôt datetime
                df['datetime'] = pd.to_datetime(df[['Year', 'Month', 'Date']].rename(columns={'Date': 'day'}))
                df['weekday'] = df['datetime'].dt.day_name()
                df['weekday_vi'] = df['weekday'].map({
                    'Monday': 'Th·ª© 2', 'Tuesday': 'Th·ª© 3', 'Wednesday': 'Th·ª© 4',
                    'Thursday': 'Th·ª© 5', 'Friday': 'Th·ª© 6', 'Saturday': 'Th·ª© 7', 'Sunday': 'Ch·ªß nh·∫≠t'
                })
                df['month_vi'] = df['Month'].map({
                    1: 'Th√°ng 1', 2: 'Th√°ng 2', 3: 'Th√°ng 3', 4: 'Th√°ng 4',
                    5: 'Th√°ng 5', 6: 'Th√°ng 6', 7: 'Th√°ng 7', 8: 'Th√°ng 8',
                    9: 'Th√°ng 9', 10: 'Th√°ng 10', 11: 'Th√°ng 11', 12: 'Th√°ng 12'
                })
                
                # T√≠nh to√°n c√°c ch·ªâ s·ªë
                df['cancel_rate'] = (df['register_room_cancel'] / df['register_room'] * 100).fillna(0).round(1)
                df['net_bookings'] = df['register_room'] - df['register_room_cancel']
                df['is_weekend'] = df['weekday'].isin(['Saturday', 'Sunday'])
                df['day_type'] = df['is_weekend'].map({False: 'Ng√†y l√†m vi·ªác', True: 'Cu·ªëi tu·∫ßn'})
                
                return df
        except Exception as e:
            st.error(f"L·ªói khi load d·ªØ li·ªáu: {e}")
            return None
    
    # Load d·ªØ li·ªáu t·ª´ file c√≥ s·∫µn
    df_rooms = load_room_data_from_file()
    if df_rooms is not None:
        df_rooms = apply_global_filter(df_rooms)
    
    if df_rooms is not None and not df_rooms.empty:
        # Metrics t·ªïng quan
        col1, col2, col3, col4 = st.columns(4)
        
        total_bookings = df_rooms['register_room'].sum()
        total_cancels = df_rooms['register_room_cancel'].sum()
        avg_daily = df_rooms['register_room'].mean()
        cancel_rate_avg = (total_cancels / total_bookings * 100) if total_bookings > 0 else 0
        
        with col1:
            st.metric("üìÖ T·ªïng ƒëƒÉng k√Ω", f"{total_bookings:,}")
        with col2:
            st.metric("‚ùå T·ªïng h·ªßy", f"{total_cancels:,}")
        with col3:
            st.metric("üìä TB/ng√†y", f"{avg_daily:.1f}")
        with col4:
            st.metric("üìâ T·ª∑ l·ªá h·ªßy", f"{cancel_rate_avg:.1f}%")

        st.markdown("---")

        # Pivot Table
        selected_period_type_rooms = create_room_pivot_table(df_rooms)

        st.markdown("---")

        # Bi·ªÉu ƒë·ªì
        create_room_charts(df_rooms, selected_period_type_rooms)

        st.markdown("---")

        # B·∫£ng d·ªØ li·ªáu chi ti·∫øt
        st.markdown("### üìã Chi ti·∫øt d·ªØ li·ªáu ph√≤ng h·ªçp")

        # L·ªçc d·ªØ li·ªáu
        col1, col2 = st.columns(2)
        with col1:
            min_bookings = st.number_input("üìä S·ªë ƒëƒÉng k√Ω t·ªëi thi·ªÉu", min_value=0, value=0, key="rooms_min")
        with col2:
            selected_day_type = st.selectbox(
                "üìÖ Lo·∫°i ng√†y",
                options=['T·∫•t c·∫£'] + list(df_rooms['day_type'].unique()),
                key="room_day_type_filter"
            )

        # √Åp d·ª•ng filter
        filtered_rooms = df_rooms[df_rooms['register_room'] >= min_bookings]
        if selected_day_type != 'T·∫•t c·∫£':
            filtered_rooms = filtered_rooms[filtered_rooms['day_type'] == selected_day_type]

        # Hi·ªÉn th·ªã b·∫£ng
        display_cols_rooms = ['datetime', 'weekday_vi', 'register_room', 'register_room_cancel', 'net_bookings', 'cancel_rate', 'day_type']

        st.dataframe(
            filtered_rooms[display_cols_rooms].rename(columns={
                'datetime': 'Ng√†y',
                'weekday_vi': 'Ng√†y trong tu·∫ßn',
                'register_room': 'T·ªïng ƒëƒÉng k√Ω',
                'register_room_cancel': 'T·ªïng h·ªßy',
                'net_bookings': 'ƒêƒÉng k√Ω th·ª±c',
                'cancel_rate': 'T·ª∑ l·ªá h·ªßy (%)',
                'day_type': 'Lo·∫°i ng√†y'
            }),
            use_container_width=True
        )
    else:
        st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ph√≤ng h·ªçp")
        st.info("üìÅ Upload d·ªØ li·ªáu ho·∫∑c ƒë·∫£m b·∫£o file meeting_rooms_data.json t·ªìn t·∫°i ƒë·ªÉ xem chi ti·∫øt")

# Footer
st.markdown("---")
st.markdown("### üîß H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
with st.expander("üí° Xem h∆∞·ªõng d·∫´n chi ti·∫øt"):
    st.markdown("""
    **C√°ch s·ª≠ d·ª•ng Dashboard:**
    
    1. **üìÅ Upload d·ªØ li·ªáu**: M·ªói tab c√≥ m·ª•c upload ri√™ng, h·ªó tr·ª£ file JSON v√† CSV
    2. **üìä Xem th·ªëng k√™**: Sau khi upload, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√≠nh to√°n v√† hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    3. **üîç L·ªçc d·ªØ li·ªáu**: S·ª≠ d·ª•ng c√°c b·ªô l·ªçc ƒë·ªÉ xem d·ªØ li·ªáu theo ƒëi·ªÅu ki·ªán c·ª• th·ªÉ
    4. **üìà Bi·ªÉu ƒë·ªì t∆∞∆°ng t√°c**: Click v√†o bi·ªÉu ƒë·ªì ƒë·ªÉ xem chi ti·∫øt
    
    **üìã C·∫•u tr√∫c d·ªØ li·ªáu:**
    - VƒÉn b·∫£n ƒë·∫øn: C·∫ßn c√≥ c√°c tr∆∞·ªùng date, month, year, total_incoming, processed_on_time, processed_late
    - C√°c module kh√°c s·∫Ω c√≥ c·∫•u tr√∫c t∆∞∆°ng t·ª± t√πy theo y√™u c·∫ßu nghi·ªáp v·ª•
    """)

st.markdown("""
<div style='text-align: center; padding: 2rem; color: #7f8c8d;'>
    <p>üìä Dashboard Ph√≤ng H√†nh ch√≠nh - Phi√™n b·∫£n 1.0</p>
    <p>üîÑ D·ªØ li·ªáu c·∫≠p nh·∫≠t t·ª´ GitHub Repository</p>
</div>
""", unsafe_allow_html=True)
