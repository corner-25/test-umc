import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import json
from datetime import datetime, timedelta
import os, base64
import requests
from io import BytesIO, StringIO
from api_handler import show_quick_sync_button

# T·∫Øt FutureWarning
pd.set_option('future.no_silent_downcasting', True)

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Dashboard Ph√≤ng H√†nh ch√≠nh",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
.main-header {
    font-size: 2.5rem;
    font-weight: bold;
    color: #1f77b4;
    text-align: center;
    margin-bottom: 2rem;
}
.metric-container {
    background-color: #f0f2f6;
    padding: 1rem;
    border-radius: 10px;
    border-left: 4px solid #1f77b4;
}
.tab-header {
    font-size: 1.8rem;
    font-weight: bold;
    color: #2c3e50;
    margin-bottom: 1rem;
}

/* Centered header container and text */
.header-container {
    text-align: center;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    margin-bottom: 2rem;
}

.header-text {
    font-size: 3.2rem;
    font-weight: bold;
    color: #1f77b4;
    text-align: center;
    margin-top: 0.5rem;
}
</style>
""", unsafe_allow_html=True)

# ===== GITHUB MANAGER CLASS =====
class GitHubDataManager:
    def __init__(self):
        try:
            self.github_token = st.secrets.get("github_token", "")
            self.github_owner = st.secrets.get("github_owner", "")
            self.github_repo = st.secrets.get("github_repo", "")
        except Exception:
            # N·∫øu kh√¥ng c√≥ secrets, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
            self.github_token = ""
            self.github_owner = ""
            self.github_repo = ""

    def check_github_connection(self):
        """Ki·ªÉm tra k·∫øt n·ªëi GitHub"""
        if not all([self.github_token, self.github_owner, self.github_repo]):
            return False, "‚ùå Ch∆∞a c·∫•u h√¨nh GitHub credentials"

        try:
            headers = {"Authorization": f"token {self.github_token}"}
            url = f"https://api.github.com/repos/{self.github_owner}/{self.github_repo}"
            response = requests.get(url, headers=headers)

            if response.status_code == 200:
                return True, "‚úÖ K·∫øt n·ªëi GitHub th√†nh c√¥ng"
            else:
                return False, f"‚ùå L·ªói k·∫øt n·ªëi GitHub: {response.status_code}"
        except Exception as e:
            return False, f"‚ùå L·ªói k·∫øt n·ªëi: {str(e)}"

    def load_current_data(self):
        """T·∫£i d·ªØ li·ªáu hi·ªán t·∫°i t·ª´ GitHub"""
        try:
            headers = {"Authorization": f"token {self.github_token}"}

            # T·∫£i file current_dashboard_data.json
            file_url = f"https://api.github.com/repos/{self.github_owner}/{self.github_repo}/contents/current_dashboard_data.json"
            response = requests.get(file_url, headers=headers)

            if response.status_code == 200:
                file_info = response.json()
                download_url = file_info['download_url']

                # T·∫£i v√† ƒë·ªçc file JSON
                file_response = requests.get(download_url)
                if file_response.status_code == 200:
                    json_data = file_response.json()

                    # Chuy·ªÉn JSON th√†nh DataFrame
                    if isinstance(json_data, dict) and 'data' in json_data:
                        df = pd.DataFrame(json_data['data'])
                    elif isinstance(json_data, list):
                        df = pd.DataFrame(json_data)
                    else:
                        df = pd.DataFrame(json_data)

                    metadata = {
                        'filename': 'current_dashboard_data.json',
                        'source': 'GitHub',
                        'sha': file_info['sha'],
                        'last_modified': file_info.get('last_modified', 'N/A'),
                        'size': file_info['size']
                    }

                    return df, metadata
            else:
                return None, None

        except Exception as e:
            st.error(f"L·ªói t·∫£i d·ªØ li·ªáu t·ª´ GitHub: {str(e)}")
            return None, None

# ===== DATA MANAGER CLASS =====
class DataManager:
    def __init__(self):
        self.data = None
        self.metadata = None

    def load_data_from_file(self, file):
        """Load d·ªØ li·ªáu t·ª´ file upload"""
        try:
            if file.name.endswith('.csv'):
                df = pd.read_csv(file)
            elif file.name.endswith('.json'):
                df = pd.read_json(file)
            elif file.name.endswith(('.xlsx', '.xls')):
                # ƒê·ªçc Excel, n·∫øu c√≥ nhi·ªÅu sheet th√¨ l·∫•y sheet ƒë·∫ßu ti√™n
                try:
                    df = pd.read_excel(file, sheet_name=0)
                except Exception as e:
                    # N·∫øu l·ªói, th·ª≠ ƒë·ªçc v·ªõi engine kh√°c
                    df = pd.read_excel(file, engine='openpyxl' if file.name.endswith('.xlsx') else 'xlrd')
            else:
                return False, "‚ùå Format file kh√¥ng h·ªó tr·ª£. Ch·ªâ h·ªó tr·ª£ CSV, JSON, Excel (.xlsx, .xls)"

            # Validate d·ªØ li·ªáu
            required_columns = ['Tu·∫ßn', 'Th√°ng', 'N·ªôi dung']
            if not all(col in df.columns for col in required_columns):
                return False, f"‚ùå Thi·∫øu c·ªôt b·∫Øt bu·ªôc: {required_columns}"

            self.data = df
            self.metadata = {
                'filename': file.name,
                'file_type': file.name.split('.')[-1].upper(),
                'rows': len(df),
                'columns': list(df.columns),
                'categories': df['Danh m·ª•c'].unique().tolist() if 'Danh m·ª•c' in df.columns else [],
                'upload_time': pd.Timestamp.now()
            }

            return True, "‚úÖ T·∫£i d·ªØ li·ªáu th√†nh c√¥ng"

        except Exception as e:
            return False, f"‚ùå L·ªói ƒë·ªçc file: {str(e)}"

    def load_data_from_github(self, github_df, github_metadata):
        """Load d·ªØ li·ªáu t·ª´ GitHub"""
        try:
            # Validate d·ªØ li·ªáu
            required_columns = ['Tu·∫ßn', 'Th√°ng', 'N·ªôi dung']
            if not all(col in github_df.columns for col in required_columns):
                return False, f"‚ùå Thi·∫øu c·ªôt b·∫Øt bu·ªôc: {required_columns}"

            self.data = github_df
            self.metadata = {
                'filename': github_metadata['filename'],
                'file_type': 'GitHub',
                'rows': len(github_df),
                'columns': list(github_df.columns),
                'categories': github_df['Danh m·ª•c'].unique().tolist() if 'Danh m·ª•c' in github_df.columns else [],
                'source': github_metadata['source'],
                'sha': github_metadata['sha'],
                'upload_time': pd.Timestamp.now()
            }

            return True, "‚úÖ T·∫£i d·ªØ li·ªáu t·ª´ GitHub th√†nh c√¥ng"

        except Exception as e:
            return False, f"‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu GitHub: {str(e)}"

    def get_category_data(self, category_name):
        """L·∫•y d·ªØ li·ªáu theo danh m·ª•c"""
        if self.data is None:
            return None

        if 'Danh m·ª•c' not in self.data.columns:
            return self.data  # Tr·∫£ v·ªÅ to√†n b·ªô n·∫øu kh√¥ng c√≥ c·ªôt Danh m·ª•c

        filtered_data = self.data[self.data['Danh m·ª•c'] == category_name]
        return filtered_data if not filtered_data.empty else None

    def get_other_categories_data(self, excluded_categories):
        """L·∫•y d·ªØ li·ªáu cho c√°c danh m·ª•c kh√¥ng thu·ªôc danh s√°ch lo·∫°i tr·ª´"""
        if self.data is None:
            return None

        if 'Danh m·ª•c' not in self.data.columns:
            return self.data

        filtered_data = self.data[~self.data['Danh m·ª•c'].isin(excluded_categories)]
        return filtered_data if not filtered_data.empty else None

# Initialize managers
if 'data_manager' not in st.session_state:
    st.session_state['data_manager'] = DataManager()

if 'github_manager' not in st.session_state:
    st.session_state['github_manager'] = GitHubDataManager()

data_manager = st.session_state['data_manager']
github_manager = st.session_state['github_manager']

# ===== SIDEBAR GITHUB CONNECTION =====
st.sidebar.header("‚òÅÔ∏è K·∫øt n·ªëi GitHub")

# Ki·ªÉm tra k·∫øt n·ªëi GitHub
connected, message = github_manager.check_github_connection()

if connected:
    st.sidebar.success("‚úÖ GitHub k·∫øt n·ªëi th√†nh c√¥ng")

    # Th·ª≠ t·∫£i d·ªØ li·ªáu t·ª´ GitHub
    try:
        github_data, github_metadata = github_manager.load_current_data()

        if github_data is not None and github_metadata:
            # C√≥ d·ªØ li·ªáu t·ª´ GitHub
            st.sidebar.info(f"""
üìä **D·ªØ li·ªáu t·ª´ GitHub:**
- File: {github_metadata['filename']}
- K√≠ch th∆∞·ªõc: {github_metadata['size']:,} bytes
            """)

            # Load v√†o data manager
            success, load_message = data_manager.load_data_from_github(github_data, github_metadata)
            if success:
                st.sidebar.success("‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu t·ª´ GitHub")

                # Button refresh
                if st.sidebar.button("üîÑ Refresh t·ª´ GitHub"):
                    st.rerun()
            else:
                st.sidebar.warning(f"‚ö†Ô∏è {load_message}")
        else:
            st.sidebar.warning("üì≠ Ch∆∞a c√≥ d·ªØ li·ªáu tr√™n GitHub")

    except Exception as github_error:
        st.sidebar.error(f"‚ùå L·ªói GitHub: {str(github_error)}")
else:
    st.sidebar.warning(message)

st.sidebar.markdown("---")

# ===== SIDEBAR API SYNC =====
st.sidebar.header("üîÑ ƒê·ªìng B·ªô API")
show_quick_sync_button()

st.sidebar.markdown("---")

# ===== SIDEBAR UPLOAD FILE =====
st.sidebar.header("üìÅ T·∫£i d·ªØ li·ªáu th·ªß c√¥ng")

# Upload file cho d·ªØ li·ªáu m·ªõi (T·ªï xe, T·ªïng ƒë√†i, etc.)
uploaded_file_new = st.sidebar.file_uploader(
    "üìä Upload d·ªØ li·ªáu m·ªõi",
    type=['csv', 'json', 'xlsx', 'xls'],
    key="new_data_upload",
    help="H·ªó tr·ª£: CSV, JSON, Excel (.xlsx, .xls)\nD√†nh cho c√°c tab: T·ªï xe, T·ªïng ƒë√†i, H·ªá th·ªëng th∆∞ k√Ω, B√£i gi·ªØ xe, S·ª± ki·ªán, Kh√°c"
)

# X·ª≠ l√Ω file upload
if uploaded_file_new is not None:
    success, message = data_manager.load_data_from_file(uploaded_file_new)

    if success:
        st.sidebar.success(message)

        # Hi·ªÉn th·ªã th√¥ng tin file
        if data_manager.metadata:
            st.sidebar.info(f"üìÑ **{data_manager.metadata['filename']}**")
            st.sidebar.info(f"üìä **{data_manager.metadata['file_type']}** - {data_manager.metadata['rows']:,} d√≤ng")

            # Hi·ªÉn th·ªã c√°c danh m·ª•c c√≥ trong file
            if data_manager.metadata['categories']:
                st.sidebar.write("üìã **Danh m·ª•c c√≥ trong file:**")
                for cat in data_manager.metadata['categories']:
                    st.sidebar.write(f"- {cat}")
            else:
                st.sidebar.write("üìã **C·ªôt c√≥ trong file:**")
                for col in data_manager.metadata['columns'][:5]:  # Hi·ªÉn th·ªã t·ªëi ƒëa 5 c·ªôt
                    st.sidebar.write(f"- {col}")
                if len(data_manager.metadata['columns']) > 5:
                    st.sidebar.write(f"- ... v√† {len(data_manager.metadata['columns']) - 5} c·ªôt kh√°c")
    else:
        st.sidebar.error(message)

# Button ƒë·ªÉ x√≥a d·ªØ li·ªáu ƒë√£ upload
if data_manager.data is not None:
    if st.sidebar.button("üóëÔ∏è X√≥a d·ªØ li·ªáu ƒë√£ t·∫£i"):
        data_manager.data = None
        data_manager.metadata = None
        st.rerun()

# Hi·ªÉn th·ªã tr·∫°ng th√°i d·ªØ li·ªáu
if data_manager.data is not None and data_manager.metadata:
    if data_manager.metadata['file_type'] == 'GitHub':
        st.sidebar.success(f"‚òÅÔ∏è D·ªØ li·ªáu t·ª´ GitHub: {data_manager.metadata['filename']}")
    else:
        st.sidebar.success(f"‚úÖ D·ªØ li·ªáu th·ªß c√¥ng: {data_manager.metadata['filename']}")
else:
    st.sidebar.info("üì≠ Ch∆∞a c√≥ d·ªØ li·ªáu ƒë∆∞·ª£c t·∫£i")

st.sidebar.markdown("---")

# HEADER: logo + title on one line (flexbox)
try:
    # Encode logo to base64 for inline <img>
    script_dir = os.path.dirname(os.path.abspath(__file__))
    logo_base64 = ""
    # Check for logo.png in current directory first, then in ./assets/
    for p in [
        os.path.join(script_dir, "logo.png"),                      # 1Ô∏è‚É£ same-level logo
        os.path.join(script_dir, "assets", "logo.png")            # 2Ô∏è‚É£ assets folder
    ]:
        if os.path.exists(p):
            with open(p, "rb") as f:
                logo_base64 = base64.b64encode(f.read()).decode()
            break
except Exception:
    logo_base64 = ""

# Build logo HTML (fallback emoji if logo not found)
if logo_base64:
    logo_html = f"<img src='data:image/png;base64,{logo_base64}' style='height:80px; width:auto;' />"
else:
    logo_html = "<span style='font-size:80px;'>üè¢</span>"

# Header ch√≠nh v·ªõi logo
st.markdown(f"""
<div class="header-container">
    {logo_html}
    <div class="header-text" style="margin-left: 20px;">
        Dashboard Ph√≤ng H√†nh ch√≠nh
    </div>
</div>
""", unsafe_allow_html=True)

# Sidebar - B·ªô l·ªçc to√†n c·ª•c
st.sidebar.markdown("## üîç B·ªô l·ªçc to√†n c·ª•c")

# Kh·ªüi t·∫°o bi·∫øn filter m·∫∑c ƒë·ªãnh
global_date_filter = None
global_dept_filter = None

# Checkbox ƒë·ªÉ b·∫≠t/t·∫Øt filter
enable_global_filter = st.sidebar.checkbox("üéØ B·∫≠t b·ªô l·ªçc to√†n c·ª•c", value=False)

if enable_global_filter:
    # Filter ng√†y
    st.sidebar.markdown("### üìÖ Kho·∫£ng th·ªùi gian")
    
    # S·ª≠ d·ª•ng 2 date_input ri√™ng bi·ªát ƒë·ªÉ tr√°nh l·ªói
    col1, col2 = st.sidebar.columns(2)
    with col1:
        start_date = st.date_input(
            "T·ª´ ng√†y:",
            value=None,
            help="Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu"
        )
    with col2:
        end_date = st.date_input(
            "ƒê·∫øn ng√†y:",
            value=None,
            help="Ch·ªçn ng√†y k·∫øt th√∫c"
        )
    
    # T·∫°o global_date_filter t·ª´ 2 ng√†y
    if start_date is not None and end_date is not None:
        global_date_filter = (start_date, end_date)
    elif start_date is not None:
        global_date_filter = start_date
    else:
        global_date_filter = None
    
    # Filter ph√≤ng ban (ch·ªâ hi·ªán khi c√≥ d·ªØ li·ªáu)
    st.sidebar.markdown("### üè¢ Ph√≤ng ban")
    st.sidebar.info("Filter ph√≤ng ban s·∫Ω xu·∫•t hi·ªán khi upload d·ªØ li·ªáu c√≥ th√¥ng tin ph√≤ng ban")

st.sidebar.markdown("---")

# H√†m ti·ªán √≠ch ƒë·ªÉ load d·ªØ li·ªáu t·ª´ GitHub
def load_data_from_github(filename):
    """Load d·ªØ li·ªáu t·ª´ GitHub private repo"""
    try:
        github_token = st.secrets.get("github_token", "")
        github_owner = st.secrets.get("github_owner", "")
        github_repo = st.secrets.get("github_repo", "")

        if not all([github_token, github_owner, github_repo]):
            st.error(f"‚ùå Ch∆∞a c·∫•u h√¨nh GitHub ƒë·ªÉ load {filename}")
            return None

        url = f"https://api.github.com/repos/{github_owner}/{github_repo}/contents/{filename}"
        headers = {"Authorization": f"token {github_token}"}

        response = requests.get(url, headers=headers, verify=False)

        if response.status_code == 200:
            content = response.json()
            file_content = base64.b64decode(content["content"]).decode('utf-8')
            data = json.loads(file_content)

            # X·ª≠ l√Ω data structure
            if isinstance(data, dict) and "data" in data:
                df = pd.DataFrame(data["data"])
            else:
                df = pd.DataFrame(data)

            return df
        else:
            st.warning(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y {filename} tr√™n GitHub")
            return None

    except Exception as e:
        st.error(f"‚ùå L·ªói load {filename} t·ª´ GitHub: {str(e)}")
        return None

# H√†m ti·ªán √≠ch ƒë·ªÉ √°p d·ª•ng filter to√†n c·ª•c
def apply_global_filter(df, date_col='datetime'):
    """√Åp d·ª•ng b·ªô l·ªçc to√†n c·ª•c cho DataFrame"""
    if not enable_global_filter or df is None or df.empty:
        return df

    try:
        # Ki·ªÉm tra xem c·ªôt datetime c√≥ t·ªìn t·∫°i kh√¥ng
        if date_col not in df.columns:
            # N·∫øu kh√¥ng c√≥ c·ªôt datetime, b·ªè qua filter (d·ªØ li·ªáu theo tu·∫ßn/th√°ng)
            return df

        filtered_df = df.copy()

        # √Åp d·ª•ng filter ng√†y
        if global_date_filter is not None:
            # Ki·ªÉm tra n·∫øu l√† tuple/list v·ªõi 2 ph·∫ßn t·ª≠
            if isinstance(global_date_filter, (list, tuple)) and len(global_date_filter) == 2:
                start_date, end_date = global_date_filter
                if start_date is not None and end_date is not None:
                    filtered_df = filtered_df[
                        (filtered_df[date_col] >= pd.to_datetime(start_date)) &
                        (filtered_df[date_col] <= pd.to_datetime(end_date))
                    ]
            # N·∫øu ch·ªâ l√† 1 ng√†y, filter t·ª´ ng√†y ƒë√≥ tr·ªü ƒëi
            elif global_date_filter is not None:
                filtered_df = filtered_df[filtered_df[date_col] >= pd.to_datetime(global_date_filter)]

        return filtered_df
    except Exception as e:
        st.warning(f"‚ö†Ô∏è B·ªô l·ªçc to√†n c·ª•c kh√¥ng √°p d·ª•ng ƒë∆∞·ª£c cho d·ªØ li·ªáu n√†y (d·ªØ li·ªáu theo tu·∫ßn/th√°ng)")
        return df

def process_incoming_documents_data(uploaded_file):
    try:
        if uploaded_file.type == "application/json":
            data = json.load(uploaded_file)
            if isinstance(data, dict) and "data" in data:
                df = pd.DataFrame(data["data"])
            else:
                df = pd.DataFrame(data)
        else:
            df = pd.read_csv(uploaded_file)
        
        # T·∫°o c·ªôt datetime (s·ª≠ d·ª•ng 'date' thay v√¨ 'day')
        df['datetime'] = pd.to_datetime(df[['year', 'month', 'date']].rename(columns={'date': 'day'}))
        df['weekday'] = df['datetime'].dt.day_name()
        df['week'] = df['datetime'].dt.isocalendar().week
        
        # ƒê·∫£m b·∫£o c√°c c·ªôt c·∫ßn thi·∫øt t·ªìn t·∫°i, n·∫øu kh√¥ng th√¨ t·∫°o v·ªõi gi√° tr·ªã 0
        required_columns = ['no_response_required', 'response_required', 
                          'response_required_VanBan', 'response_required_Email', 
                          'response_required_DienThoai', 'response_required_PhanMem']
        
        for col in required_columns:
            if col not in df.columns:
                df[col] = 0
        
        # ƒê·∫£m b·∫£o c·ªôt processed_rate_on_time v√† processed_rate_late t·ªìn t·∫°i
        if 'processed_rate_on_time' not in df.columns:
            df['processed_rate_on_time'] = 0
        if 'processed_rate_late' not in df.columns:
            df['processed_rate_late'] = 0
            
        return df
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}")
        return None

# H√†m t·∫°o pivot table
def create_pivot_table(df):
    st.markdown("### üìä B·∫£ng Pivot - Ph√¢n t√≠ch theo th·ªùi gian")

    # CSS cho table l·ªõn h∆°n v√† ƒë·∫πp h∆°n
    st.markdown("""
    <style>
    .pivot-table {
        font-size: 16px !important;
        font-weight: 500;
    }
    .pivot-table td {
        padding: 12px 8px !important;
        text-align: center !important;
    }
    .pivot-table th {
        padding: 15px 8px !important;
        text-align: center !important;
        background-color: #f0f2f6 !important;
        font-weight: bold !important;
        font-size: 17px !important;
    }
    .increase { color: #28a745 !important; font-weight: bold; }
    .decrease { color: #dc3545 !important; font-weight: bold; }
    .neutral { color: #6c757d !important; }
    .new-period { color: #007bff !important; font-weight: bold; }
    </style>
    """, unsafe_allow_html=True)

    # L·ª±a ch·ªçn m·ª©c ƒë·ªô t·ªïng h·ª£p
    col1, col2 = st.columns([1, 3])
    with col1:
        period_type = st.selectbox(
            "üìÖ T·ªïng h·ª£p theo:",
            options=['Ng√†y', 'Tu·∫ßn', 'Th√°ng', 'Qu√Ω', 'NƒÉm'],
            index=1,  # M·∫∑c ƒë·ªãnh l√† Tu·∫ßn
            key="pivot_period_type"
        )

    # Chu·∫©n b·ªã d·ªØ li·ªáu theo lo·∫°i period
    df_period = df.copy()

    if period_type == 'Tu·∫ßn':
        df_period['period'] = 'W' + df_period['week'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['week']
    elif period_type == 'Th√°ng':
        df_period['period'] = 'T' + df_period['month'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['month']
    elif period_type == 'Qu√Ω':
        df_period['quarter'] = ((df_period['month'] - 1) // 3) + 1
        df_period['period'] = 'Q' + df_period['quarter'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['quarter']
    elif period_type == 'NƒÉm':
        df_period['period'] = df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year']
    else:  # Ng√†y
        df_period['period'] = df_period['datetime'].dt.strftime('%d/%m/%Y')
        df_period['period_sort'] = df_period['datetime']

    # T·∫°o pivot table v·ªõi c√°c ch·ªâ s·ªë m·ªõi
    pivot_columns = ['total_incoming', 'no_response_required', 'response_required',
                    'processed_on_time', 'processed_late', 'response_required_VanBan',
                    'response_required_Email', 'response_required_DienThoai', 'response_required_PhanMem']

    # Ki·ªÉm tra c√°c c·ªôt c√≥ t·ªìn t·∫°i kh√¥ng
    available_columns = [col for col in pivot_columns if col in df_period.columns]

    pivot_data = df_period.groupby(['period', 'period_sort'])[available_columns].sum().reset_index()
    pivot_data = pivot_data.sort_values('period_sort', ascending=False)

    # T√≠nh to√°n bi·∫øn ƒë·ªông so v·ªõi k·ª≥ tr∆∞·ªõc
    for col in available_columns:
        pivot_data[f'{col}_prev'] = pivot_data[col].shift(-1)
        pivot_data[f'{col}_change'] = pivot_data[col] - pivot_data[f'{col}_prev']
        pivot_data[f'{col}_change_pct'] = ((pivot_data[col] / pivot_data[f'{col}_prev'] - 1) * 100).round(1)
        pivot_data[f'{col}_change_pct'] = pivot_data[f'{col}_change_pct'].fillna(0)

    # T√≠nh t·ª∑ l·ªá x·ª≠ l√Ω ƒë√∫ng h·∫°n
    if 'total_incoming' in available_columns and 'processed_on_time' in available_columns:
        pivot_data['on_time_rate'] = (pivot_data['processed_on_time'] / pivot_data['total_incoming'] * 100).round(1)
        pivot_data['on_time_rate'] = pivot_data['on_time_rate'].fillna(0)

    # T·∫°o DataFrame hi·ªÉn th·ªã v·ªõi bi·∫øn ƒë·ªông trong c√πng cell
    display_data = pivot_data.copy()

    # H√†m t·∫°o cell k·∫øt h·ª£p gi√° tr·ªã v√† bi·∫øn ƒë·ªông
    def format_cell_with_change(row, col):
        current_val = row[col]
        change_val = row[f'{col}_change']
        change_pct = row[f'{col}_change_pct']
        prev_val = row[f'{col}_prev']

        # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu k·ª≥ tr∆∞·ªõc, ch·ªâ hi·ªÉn th·ªã gi√° tr·ªã hi·ªán t·∫°i
        if pd.isna(prev_val) or prev_val == 0:
            return f"{int(current_val)}"

        # ƒê·ªãnh m√†u s·∫Øc theo chi·ªÅu h∆∞·ªõng thay ƒë·ªïi
        if change_val > 0:
            color_class = "increase"
            arrow = "‚Üó"
            sign = "+"
        elif change_val < 0:
            color_class = "decrease"
            arrow = "‚Üò"
            sign = ""
        else:
            color_class = "neutral"
            arrow = "‚Üí"
            sign = ""

        # Tr·∫£ v·ªÅ HTML v·ªõi m√†u s·∫Øc
        return f"""<div style="text-align: center; line-height: 1.2;">
            <div style="font-size: 16px; font-weight: 600;">{int(current_val)}</div>
            <div class="{color_class}" style="font-size: 12px; margin-top: 2px;">
                {arrow} {sign}{int(change_val)} ({change_pct:+.1f}%)
            </div>
        </div>"""

    # T·∫°o c·ªôt hi·ªÉn th·ªã m·ªõi
    display_columns = ['period']
    column_names = {f'period': f'{period_type}'}

    for col in available_columns:
        new_col = f'{col}_display'
        display_data[new_col] = display_data.apply(lambda row: format_cell_with_change(row, col), axis=1)
        display_columns.append(new_col)

        # Mapping t√™n c·ªôt
        if col == 'total_incoming':
            column_names[new_col] = 'T·ªïng VB ƒë·∫øn'
        elif col == 'no_response_required':
            column_names[new_col] = 'Kh√¥ng y√™u c·∫ßu ph·∫£n h·ªìi'
        elif col == 'response_required':
            column_names[new_col] = 'Y√™u c·∫ßu ph·∫£n h·ªìi'
        elif col == 'processed_on_time':
            column_names[new_col] = 'X·ª≠ l√Ω ƒë√∫ng h·∫°n'
        elif col == 'processed_late':
            column_names[new_col] = 'X·ª≠ l√Ω tr·ªÖ h·∫°n'
        elif col == 'response_required_VanBan':
            column_names[new_col] = 'PH - VƒÉn b·∫£n'
        elif col == 'response_required_Email':
            column_names[new_col] = 'PH - Email'
        elif col == 'response_required_DienThoai':
            column_names[new_col] = 'PH - ƒêi·ªán tho·∫°i'
        elif col == 'response_required_PhanMem':
            column_names[new_col] = 'PH - Ph·∫ßn m·ªÅm'

    # B·ªè t·ª∑ l·ªá ƒë√∫ng h·∫°n theo y√™u c·∫ßu

    st.markdown(f"#### üìã T·ªïng h·ª£p theo {period_type} (bao g·ªìm bi·∫øn ƒë·ªông)")

    # Hi·ªÉn th·ªã b·∫£ng v·ªõi HTML ƒë·ªÉ render m√†u s·∫Øc
    df_display = display_data[display_columns].rename(columns=column_names)

    # T·∫°o HTML table v·ªõi sticky header
    html_table = "<div style='max-height: 400px; overflow-y: auto; border: 1px solid #ddd;'><table class='pivot-table' style='width: 100%; border-collapse: collapse; font-size: 16px;'>"

    # Header v·ªõi sticky positioning
    html_table += "<thead><tr>"
    for col in df_display.columns:
        html_table += f"<th style='position: sticky; top: 0; padding: 15px 8px; text-align: center; background-color: #f0f2f6; font-weight: bold; font-size: 17px; border: 1px solid #ddd; z-index: 10;'>{col}</th>"
    html_table += "</tr></thead>"

    # Body
    html_table += "<tbody>"
    for _, row in df_display.iterrows():
        html_table += "<tr>"
        for i, col in enumerate(df_display.columns):
            cell_value = row[col]
            style = "padding: 12px 8px; text-align: center; border: 1px solid #ddd; vertical-align: middle;"
            if i == 0:  # Period column
                style += " font-weight: 600; background-color: #f8f9fa;"
            html_table += f"<td style='{style}'>{cell_value}</td>"
        html_table += "</tr>"
    html_table += "</tbody></table></div>"

    st.markdown(html_table, unsafe_allow_html=True)

    return period_type


# H√†m x·ª≠ l√Ω d·ªØ li·ªáu vƒÉn b·∫£n ƒëi
def process_outgoing_documents_data(uploaded_file):
    try:
        if uploaded_file.type == "application/json":
            data = json.load(uploaded_file)
            if isinstance(data, dict) and "data" in data:
                df = pd.DataFrame(data["data"])
            else:
                df = pd.DataFrame(data)
        else:
            df = pd.read_csv(uploaded_file)
        
        # T·∫°o c·ªôt datetime
        df['datetime'] = pd.to_datetime(df[['year', 'month', 'date']].rename(columns={'date': 'day'}))
        df['weekday'] = df['datetime'].dt.day_name()
        df['week'] = df['datetime'].dt.isocalendar().week
        
        # X·ª≠ l√Ω c√°c c·ªôt nested (contracts, decisions, etc.)
        def extract_total(col_data):
            if pd.isna(col_data):
                return 0
            if isinstance(col_data, dict):
                return col_data.get('total', 0)
            if isinstance(col_data, str):
                try:
                    parsed = json.loads(col_data)
                    return parsed.get('total', 0)
                except:
                    return 0
            return 0
        
        # H√†m tr√≠ch xu·∫•t chi ti·∫øt t·ª´ nested data
        def extract_detail(col_data):
            if pd.isna(col_data):
                return []
            if isinstance(col_data, dict) and 'detail' in col_data:
                return col_data.get('detail', [])
            if isinstance(col_data, str):
                try:
                    parsed = json.loads(col_data)
                    return parsed.get('detail', [])
                except:
                    return []
            return []
        
        # T·∫°o c√°c c·ªôt t·ªïng h·ª£p
        category_columns = ['contracts', 'decisions', 'regulations', 'rules', 'procedures', 'instruct']
        for col in category_columns:
            if col in df.columns:
                df[f'{col}_total'] = df[col].apply(extract_total)
                df[f'{col}_detail'] = df[col].apply(extract_detail)
            else:
                df[f'{col}_total'] = 0
                df[f'{col}_detail'] = []
        
        # ƒê·∫£m b·∫£o c·ªôt documents t·ªìn t·∫°i
        if 'documents' not in df.columns:
            df['documents'] = 0
            
        # T·ªïng vƒÉn b·∫£n ƒëi = documents + t·∫•t c·∫£ c√°c lo·∫°i kh√°c
        df['total_outgoing'] = (
            df['documents'] +
            df.get('contracts_total', 0) + 
            df.get('decisions_total', 0) + 
            df.get('regulations_total', 0) + 
            df.get('rules_total', 0) + 
            df.get('procedures_total', 0) + 
            df.get('instruct_total', 0)
        )
            
        return df
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu vƒÉn b·∫£n ƒëi: {str(e)}")
        return None

# H√†m t·∫°o pivot table cho vƒÉn b·∫£n ƒëi
def create_outgoing_pivot_table(df):
    st.markdown("### üìä B·∫£ng Pivot - Ph√¢n t√≠ch vƒÉn b·∫£n ƒëi theo th·ªùi gian")

    # CSS cho table l·ªõn h∆°n v√† ƒë·∫πp h∆°n
    st.markdown("""
    <style>
    .pivot-table-outgoing {
        font-size: 16px !important;
        font-weight: 500;
    }
    .pivot-table-outgoing td {
        padding: 12px 8px !important;
        text-align: center !important;
    }
    .pivot-table-outgoing th {
        padding: 15px 8px !important;
        text-align: center !important;
        background-color: #f0f2f6 !important;
        font-weight: bold !important;
        font-size: 17px !important;
    }
    </style>
    """, unsafe_allow_html=True)

    # L·ª±a ch·ªçn m·ª©c ƒë·ªô t·ªïng h·ª£p
    col1, col2 = st.columns([1, 3])
    with col1:
        period_type = st.selectbox(
            "üìÖ T·ªïng h·ª£p theo:",
            options=['Ng√†y', 'Tu·∫ßn', 'Th√°ng', 'Qu√Ω', 'NƒÉm'],
            index=1,  # M·∫∑c ƒë·ªãnh l√† Tu·∫ßn
            key="outgoing_period_type"
        )

    # Chu·∫©n b·ªã d·ªØ li·ªáu theo lo·∫°i period
    df_period = df.copy()

    if period_type == 'Tu·∫ßn':
        df_period['period'] = 'W' + df_period['week'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['week']
    elif period_type == 'Th√°ng':
        df_period['period'] = 'T' + df_period['month'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['month']
    elif period_type == 'Qu√Ω':
        df_period['quarter'] = ((df_period['month'] - 1) // 3) + 1
        df_period['period'] = 'Q' + df_period['quarter'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['quarter']
    elif period_type == 'NƒÉm':
        df_period['period'] = df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year']
    else:  # Ng√†y
        df_period['period'] = df_period['datetime'].dt.strftime('%d/%m/%Y')
        df_period['period_sort'] = df_period['datetime']

    # T·∫°o pivot table v·ªõi c√°c ch·ªâ s·ªë vƒÉn b·∫£n ƒëi
    pivot_columns = ['documents', 'contracts_total', 'decisions_total', 'regulations_total',
                    'rules_total', 'procedures_total', 'instruct_total']

    # Ki·ªÉm tra c√°c c·ªôt c√≥ t·ªìn t·∫°i kh√¥ng
    available_columns = [col for col in pivot_columns if col in df_period.columns]

    pivot_data = df_period.groupby(['period', 'period_sort'])[available_columns].sum().reset_index()

    # T√≠nh total_outgoing ƒë√∫ng c√¥ng th·ª©c = t·∫•t c·∫£ c√°c lo·∫°i c·ªông l·∫°i
    total_columns = ['documents', 'contracts_total', 'decisions_total', 'regulations_total',
                    'rules_total', 'procedures_total', 'instruct_total']

    # Ch·ªâ c·ªông c√°c c·ªôt c√≥ trong pivot_data
    existing_total_columns = [col for col in total_columns if col in pivot_data.columns]
    if existing_total_columns:
        pivot_data['total_outgoing'] = pivot_data[existing_total_columns].sum(axis=1)
    else:
        pivot_data['total_outgoing'] = 0

    # C·∫≠p nh·∫≠t available_columns ƒë·ªÉ bao g·ªìm total_outgoing
    available_columns = ['total_outgoing'] + available_columns
    pivot_data = pivot_data.sort_values('period_sort', ascending=False)

    # T√≠nh to√°n bi·∫øn ƒë·ªông so v·ªõi k·ª≥ tr∆∞·ªõc
    for col in available_columns:
        pivot_data[f'{col}_prev'] = pivot_data[col].shift(-1)
        pivot_data[f'{col}_change'] = pivot_data[col] - pivot_data[f'{col}_prev']
        pivot_data[f'{col}_change_pct'] = ((pivot_data[col] / pivot_data[f'{col}_prev'] - 1) * 100).round(1)
        pivot_data[f'{col}_change_pct'] = pivot_data[f'{col}_change_pct'].fillna(0)

    # T·∫°o DataFrame hi·ªÉn th·ªã v·ªõi bi·∫øn ƒë·ªông trong c√πng cell
    display_data = pivot_data.copy()

    # H√†m t·∫°o cell k·∫øt h·ª£p gi√° tr·ªã v√† bi·∫øn ƒë·ªông
    def format_cell_with_change(row, col):
        current_val = row[col]
        change_val = row[f'{col}_change']
        change_pct = row[f'{col}_change_pct']
        prev_val = row[f'{col}_prev']

        # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu k·ª≥ tr∆∞·ªõc, ch·ªâ hi·ªÉn th·ªã gi√° tr·ªã hi·ªán t·∫°i
        if pd.isna(prev_val) or prev_val == 0:
            return f"{int(current_val)}"

        # ƒê·ªãnh m√†u s·∫Øc theo chi·ªÅu h∆∞·ªõng thay ƒë·ªïi
        if change_val > 0:
            color_class = "increase"
            arrow = "‚Üó"
            sign = "+"
        elif change_val < 0:
            color_class = "decrease"
            arrow = "‚Üò"
            sign = ""
        else:
            color_class = "neutral"
            arrow = "‚Üí"
            sign = ""

        # Tr·∫£ v·ªÅ HTML v·ªõi m√†u s·∫Øc
        return f"""<div style="text-align: center; line-height: 1.2;">
            <div style="font-size: 16px; font-weight: 600;">{int(current_val)}</div>
            <div class="{color_class}" style="font-size: 12px; margin-top: 2px;">
                {arrow} {sign}{int(change_val)} ({change_pct:+.1f}%)
            </div>
        </div>"""

    # T·∫°o c·ªôt hi·ªÉn th·ªã m·ªõi
    display_columns = ['period']
    column_names = {f'period': f'{period_type}'}

    for col in available_columns:
        new_col = f'{col}_display'
        display_data[new_col] = display_data.apply(lambda row: format_cell_with_change(row, col), axis=1)
        display_columns.append(new_col)

        # Mapping t√™n c·ªôt
        if col == 'total_outgoing':
            column_names[new_col] = 'T·ªïng VB ƒëi'
        elif col == 'documents':
            column_names[new_col] = 'VB ph√°t h√†nh'
        elif col == 'contracts_total':
            column_names[new_col] = 'H·ª£p ƒë·ªìng'
        elif col == 'decisions_total':
            column_names[new_col] = 'Quy·∫øt ƒë·ªãnh'
        elif col == 'regulations_total':
            column_names[new_col] = 'Quy ch·∫ø'
        elif col == 'rules_total':
            column_names[new_col] = 'Quy ƒë·ªãnh'
        elif col == 'procedures_total':
            column_names[new_col] = 'Th·ªß t·ª•c'
        elif col == 'instruct_total':
            column_names[new_col] = 'H∆∞·ªõng d·∫´n'

    st.markdown(f"#### üìã T·ªïng h·ª£p theo {period_type} (bao g·ªìm bi·∫øn ƒë·ªông)")

    # Hi·ªÉn th·ªã b·∫£ng v·ªõi HTML ƒë·ªÉ render m√†u s·∫Øc
    df_display = display_data[display_columns].rename(columns=column_names)

    # T·∫°o HTML table v·ªõi sticky header
    html_table = "<div style='max-height: 400px; overflow-y: auto; border: 1px solid #ddd;'><table class='pivot-table-outgoing' style='width: 100%; border-collapse: collapse; font-size: 16px;'>"

    # Header v·ªõi sticky positioning
    html_table += "<thead><tr>"
    for col in df_display.columns:
        html_table += f"<th style='position: sticky; top: 0; padding: 15px 8px; text-align: center; background-color: #f0f2f6; font-weight: bold; font-size: 17px; border: 1px solid #ddd; z-index: 10;'>{col}</th>"
    html_table += "</tr></thead>"

    # Body
    html_table += "<tbody>"
    for _, row in df_display.iterrows():
        html_table += "<tr>"
        for i, col in enumerate(df_display.columns):
            cell_value = row[col]
            style = "padding: 12px 8px; text-align: center; border: 1px solid #ddd; vertical-align: middle;"
            if i == 0:  # Period column
                style += " font-weight: 600; background-color: #f8f9fa;"
            html_table += f"<td style='{style}'>{cell_value}</td>"
        html_table += "</tr>"
    html_table += "</tbody></table></div>"

    st.markdown(html_table, unsafe_allow_html=True)

    return period_type

# H√†m t·∫°o bi·ªÉu ƒë·ªì cho vƒÉn b·∫£n ƒëi
def create_outgoing_docs_charts(df, period_type='Tu·∫ßn'):
    # H√†ng 1: Bi·ªÉu ƒë·ªì t·ªïng quan
    col1, col2 = st.columns(2)
    
    with col1:
        # Chart 1: H∆∞·ªõng d·∫´n + Th·ªß t·ª•c
        # Bi·ªÉu ƒë·ªì theo period_type ƒë∆∞·ª£c ch·ªçn
        df_chart = df.copy()

        # T·∫°o period theo l·ª±a ch·ªçn
        if period_type == 'Tu·∫ßn':
            df_chart['period'] = 'W' + df_chart['week'].astype(str) + '-' + df_chart['year'].astype(str)
            df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['week']
            chart_title = 'üìà VƒÉn b·∫£n ƒëi theo tu·∫ßn'
            x_title = "Tu·∫ßn"
        elif period_type == 'Th√°ng':
            df_chart['period'] = 'T' + df_chart['month'].astype(str) + '-' + df_chart['year'].astype(str)
            df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['month']
            chart_title = 'üìà VƒÉn b·∫£n ƒëi theo th√°ng'
            x_title = "Th√°ng"
        elif period_type == 'Qu√Ω':
            df_chart['quarter'] = ((df_chart['month'] - 1) // 3) + 1
            df_chart['period'] = 'Q' + df_chart['quarter'].astype(str) + '-' + df_chart['year'].astype(str)
            df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['quarter']
            chart_title = 'üìà VƒÉn b·∫£n ƒëi theo qu√Ω'
            x_title = "Qu√Ω"
        elif period_type == 'NƒÉm':
            df_chart['period'] = df_chart['year'].astype(str)
            df_chart['period_sort'] = df_chart['year']
            chart_title = 'üìà VƒÉn b·∫£n ƒëi theo nƒÉm'
            x_title = "NƒÉm"
        else:  # Ng√†y
            df_chart['period'] = df_chart['datetime'].dt.strftime('%d/%m/%Y')
            df_chart['period_sort'] = df_chart['datetime']
            chart_title = 'üìà VƒÉn b·∫£n ƒëi theo ng√†y'
            x_title = "Ng√†y"

        business_categories = ['instruct_total', 'procedures_total']
        business_names = ['H∆∞·ªõng d·∫´n', 'Th·ªß t·ª•c']
        business_colors = ['#1f77b4', '#ff7f0e']

        # Ch·ªâ l·∫•y c√°c c·ªôt c√≥ trong DataFrame
        available_business_categories = [col for col in business_categories if col in df_chart.columns]

        # T√≠nh data theo period (ch·ªâ v·ªõi c√°c c·ªôt c√≥ s·∫µn)
        if available_business_categories:
            business_data = df_chart.groupby(['period', 'period_sort'])[available_business_categories].sum().reset_index()
        else:
            # T·∫°o DataFrame r·ªóng n·∫øu kh√¥ng c√≥ c·ªôt n√†o
            business_data = df_chart.groupby(['period', 'period_sort']).size().reset_index(name='count')
        business_data = business_data.sort_values('period_sort')

        fig_business = go.Figure()

        for i, cat in enumerate(business_categories):
            if cat in available_business_categories and cat in business_data.columns and business_data[cat].sum() > 0:
                fig_business.add_trace(go.Scatter(
                    x=business_data['period'],
                    y=business_data[cat],
                    mode='lines+markers',
                    name=business_names[i],
                    line=dict(color=business_colors[i], width=3),
                    marker=dict(size=8)
                ))

                # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng
                if len(business_data) >= 3:
                    ma_window = min(3, len(business_data)//2)
                    if ma_window > 0:
                        ma_trend = business_data[cat].rolling(window=ma_window, center=True).mean()
                        fig_business.add_trace(go.Scatter(
                            x=business_data['period'],
                            y=ma_trend,
                            mode='lines',
                            name=f'{business_names[i]} - Xu h∆∞·ªõng',
                            line=dict(color=business_colors[i], width=2, dash='dash'),
                            opacity=0.7,
                            showlegend=False
                        ))

        fig_business.update_layout(
            title=f'üìÑ H∆∞·ªõng d·∫´n & Th·ªß t·ª•c theo {period_type.lower()}',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            hovermode='x unified'
        )
        st.plotly_chart(fig_business, use_container_width=True)
    
    with col2:
        # Chart 2: Quy ch·∫ø + Quy ƒë·ªãnh (b·ªè h∆∞·ªõng d·∫´n v√† th·ªß t·ª•c)
        admin_categories = ['regulations_total', 'rules_total']
        admin_names = ['Quy ch·∫ø', 'Quy ƒë·ªãnh']
        admin_colors = ['#2ca02c', '#d62728']

        # Ch·ªâ l·∫•y c√°c c·ªôt c√≥ trong DataFrame
        available_admin_categories = [col for col in admin_categories if col in df_chart.columns]

        # T√≠nh data theo period (ch·ªâ v·ªõi c√°c c·ªôt c√≥ s·∫µn)
        if available_admin_categories:
            admin_data = df_chart.groupby(['period', 'period_sort'])[available_admin_categories].sum().reset_index()
        else:
            # T·∫°o DataFrame r·ªóng n·∫øu kh√¥ng c√≥ c·ªôt n√†o
            admin_data = df_chart.groupby(['period', 'period_sort']).size().reset_index(name='count')
        admin_data = admin_data.sort_values('period_sort')

        fig_admin = go.Figure()

        for i, cat in enumerate(admin_categories):
            if cat in available_admin_categories and cat in admin_data.columns and admin_data[cat].sum() > 0:
                fig_admin.add_trace(go.Scatter(
                    x=admin_data['period'],
                    y=admin_data[cat],
                    mode='lines+markers',
                    name=admin_names[i],
                    line=dict(color=admin_colors[i], width=3),
                    marker=dict(size=8)
                ))

                # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng
                if len(admin_data) >= 3:
                    ma_window = min(3, len(admin_data)//2)
                    if ma_window > 0:
                        ma_trend = admin_data[cat].rolling(window=ma_window, center=True).mean()
                        fig_admin.add_trace(go.Scatter(
                            x=admin_data['period'],
                            y=ma_trend,
                            mode='lines',
                            name=f'{admin_names[i]} - Xu h∆∞·ªõng',
                            line=dict(color=admin_colors[i], width=2, dash='dash'),
                            opacity=0.7,
                            showlegend=False
                        ))

        fig_admin.update_layout(
            title=f'üìã Quy ch·∫ø & Quy ƒë·ªãnh theo {period_type.lower()}',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            hovermode='x unified'
        )
        st.plotly_chart(fig_admin, use_container_width=True)
    
    # H√†ng 2: Bi·ªÉu ƒë·ªì chi ti·∫øt c√°c nh√≥m vƒÉn b·∫£n
    st.markdown("#### üìä Ph√¢n t√≠ch chi ti·∫øt theo nh√≥m vƒÉn b·∫£n")

    col1, col2 = st.columns(2)

    with col1:
        # Group data theo period
        period_data = df_chart.groupby(['period', 'period_sort']).agg({
            'total_outgoing': 'sum',
            'documents': 'sum'
        }).reset_index()
        period_data = period_data.sort_values('period_sort')

        # T·∫°o bi·ªÉu ƒë·ªì so s√°nh
        fig_compare = go.Figure()

        if 'total_outgoing' in df.columns:
            # ƒê∆∞·ªùng ch√≠nh
            fig_compare.add_trace(go.Scatter(
                x=period_data['period'],
                y=period_data['total_outgoing'],
                mode='lines+markers',
                name='T·ªïng vƒÉn b·∫£n ƒëi',
                line=dict(color='blue', width=3),
                marker=dict(size=8)
            ))

            # ƒê∆∞·ªùng xu h∆∞·ªõng
            if len(period_data) >= 3:
                ma_window = min(3, len(period_data)//2)
                if ma_window > 0:
                    ma_trend = period_data['total_outgoing'].rolling(window=ma_window, center=True).mean()
                    fig_compare.add_trace(go.Scatter(
                        x=period_data['period'],
                        y=ma_trend,
                        mode='lines',
                        name='Xu h∆∞·ªõng t·ªïng',
                        line=dict(color='blue', width=2, dash='dash'),
                        opacity=0.7,
                        showlegend=False
                    ))

        # ƒê∆∞·ªùng ch√≠nh
        fig_compare.add_trace(go.Scatter(
            x=period_data['period'],
            y=period_data['documents'],
            mode='lines+markers',
            name='VƒÉn b·∫£n ph√°t h√†nh',
            line=dict(color='orange', width=3),
            marker=dict(size=8)
        ))

        # ƒê∆∞·ªùng xu h∆∞·ªõng
        if len(period_data) >= 3:
            ma_window = min(3, len(period_data)//2)
            if ma_window > 0:
                ma_trend = period_data['documents'].rolling(window=ma_window, center=True).mean()
                fig_compare.add_trace(go.Scatter(
                    x=period_data['period'],
                    y=ma_trend,
                    mode='lines',
                    name='Xu h∆∞·ªõng ph√°t h√†nh',
                    line=dict(color='orange', width=2, dash='dash'),
                    opacity=0.7,
                    showlegend=False
                ))

        fig_compare.update_layout(
            title=f'{chart_title} (So s√°nh)',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            hovermode='x unified'
        )
        st.plotly_chart(fig_compare, use_container_width=True)

        # Bi·ªÉu ƒë·ªì ph√¢n b·ªë theo lo·∫°i vƒÉn b·∫£n theo period
        categories = ['contracts_total', 'decisions_total', 'regulations_total',
                     'rules_total', 'procedures_total', 'instruct_total']
        category_names = ['H·ª£p ƒë·ªìng', 'Quy·∫øt ƒë·ªãnh', 'Quy ch·∫ø', 'Quy ƒë·ªãnh', 'Th·ªß t·ª•c', 'H∆∞·ªõng d·∫´n']

        # Ch·ªâ l·∫•y c√°c c·ªôt c√≥ trong DataFrame
        available_categories = [col for col in categories if col in df_chart.columns]

        # T√≠nh t·ªïng c√°c lo·∫°i vƒÉn b·∫£n theo period (ch·ªâ v·ªõi c√°c c·ªôt c√≥ s·∫µn)
        if available_categories:
            category_data = df_chart.groupby(['period', 'period_sort'])[available_categories].sum().reset_index()
        else:
            # T·∫°o DataFrame r·ªóng n·∫øu kh√¥ng c√≥ c·ªôt n√†o
            category_data = df_chart.groupby(['period', 'period_sort']).size().reset_index(name='count')
        category_data = category_data.sort_values('period_sort')

        # T·∫°o stacked bar chart
        fig_stack = go.Figure()

        for i, cat in enumerate(categories):
            if cat in available_categories and cat in category_data.columns and category_data[cat].sum() > 0:
                fig_stack.add_trace(go.Bar(
                    name=category_names[i],
                    x=category_data['period'],
                    y=category_data[cat]
                ))

        fig_stack.update_layout(
            title=f'üìä Ph√¢n b·ªë lo·∫°i vƒÉn b·∫£n theo {period_type.lower()}',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            barmode='stack'
        )
        st.plotly_chart(fig_stack, use_container_width=True)

    with col2:
        # Bi·ªÉu ƒë·ªì xu h∆∞·ªõng c√°c lo·∫°i vƒÉn b·∫£n ch√≠nh theo period
        fig_trend = go.Figure()

        # Top 2 lo·∫°i vƒÉn b·∫£n ch√≠nh: H·ª£p ƒë·ªìng + Quy·∫øt ƒë·ªãnh (b·ªè quy ch·∫ø)
        top_categories = ['contracts_total', 'decisions_total']
        top_names = ['H·ª£p ƒë·ªìng', 'Quy·∫øt ƒë·ªãnh']
        colors = ['blue', 'red']

        for i, cat in enumerate(top_categories):
            if cat in df.columns and category_data[cat].sum() > 0:
                # ƒê∆∞·ªùng ch√≠nh
                fig_trend.add_trace(go.Scatter(
                    x=category_data['period'],
                    y=category_data[cat],
                    mode='lines+markers',
                    name=top_names[i],
                    line=dict(color=colors[i], width=3),
                    marker=dict(size=8)
                ))

                # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng
                if len(category_data) >= 3:
                    ma_window = min(3, len(category_data)//2)
                    if ma_window > 0:
                        ma_trend = category_data[cat].rolling(window=ma_window, center=True).mean()
                        fig_trend.add_trace(go.Scatter(
                            x=category_data['period'],
                            y=ma_trend,
                            mode='lines',
                            name=f'{top_names[i]} - Xu h∆∞·ªõng',
                            line=dict(color=colors[i], width=2, dash='dash'),
                            opacity=0.7,
                            showlegend=False
                        ))

        fig_trend.update_layout(
            title=f'üìà Xu h∆∞·ªõng vƒÉn b·∫£n ch√≠nh theo {period_type.lower()}',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            hovermode='x unified'
        )
        st.plotly_chart(fig_trend, use_container_width=True)

        # Bi·ªÉu ƒë·ªì pie t·ªïng h·ª£p
        category_totals = []
        available_names = []
        for i, cat in enumerate(categories):
            if cat in df.columns:
                total = df[cat].sum()
                if total > 0:
                    category_totals.append(total)
                    available_names.append(category_names[i])

        if category_totals:
            fig_pie = px.pie(
                values=category_totals,
                names=available_names,
                title='üìä Ph√¢n b·ªë t·ªïng h·ª£p theo lo·∫°i vƒÉn b·∫£n'
            )
            st.plotly_chart(fig_pie, use_container_width=True)

# H√†m x·ª≠ l√Ω d·ªØ li·ªáu qu·∫£n l√Ω c√¥ng vi·ªác
def process_task_management_data(uploaded_file):
    try:
        if uploaded_file.type == "application/json":
            data = json.load(uploaded_file)
            if isinstance(data, dict) and "data" in data:
                data_list = data["data"]
            else:
                data_list = data
        else:
            df_temp = pd.read_csv(uploaded_file)
            data_list = df_temp.to_dict('records')
        
        # T·∫°o DataFrame t·ª´ all_departments
        all_dept_records = []
        dept_detail_records = []
        
        for record in data_list:
            # X·ª≠ l√Ω Date -> date ƒë·ªÉ consistent v·ªõi c√°c tab kh√°c
            if 'Date' in record:
                record['date'] = record['Date']
            if 'Month' in record:
                record['month'] = record['Month'] 
            if 'Year' in record:
                record['year'] = record['Year']
            
            # T·∫°o record cho t·ªïng h·ª£p all_departments
            all_dept_data = record.get('all_departments', {})
            all_dept_record = {
                'date': record.get('date', record.get('Date', 1)),
                'month': record.get('month', record.get('Month', 1)),
                'year': record.get('year', record.get('Year', 2025)),
                'department': 'T·∫•t c·∫£ ph√≤ng ban',
                'tasks_assigned': all_dept_data.get('tasks_assigned', 0),
                'tasks_completed_on_time': all_dept_data.get('tasks_completed_on_time', 0),
                'tasks_completed_on_time_rate': all_dept_data.get('tasks_completed_on_time_rate', 0),
                'tasks_new': all_dept_data.get('tasks_new', 0),
                'tasks_new_rate': all_dept_data.get('tasks_new_rate', 0),
                'tasks_processing': all_dept_data.get('tasks_processing', 0),
                'tasks_processing_rate': all_dept_data.get('tasks_processing_rate', 0)
            }
            all_dept_records.append(all_dept_record)
            
            # T·∫°o records cho t·ª´ng ph√≤ng ban
            detail_depts = record.get('detail_departments', [])
            for dept in detail_depts:
                dept_record = {
                    'date': record.get('date', record.get('Date', 1)),
                    'month': record.get('month', record.get('Month', 1)),
                    'year': record.get('year', record.get('Year', 2025)),
                    'department': dept.get('Name', 'Kh√¥ng x√°c ƒë·ªãnh'),
                    'tasks_assigned': dept.get('tasks_assigned', 0),
                    'tasks_completed_on_time': dept.get('tasks_completed_on_time', 0),
                    'tasks_completed_on_time_rate': dept.get('tasks_completed_on_time_rate', 0),
                    'tasks_new': dept.get('tasks_new', 0),
                    'tasks_new_rate': dept.get('tasks_new_rate', 0),
                    'tasks_processing': dept.get('tasks_processing', 0),
                    'tasks_processing_rate': dept.get('tasks_processing_rate', 0)
                }
                dept_detail_records.append(dept_record)
        
        # T·∫°o DataFrame t·ªïng h·ª£p
        df_all = pd.DataFrame(all_dept_records)
        df_detail = pd.DataFrame(dept_detail_records)
        
        # T·∫°o datetime v√† week
        for df in [df_all, df_detail]:
            df['datetime'] = pd.to_datetime(df[['year', 'month', 'date']].rename(columns={'date': 'day'}))
            df['weekday'] = df['datetime'].dt.day_name()
            df['week'] = df['datetime'].dt.isocalendar().week
            
            # T√≠nh c√°c ch·ªâ s·ªë ph·ª•
            df['completion_rate'] = (df['tasks_completed_on_time'] / df['tasks_assigned'] * 100).fillna(0)
            df['processing_rate'] = (df['tasks_processing'] / df['tasks_assigned'] * 100).fillna(0)
            df['new_rate'] = (df['tasks_new'] / df['tasks_assigned'] * 100).fillna(0)
        
        return df_all, df_detail
        
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu qu·∫£n l√Ω c√¥ng vi·ªác: {str(e)}")
        return None, None

# H√†m x·ª≠ l√Ω d·ªØ li·ªáu l·ªãch h·ªçp
def process_meeting_data(uploaded_file):
    try:
        if uploaded_file.type == "application/json":
            data = json.load(uploaded_file)
            if isinstance(data, dict) and "data" in data:
                df = pd.DataFrame(data["data"])
            else:
                df = pd.DataFrame(data)
        else:
            df = pd.read_csv(uploaded_file)
        
        # Chu·∫©n h√≥a t√™n c·ªôt
        if 'Date' in df.columns:
            df['date'] = df['Date']
        if 'Month' in df.columns:
            df['month'] = df['Month']
        if 'Year' in df.columns:
            df['year'] = df['Year']
            
        # T·∫°o c·ªôt datetime
        df['datetime'] = pd.to_datetime(df[['year', 'month', 'date']].rename(columns={'date': 'day'}))
        df['weekday'] = df['datetime'].dt.day_name()
        df['weekday_vi'] = df['weekday'].map({
            'Monday': 'Th·ª© 2', 'Tuesday': 'Th·ª© 3', 'Wednesday': 'Th·ª© 4',
            'Thursday': 'Th·ª© 5', 'Friday': 'Th·ª© 6', 'Saturday': 'Th·ª© 7', 'Sunday': 'Ch·ªß nh·∫≠t'
        })
        df['week'] = df['datetime'].dt.isocalendar().week
        
        # ƒê·∫£m b·∫£o c·ªôt meeting_schedules t·ªìn t·∫°i
        if 'meeting_schedules' not in df.columns:
            df['meeting_schedules'] = 0
            
        # Ph√¢n lo·∫°i m·ª©c ƒë·ªô b·∫≠n r·ªôn
        df['meeting_level'] = df['meeting_schedules'].apply(lambda x: 
            'R·∫•t √≠t' if x <= 2 else
            '√çt' if x <= 5 else
            'Trung b√¨nh' if x <= 10 else
            'Nhi·ªÅu' if x <= 20 else
            'R·∫•t nhi·ªÅu'
        )
        
        # T√≠nh s·ªë ng√†y l√†m vi·ªác/cu·ªëi tu·∫ßn
        df['is_weekend'] = df['weekday'].isin(['Saturday', 'Sunday'])
        df['day_type'] = df['is_weekend'].map({False: 'Ng√†y l√†m vi·ªác', True: 'Cu·ªëi tu·∫ßn'})
        
        return df
    except Exception as e:
        st.error(f"L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu l·ªãch h·ªçp: {str(e)}")
        return None

# H√†m t·∫°o pivot table cho qu·∫£n l√Ω c√¥ng vi·ªác
def create_task_pivot_table(df_all, df_detail):
    st.markdown("### üìä B·∫£ng Pivot - Ph√¢n t√≠ch c√¥ng vi·ªác theo th·ªùi gian")
    
    # L·ª±a ch·ªçn m·ª©c ƒë·ªô t·ªïng h·ª£p v√† lo·∫°i d·ªØ li·ªáu
    col1, col2 = st.columns(2)
    with col1:
        period_type = st.selectbox(
            "üìÖ T·ªïng h·ª£p theo:",
            options=['Ng√†y', 'Tu·∫ßn', 'Th√°ng', 'Qu√Ω', 'NƒÉm'],
            index=1,  # M·∫∑c ƒë·ªãnh l√† Tu·∫ßn
            key="task_period"
        )
    
    with col2:
        data_type = st.selectbox(
            "üìã D·ªØ li·ªáu:",
            options=['T·ªïng h·ª£p', 'Chi ti·∫øt ph√≤ng ban'],
            index=0,
            key="task_data_type"
        )
    
    # Ch·ªçn DataFrame ph√π h·ª£p
    df = df_all if data_type == 'T·ªïng h·ª£p' else df_detail
    
    # Chu·∫©n b·ªã d·ªØ li·ªáu theo lo·∫°i period
    df_period = df.copy()
    
    if period_type == 'Tu·∫ßn':
        df_period['period'] = 'W' + df_period['week'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['week']
    elif period_type == 'Th√°ng':
        df_period['period'] = 'T' + df_period['month'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['month']
    elif period_type == 'Qu√Ω':
        df_period['quarter'] = ((df_period['month'] - 1) // 3) + 1
        df_period['period'] = 'Q' + df_period['quarter'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['quarter']
    elif period_type == 'NƒÉm':
        df_period['period'] = df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year']
    else:  # Ng√†y
        df_period['period'] = df_period['datetime'].dt.strftime('%d/%m/%Y')
        df_period['period_sort'] = df_period['datetime']
    
    # Groupby columns
    group_cols = ['period', 'period_sort']
    if data_type == 'Chi ti·∫øt ph√≤ng ban':
        group_cols.append('department')
    
    # T·∫°o pivot table
    pivot_columns = ['tasks_assigned', 'tasks_completed_on_time', 'tasks_new', 'tasks_processing']
    
    pivot_data = df_period.groupby(group_cols)[pivot_columns].sum().reset_index()
    pivot_data = pivot_data.sort_values('period_sort', ascending=False)
    
    # T√≠nh l·∫°i c√°c t·ª∑ l·ªá sau khi group
    pivot_data['completion_rate'] = (pivot_data['tasks_completed_on_time'] / pivot_data['tasks_assigned'] * 100).fillna(0)
    pivot_data['processing_rate'] = (pivot_data['tasks_processing'] / pivot_data['tasks_assigned'] * 100).fillna(0)
    pivot_data['new_rate'] = (pivot_data['tasks_new'] / pivot_data['tasks_assigned'] * 100).fillna(0)
    
    # T√≠nh to√°n bi·∫øn ƒë·ªông so v·ªõi k·ª≥ tr∆∞·ªõc
    if data_type == 'T·ªïng h·ª£p':
        for col in pivot_columns + ['completion_rate']:
            pivot_data[f'{col}_prev'] = pivot_data[col].shift(-1)
            pivot_data[f'{col}_change'] = pivot_data[col] - pivot_data[f'{col}_prev']
            if col != 'completion_rate':
                pivot_data[f'{col}_change_pct'] = ((pivot_data[col] / pivot_data[f'{col}_prev'] - 1) * 100).round(1)
            else:
                pivot_data[f'{col}_change_pct'] = (pivot_data[col] - pivot_data[f'{col}_prev']).round(1)
            pivot_data[f'{col}_change_pct'] = pivot_data[f'{col}_change_pct'].fillna(0)
    
    st.markdown(f"#### üìã T·ªïng h·ª£p theo {period_type} - {data_type}")

    if data_type == 'T·ªïng h·ª£p':
        # H√†m format cell v·ªõi bi·∫øn ƒë·ªông (gi·ªëng nh∆∞ document modules)
        def format_cell_with_change(row, col):
            current_val = row[col]
            change_val = row[f'{col}_change']
            change_pct = row[f'{col}_change_pct']
            prev_val = row[f'{col}_prev']

            if pd.isna(prev_val) or (col != 'completion_rate' and prev_val == 0):
                if col == 'completion_rate':
                    return f"{current_val:.1f}%"
                else:
                    return f"{int(current_val)}"

            if change_val > 0:
                color = "#28a745"
                arrow = "‚Üó"
                sign = "+"
            elif change_val < 0:
                color = "#dc3545"
                arrow = "‚Üò"
                sign = ""
            else:
                color = "#6c757d"
                arrow = "‚Üí"
                sign = ""

            if col == 'completion_rate':
                return f"""<div style="text-align: center; line-height: 1.2;">
                    <div style="font-size: 16px; font-weight: 600;">{current_val:.1f}%</div>
                    <div style="color: {color}; font-weight: 600; font-size: 12px; margin-top: 2px;">
                        {arrow} {sign}{change_val:.1f}%
                    </div>
                </div>"""
            else:
                return f"""<div style="text-align: center; line-height: 1.2;">
                    <div style="font-size: 16px; font-weight: 600;">{int(current_val)}</div>
                    <div style="color: {color}; font-weight: 600; font-size: 12px; margin-top: 2px;">
                        {arrow} {sign}{int(change_val)} ({change_pct:+.1f}%)
                    </div>
                </div>"""

        # T·∫°o DataFrame hi·ªÉn th·ªã v·ªõi bi·∫øn ƒë·ªông trong c√πng cell
        display_data = pivot_data.copy()
        display_columns = ['period']
        column_names = {f'period': f'{period_type}'}

        # T·∫°o c·ªôt hi·ªÉn th·ªã m·ªõi cho t·ª´ng metric
        task_columns = ['tasks_assigned', 'tasks_completed_on_time', 'tasks_new', 'tasks_processing', 'completion_rate']
        task_names = ['Giao vi·ªác', 'Ho√†n th√†nh', 'Vi·ªác m·ªõi', 'ƒêang x·ª≠ l√Ω', 'T·ª∑ l·ªá ho√†n th√†nh']

        for i, col in enumerate(task_columns):
            new_col = f'{col}_display'
            display_data[new_col] = display_data.apply(lambda row: format_cell_with_change(row, col), axis=1)
            display_columns.append(new_col)
            column_names[new_col] = task_names[i]

        # Hi·ªÉn th·ªã b·∫£ng v·ªõi HTML ƒë·ªÉ render m√†u s·∫Øc (gi·ªëng nh∆∞ document modules)
        df_display = display_data[display_columns].rename(columns=column_names)

        # T·∫°o HTML table v·ªõi sticky header (gi·ªëng h·ªát document modules)
        html_table = "<div style='max-height: 400px; overflow-y: auto; border: 1px solid #ddd;'><table style='width: 100%; border-collapse: collapse; font-size: 16px;'>"

        # Header v·ªõi sticky positioning
        html_table += "<thead><tr>"
        for col in df_display.columns:
            html_table += f"<th style='position: sticky; top: 0; padding: 15px 8px; text-align: center; background-color: #f0f2f6; font-weight: bold; font-size: 17px; border: 1px solid #ddd; z-index: 10;'>{col}</th>"
        html_table += "</tr></thead>"

        # Body
        html_table += "<tbody>"
        for _, row in df_display.iterrows():
            html_table += "<tr>"
            for i, col in enumerate(df_display.columns):
                cell_value = row[col]
                style = "padding: 12px 8px; text-align: center; border: 1px solid #ddd; vertical-align: middle;"
                if i == 0:  # Period column
                    style += " font-weight: 600; background-color: #f8f9fa;"
                html_table += f"<td style='{style}'>{cell_value}</td>"
            html_table += "</tr>"
        html_table += "</tbody></table></div>"

        st.markdown(html_table, unsafe_allow_html=True)
    else:
        # Hi·ªÉn th·ªã b√¨nh th∆∞·ªùng cho chi ti·∫øt ph√≤ng ban
        display_columns = group_cols + pivot_columns + ['completion_rate']
        rename_dict = {
            'period': f'{period_type}',
            'department': 'Ph√≤ng ban',
            'tasks_assigned': 'Giao vi·ªác',
            'tasks_completed_on_time': 'Ho√†n th√†nh ƒë√∫ng h·∫°n',
            'tasks_new': 'Vi·ªác m·ªõi',
            'tasks_processing': 'ƒêang x·ª≠ l√Ω',
            'completion_rate': 'T·ª∑ l·ªá ho√†n th√†nh (%)'
        }

        display_df = pivot_data[display_columns].copy()
        display_df['completion_rate'] = display_df['completion_rate'].round(1)
        st.dataframe(display_df.rename(columns=rename_dict), use_container_width=True)

    return period_type

# H√†m t·∫°o bi·ªÉu ƒë·ªì cho qu·∫£n l√Ω c√¥ng vi·ªác
def create_task_management_charts(df_all, df_detail, period_type='Tu·∫ßn'):
    # Chart t·ªïng s·ªë l∆∞·ª£ng c√¥ng vi·ªác theo ph√≤ng ban tr∆∞·ªõc
    if len(df_detail) > 0:
        st.markdown("#### üìä T·ªïng s·ªë l∆∞·ª£ng c√¥ng vi·ªác theo ph√≤ng ban")

        dept_summary = df_detail.groupby('department').agg({
            'tasks_assigned': 'sum',
            'tasks_completed_on_time': 'sum',
            'tasks_processing': 'sum',
            'tasks_new': 'sum'
        }).reset_index()

        # T√≠nh s·ªë c√¥ng vi·ªác ch∆∞a ho√†n th√†nh (bao g·ªìm ƒëang x·ª≠ l√Ω + m·ªõi)
        dept_summary['tasks_incomplete'] = dept_summary['tasks_processing'] + dept_summary['tasks_new']

        # S·∫Øp x·∫øp theo t·ªïng s·ªë c√¥ng vi·ªác (t·ª´ nhi·ªÅu nh·∫•t ƒë·∫øn √≠t nh·∫•t)
        dept_summary = dept_summary.sort_values('tasks_assigned', ascending=False)

        # Hi·ªÉn th·ªã t·∫•t c·∫£ ph√≤ng ban v·ªõi chi·ªÅu cao ƒë·ªông
        dept_display = dept_summary.iloc[::-1]  # Reverse ƒë·ªÉ chart hi·ªÉn th·ªã ƒë√∫ng th·ª© t·ª±

        # T·∫°o chart v·ªõi t·∫•t c·∫£ d·ªØ li·ªáu
        fig_dept_full = go.Figure()

        # Th√™m c·ªôt ho√†n th√†nh (xanh)
        fig_dept_full.add_trace(go.Bar(
            name='Ho√†n th√†nh',
            y=dept_display['department'],
            x=dept_display['tasks_completed_on_time'],
            orientation='h',
            marker_color='#28a745'
        ))

        # Th√™m c·ªôt ch∆∞a ho√†n th√†nh (ƒë·ªè)
        fig_dept_full.add_trace(go.Bar(
            name='Ch∆∞a ho√†n th√†nh',
            y=dept_display['department'],
            x=dept_display['tasks_incomplete'],
            orientation='h',
            marker_color='#dc3545'
        ))

        # C·∫•u h√¨nh layout v·ªõi chi·ªÅu cao ƒë·∫ßy ƒë·ªß ƒë·ªÉ hi·ªÉn th·ªã t·∫•t c·∫£ ph√≤ng ban
        fig_dept_full.update_layout(
            title=f'üìä T·ªïng s·ªë l∆∞·ª£ng c√¥ng vi·ªác theo ph√≤ng ban (T·∫•t c·∫£ {len(dept_summary)} ph√≤ng ban)',
            xaxis_title="S·ªë l∆∞·ª£ng",
            yaxis_title="",
            barmode='stack',
            showlegend=True,
            height=max(500, len(dept_summary) * 25 + 100),  # Dynamic height v·ªõi minimum 500px
            margin=dict(l=150, r=30, t=60, b=30)  # TƒÉng left margin ƒë·ªÉ hi·ªÉn th·ªã t√™n ph√≤ng ban d√†i
        )

        st.plotly_chart(fig_dept_full, use_container_width=True)

        # Th√™m b·∫£ng chi ti·∫øt ph√≤ng ban
        with st.expander(f"üìã Chi ti·∫øt t·∫•t c·∫£ {len(dept_summary)} ph√≤ng ban"):
            dept_display_table = dept_summary.copy()
            dept_display_table['completion_rate'] = (dept_display_table['tasks_completed_on_time'] / dept_display_table['tasks_assigned'] * 100).round(1)

            st.dataframe(
                dept_display_table[['department', 'tasks_assigned', 'tasks_completed_on_time', 'tasks_processing', 'tasks_new', 'completion_rate']].rename(columns={
                    'department': 'Ph√≤ng ban',
                    'tasks_assigned': 'T·ªïng giao vi·ªác',
                    'tasks_completed_on_time': 'Ho√†n th√†nh',
                    'tasks_processing': 'ƒêang x·ª≠ l√Ω',
                    'tasks_new': 'Vi·ªác m·ªõi',
                    'completion_rate': 'T·ª∑ l·ªá ho√†n th√†nh (%)'
                }),
                use_container_width=True
            )

        st.markdown("---")

    # Bi·ªÉu ƒë·ªì cumulative l·ªõn
    st.markdown("#### üìà Xu h∆∞·ªõng t√≠ch l≈©y t·∫•t c·∫£ c√°c c√¥ng vi·ªác")

    # S·∫Øp x·∫øp theo th·ªùi gian v√† t√≠nh cumulative
    df_all_sorted = df_all.sort_values('datetime').reset_index(drop=True)

    # T√≠nh to√°n c·ªông d·ªìn
    df_all_sorted['cumulative_assigned'] = df_all_sorted['tasks_assigned'].cumsum()
    df_all_sorted['cumulative_completed'] = df_all_sorted['tasks_completed_on_time'].cumsum()
    df_all_sorted['cumulative_processing'] = df_all_sorted['tasks_processing'].cumsum()
    df_all_sorted['cumulative_new'] = df_all_sorted['tasks_new'].cumsum()

    # Bi·ªÉu ƒë·ªì cumulative l·ªõn
    fig_cumulative = go.Figure()

    # Th√™m c√°c ƒë∆∞·ªùng cumulative
    fig_cumulative.add_trace(go.Scatter(
        x=df_all_sorted['datetime'],
        y=df_all_sorted['cumulative_assigned'],
        mode='lines+markers',
        name='üìã T·ªïng giao vi·ªác',
        line=dict(color='#1f77b4', width=4),
        marker=dict(size=10)
    ))

    fig_cumulative.add_trace(go.Scatter(
        x=df_all_sorted['datetime'],
        y=df_all_sorted['cumulative_completed'],
        mode='lines+markers',
        name='‚úÖ T·ªïng ƒë√£ ho√†n th√†nh',
        line=dict(color='#28a745', width=4),
        marker=dict(size=10)
    ))

    fig_cumulative.add_trace(go.Scatter(
        x=df_all_sorted['datetime'],
        y=df_all_sorted['cumulative_processing'],
        mode='lines+markers',
        name='üîÑ T·ªïng ƒëang x·ª≠ l√Ω',
        line=dict(color='#fd7e14', width=3),
        marker=dict(size=8)
    ))

    fig_cumulative.add_trace(go.Scatter(
        x=df_all_sorted['datetime'],
        y=df_all_sorted['cumulative_new'],
        mode='lines+markers',
        name='üÜï T·ªïng vi·ªác m·ªõi',
        line=dict(color='#dc3545', width=3),
        marker=dict(size=8)
    ))

    fig_cumulative.update_layout(
        title='üìä T√≠ch l≈©y t·∫•t c·∫£ c√¥ng vi·ªác theo th·ªùi gian',
        xaxis_title="Th·ªùi gian",
        yaxis_title="S·ªë l∆∞·ª£ng t√≠ch l≈©y",
        hovermode='x unified',
        height=500,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="center",
            x=0.5
        )
    )

    st.plotly_chart(fig_cumulative, use_container_width=True)

    st.markdown("---")

    # C√°c bi·ªÉu ƒë·ªì chi ti·∫øt
    col1, col2 = st.columns(2)

    # Chu·∫©n b·ªã d·ªØ li·ªáu theo period_type cho c·∫£ 2 c·ªôt
    df_chart = df_all.copy()

    # T·∫°o period theo l·ª±a ch·ªçn
    if period_type == 'Tu·∫ßn':
        df_chart['period'] = 'W' + df_chart['week'].astype(str) + '-' + df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['week']
        chart_title_base = 'theo tu·∫ßn'
        x_title = "Tu·∫ßn"
    elif period_type == 'Th√°ng':
        df_chart['period'] = 'T' + df_chart['month'].astype(str) + '-' + df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['month']
        chart_title_base = 'theo th√°ng'
        x_title = "Th√°ng"
    elif period_type == 'Qu√Ω':
        df_chart['quarter'] = ((df_chart['month'] - 1) // 3) + 1
        df_chart['period'] = 'Q' + df_chart['quarter'].astype(str) + '-' + df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['quarter']
        chart_title_base = 'theo qu√Ω'
        x_title = "Qu√Ω"
    elif period_type == 'NƒÉm':
        df_chart['period'] = df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year']
        chart_title_base = 'theo nƒÉm'
        x_title = "NƒÉm"
    else:  # Ng√†y
        df_chart['period'] = df_chart['datetime'].dt.strftime('%d/%m/%Y')
        df_chart['period_sort'] = df_chart['datetime']
        chart_title_base = 'theo ng√†y'
        x_title = "Ng√†y"

    # Group data theo period
    period_data = df_chart.groupby(['period', 'period_sort']).agg({
        'tasks_assigned': 'sum',
        'tasks_completed_on_time': 'sum',
        'tasks_processing': 'sum',
        'tasks_new': 'sum'
    }).reset_index()
    period_data = period_data.sort_values('period_sort')

    with col1:
        # Chart 1: Ch·ªâ hi·ªÉn th·ªã Giao vi·ªác
        fig_assigned = go.Figure()

        fig_assigned.add_trace(go.Scatter(
            x=period_data['period'],
            y=period_data['tasks_assigned'],
            mode='lines+markers',
            name='Giao vi·ªác',
            line=dict(color='#1f77b4', width=4),
            marker=dict(size=10)
        ))

        # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng cho giao vi·ªác
        if len(period_data) >= 3:
            ma_window = min(3, len(period_data)//2)
            if ma_window > 0:
                ma_trend = period_data['tasks_assigned'].rolling(window=ma_window, center=True).mean()
                fig_assigned.add_trace(go.Scatter(
                    x=period_data['period'],
                    y=ma_trend,
                    mode='lines',
                    name='Xu h∆∞·ªõng',
                    line=dict(color='#1f77b4', width=2, dash='dash'),
                    opacity=0.7,
                    showlegend=False
                ))

        fig_assigned.update_layout(
            title=f'üìã Giao vi·ªác {chart_title_base}',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            hovermode='x unified',
            height=400
        )
        st.plotly_chart(fig_assigned, use_container_width=True)

    with col2:
        # Chart 2: Ho√†n th√†nh, ƒêang x·ª≠ l√Ω, Vi·ªác m·ªõi
        fig_status = go.Figure()

        # Th√™m c√°c ƒë∆∞·ªùng cho c√°c lo·∫°i c√¥ng vi·ªác (tr·ª´ giao vi·ªác)
        status_data = [
            ('tasks_completed_on_time', 'Ho√†n th√†nh', '#28a745'),
            ('tasks_processing', 'ƒêang x·ª≠ l√Ω', '#fd7e14'),
            ('tasks_new', 'Vi·ªác m·ªõi', '#dc3545')
        ]

        for col_name, name, color in status_data:
            fig_status.add_trace(go.Scatter(
                x=period_data['period'],
                y=period_data[col_name],
                mode='lines+markers',
                name=name,
                line=dict(color=color, width=3),
                marker=dict(size=8)
            ))

            # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng
            if len(period_data) >= 3:
                ma_window = min(3, len(period_data)//2)
                if ma_window > 0:
                    ma_trend = period_data[col_name].rolling(window=ma_window, center=True).mean()
                    fig_status.add_trace(go.Scatter(
                        x=period_data['period'],
                        y=ma_trend,
                        mode='lines',
                        name=f'{name} - Xu h∆∞·ªõng',
                        line=dict(color=color, width=2, dash='dash'),
                        opacity=0.7,
                        showlegend=False
                    ))

        fig_status.update_layout(
            title=f'üìä Tr·∫°ng th√°i c√¥ng vi·ªác {chart_title_base}',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            hovermode='x unified',
            height=400
        )
        st.plotly_chart(fig_status, use_container_width=True)

    # H√†ng 2: 2 charts b·ªï sung
    st.markdown("---")
    col3, col4 = st.columns(2)

    with col3:
        # Chart 3: T·ª∑ l·ªá ho√†n th√†nh
        period_data['completion_rate'] = (period_data['tasks_completed_on_time'] / period_data['tasks_assigned'] * 100).fillna(0)

        fig_completion = go.Figure()
        fig_completion.add_trace(go.Scatter(
            x=period_data['period'],
            y=period_data['completion_rate'],
            mode='lines+markers',
            name='T·ª∑ l·ªá ho√†n th√†nh',
            line=dict(color='purple', width=3),
            marker=dict(size=8)
        ))

        # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng cho t·ª∑ l·ªá ho√†n th√†nh
        if len(period_data) >= 3:
            ma_window = min(3, len(period_data)//2)
            if ma_window > 0:
                ma_trend = period_data['completion_rate'].rolling(window=ma_window, center=True).mean()
                fig_completion.add_trace(go.Scatter(
                    x=period_data['period'],
                    y=ma_trend,
                    mode='lines',
                    name='Xu h∆∞·ªõng t·ª∑ l·ªá',
                    line=dict(color='purple', width=2, dash='dash'),
                    opacity=0.7,
                    showlegend=False
                ))

        fig_completion.update_layout(
            title=f'üìä T·ª∑ l·ªá ho√†n th√†nh {chart_title_base}',
            xaxis_title=x_title,
            yaxis_title="T·ª∑ l·ªá (%)",
            hovermode='x unified',
            height=400
        )
        st.plotly_chart(fig_completion, use_container_width=True)

    with col4:
        # Chart 4: Pie chart t·ªïng h·ª£p tr·∫°ng th√°i
        total_completed = period_data['tasks_completed_on_time'].sum()
        total_processing = period_data['tasks_processing'].sum()
        total_new = period_data['tasks_new'].sum()

        # Ch·ªâ hi·ªÉn th·ªã c√°c tr·∫°ng th√°i c√≥ gi√° tr·ªã > 0
        status_data = []
        status_values = []
        status_colors = []

        if total_completed > 0:
            status_data.append('Ho√†n th√†nh')
            status_values.append(total_completed)
            status_colors.append('#28a745')  # Xanh

        if total_processing > 0:
            status_data.append('ƒêang x·ª≠ l√Ω')
            status_values.append(total_processing)
            status_colors.append('#fd7e14')  # Cam

        if total_new > 0:
            status_data.append('Vi·ªác m·ªõi')
            status_values.append(total_new)
            status_colors.append('#dc3545')  # ƒê·ªè

        if status_values:  # Ch·ªâ v·∫Ω n·∫øu c√≥ d·ªØ li·ªáu
            fig_pie = go.Figure(data=[go.Pie(
                labels=status_data,
                values=status_values,
                hole=0.4,
                marker_colors=status_colors,
                textinfo='label+value+percent',
                textposition='auto'
            )])

            fig_pie.update_layout(
                title='üìã T·ªïng h·ª£p tr·∫°ng th√°i c√¥ng vi·ªác',
                showlegend=True,
                legend=dict(orientation="v", yanchor="middle", y=0.5),
                height=400
            )

            st.plotly_chart(fig_pie, use_container_width=True)

        else:
            st.info("üìã Kh√¥ng c√≥ d·ªØ li·ªáu tr·∫°ng th√°i c√¥ng vi·ªác")

# H√†m t·∫°o pivot table cho l·ªãch h·ªçp
def create_meeting_pivot_table(df):
    st.markdown("### üìä B·∫£ng Pivot - Ph√¢n t√≠ch l·ªãch h·ªçp theo th·ªùi gian")

    # L·ª±a ch·ªçn m·ª©c ƒë·ªô t·ªïng h·ª£p
    period_type = st.selectbox(
        "üìÖ T·ªïng h·ª£p theo:",
        options=['Ng√†y', 'Tu·∫ßn', 'Th√°ng', 'Qu√Ω', 'NƒÉm'],
        index=1,  # M·∫∑c ƒë·ªãnh l√† Tu·∫ßn
        key="meeting_period"
    )

    # Chu·∫©n b·ªã d·ªØ li·ªáu theo lo·∫°i period
    df_period = df.copy()

    if period_type == 'Tu·∫ßn':
        df_period['period'] = 'W' + df_period['week'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['week']
    elif period_type == 'Th√°ng':
        df_period['period'] = 'T' + df_period['month'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['month']
    elif period_type == 'Qu√Ω':
        df_period['quarter'] = ((df_period['month'] - 1) // 3) + 1
        df_period['period'] = 'Q' + df_period['quarter'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['quarter']
    elif period_type == 'NƒÉm':
        df_period['period'] = df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year']
    else:  # Ng√†y
        df_period['period'] = df_period['datetime'].dt.strftime('%d/%m/%Y')
        df_period['period_sort'] = df_period['datetime']

    # T·∫°o pivot table cho meeting data
    pivot_columns = ['meeting_schedules']

    pivot_data = df_period.groupby(['period', 'period_sort'])[pivot_columns].sum().reset_index()
    pivot_data = pivot_data.sort_values('period_sort', ascending=False)

    # T√≠nh t·ª∑ l·ªá ng√†y b·∫≠n r·ªôn (>5 cu·ªôc h·ªçp)
    busy_days = df_period.groupby(['period', 'period_sort']).apply(
        lambda x: (x['meeting_schedules'] > 5).sum()
    ).reset_index(name='busy_days')

    total_days = df_period.groupby(['period', 'period_sort']).size().reset_index(name='total_days')

    pivot_data = pivot_data.merge(busy_days, on=['period', 'period_sort'])
    pivot_data = pivot_data.merge(total_days, on=['period', 'period_sort'])

    pivot_data['busy_rate'] = (pivot_data['busy_days'] / pivot_data['total_days'] * 100).fillna(0)

    # T√≠nh to√°n bi·∫øn ƒë·ªông so v·ªõi k·ª≥ tr∆∞·ªõc
    for col in ['meeting_schedules', 'busy_days', 'busy_rate']:
        pivot_data[f'{col}_prev'] = pivot_data[col].shift(-1)
        pivot_data[f'{col}_change'] = pivot_data[col] - pivot_data[f'{col}_prev']
        if col not in ['busy_rate']:
            pivot_data[f'{col}_change_pct'] = ((pivot_data[col] / pivot_data[f'{col}_prev'] - 1) * 100).round(1)
        else:
            pivot_data[f'{col}_change_pct'] = (pivot_data[col] - pivot_data[f'{col}_prev']).round(1)
        pivot_data[f'{col}_change_pct'] = pivot_data[f'{col}_change_pct'].fillna(0)

    st.markdown(f"#### üìã T·ªïng h·ª£p theo {period_type}")

    # H√†m format cell v·ªõi bi·∫øn ƒë·ªông (gi·ªëng nh∆∞ task management)
    def format_cell_with_change(row, col):
        current_val = row[col]
        change_val = row[f'{col}_change']
        change_pct = row[f'{col}_change_pct']
        prev_val = row[f'{col}_prev']

        if pd.isna(prev_val) or (col not in ['busy_rate'] and prev_val == 0):
            if col == 'busy_rate':
                return f"{current_val:.1f}%"
            else:
                return f"{int(current_val)}"

        if change_val > 0:
            color = "#28a745"
            arrow = "‚Üó"
            sign = "+"
        elif change_val < 0:
            color = "#dc3545"
            arrow = "‚Üò"
            sign = ""
        else:
            color = "#6c757d"
            arrow = "‚Üí"
            sign = ""

        if col == 'busy_rate':
            return f"""<div style="text-align: center; line-height: 1.2;">
                <div style="font-size: 16px; font-weight: 600;">{current_val:.1f}%</div>
                <div style="color: {color}; font-weight: 600; font-size: 12px; margin-top: 2px;">
                    {arrow} {sign}{change_val:.1f}%
                </div>
            </div>"""
        else:
            return f"""<div style="text-align: center; line-height: 1.2;">
                <div style="font-size: 16px; font-weight: 600;">{int(current_val)}</div>
                <div style="color: {color}; font-weight: 600; font-size: 12px; margin-top: 2px;">
                    {arrow} {sign}{int(change_val)} ({change_pct:+.1f}%)
                </div>
            </div>"""

    # T·∫°o DataFrame hi·ªÉn th·ªã v·ªõi bi·∫øn ƒë·ªông trong c√πng cell
    display_data = pivot_data.copy()
    display_columns = ['period']
    column_names = {f'period': f'{period_type}'}

    # T·∫°o c·ªôt hi·ªÉn th·ªã m·ªõi cho t·ª´ng metric
    meeting_columns = ['meeting_schedules', 'busy_days', 'busy_rate']
    meeting_names = ['T·ªïng cu·ªôc h·ªçp', 'Ng√†y b·∫≠n r·ªôn', 'T·ª∑ l·ªá ng√†y b·∫≠n (%)']

    for i, col in enumerate(meeting_columns):
        new_col = f'{col}_display'
        display_data[new_col] = display_data.apply(lambda row: format_cell_with_change(row, col), axis=1)
        display_columns.append(new_col)
        column_names[new_col] = meeting_names[i]

    # Hi·ªÉn th·ªã b·∫£ng v·ªõi HTML ƒë·ªÉ render m√†u s·∫Øc (gi·ªëng nh∆∞ task management)
    df_display = display_data[display_columns].rename(columns=column_names)

    # T·∫°o HTML table v·ªõi sticky header (gi·ªëng h·ªát task management)
    html_table = "<div style='max-height: 400px; overflow-y: auto; border: 1px solid #ddd;'><table style='width: 100%; border-collapse: collapse; font-size: 16px;'>"

    # Header v·ªõi sticky positioning
    html_table += "<thead><tr>"
    for col in df_display.columns:
        html_table += f"<th style='position: sticky; top: 0; padding: 15px 8px; text-align: center; background-color: #f0f2f6; font-weight: bold; font-size: 17px; border: 1px solid #ddd; z-index: 10;'>{col}</th>"
    html_table += "</tr></thead>"

    # Body
    html_table += "<tbody>"
    for _, row in df_display.iterrows():
        html_table += "<tr>"
        for i, col in enumerate(df_display.columns):
            cell_value = row[col]
            style = "padding: 12px 8px; text-align: center; border: 1px solid #ddd; vertical-align: middle;"
            if i == 0:  # Period column
                style += " font-weight: 600; background-color: #f8f9fa;"
            html_table += f"<td style='{style}'>{cell_value}</td>"
        html_table += "</tr>"
    html_table += "</tbody></table></div>"

    st.markdown(html_table, unsafe_allow_html=True)

    return period_type

# H√†m t·∫°o pivot table cho qu·∫£n l√Ω ph√≤ng h·ªçp
def create_room_pivot_table(df):
    st.markdown("### üìä B·∫£ng Pivot - Ph√¢n t√≠ch ƒëƒÉng k√Ω ph√≤ng h·ªçp theo th·ªùi gian")

    # L·ª±a ch·ªçn m·ª©c ƒë·ªô t·ªïng h·ª£p
    period_type = st.selectbox(
        "üìÖ T·ªïng h·ª£p theo:",
        options=['Ng√†y', 'Tu·∫ßn', 'Th√°ng', 'Qu√Ω', 'NƒÉm'],
        index=1,  # M·∫∑c ƒë·ªãnh l√† Tu·∫ßn
        key="room_period"
    )

    # Chu·∫©n b·ªã d·ªØ li·ªáu theo lo·∫°i period
    df_period = df.copy()
    df_period['year'] = df_period['datetime'].dt.year
    df_period['month'] = df_period['datetime'].dt.month
    df_period['week'] = df_period['datetime'].dt.isocalendar().week

    if period_type == 'Tu·∫ßn':
        df_period['period'] = 'W' + df_period['week'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['week']
    elif period_type == 'Th√°ng':
        df_period['period'] = 'T' + df_period['month'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['month']
    elif period_type == 'Qu√Ω':
        df_period['quarter'] = ((df_period['month'] - 1) // 3) + 1
        df_period['period'] = 'Q' + df_period['quarter'].astype(str) + '-' + df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year'] * 100 + df_period['quarter']
    elif period_type == 'NƒÉm':
        df_period['period'] = df_period['year'].astype(str)
        df_period['period_sort'] = df_period['year']
    else:  # Ng√†y
        df_period['period'] = df_period['datetime'].dt.strftime('%d/%m/%Y')
        df_period['period_sort'] = df_period['datetime']

    # T·∫°o pivot table cho room data
    pivot_data = df_period.groupby(['period', 'period_sort']).agg({
        'register_room': 'sum',
        'register_room_cancel': 'sum',
        'net_bookings': 'sum'
    }).reset_index()
    pivot_data = pivot_data.sort_values('period_sort', ascending=False)

    # T√≠nh t·ª∑ l·ªá h·ªßy
    pivot_data['cancel_rate'] = (pivot_data['register_room_cancel'] / pivot_data['register_room'] * 100).fillna(0)

    # T√≠nh to√°n bi·∫øn ƒë·ªông so v·ªõi k·ª≥ tr∆∞·ªõc
    for col in ['register_room', 'register_room_cancel', 'net_bookings', 'cancel_rate']:
        pivot_data[f'{col}_prev'] = pivot_data[col].shift(-1)
        pivot_data[f'{col}_change'] = pivot_data[col] - pivot_data[f'{col}_prev']
        if col not in ['cancel_rate']:
            pivot_data[f'{col}_change_pct'] = ((pivot_data[col] / pivot_data[f'{col}_prev'] - 1) * 100).round(1)
        else:
            pivot_data[f'{col}_change_pct'] = (pivot_data[col] - pivot_data[f'{col}_prev']).round(1)
        pivot_data[f'{col}_change_pct'] = pivot_data[f'{col}_change_pct'].fillna(0)

    st.markdown(f"#### üìã T·ªïng h·ª£p theo {period_type}")

    # H√†m format cell v·ªõi bi·∫øn ƒë·ªông
    def format_cell_with_change(row, col):
        current_val = row[col]
        change_val = row[f'{col}_change']
        change_pct = row[f'{col}_change_pct']
        prev_val = row[f'{col}_prev']

        if pd.isna(prev_val) or (col not in ['cancel_rate'] and prev_val == 0):
            if col == 'cancel_rate':
                return f"{current_val:.1f}%"
            else:
                return f"{int(current_val)}"

        if change_val > 0:
            color = "#28a745"
            arrow = "‚Üó"
            sign = "+"
        elif change_val < 0:
            color = "#dc3545"
            arrow = "‚Üò"
            sign = ""
        else:
            color = "#6c757d"
            arrow = "‚Üí"
            sign = ""

        if col == 'cancel_rate':
            return f"""<div style="text-align: center; line-height: 1.2;">
                <div style="font-size: 16px; font-weight: 600;">{current_val:.1f}%</div>
                <div style="color: {color}; font-weight: 600; font-size: 12px; margin-top: 2px;">
                    {arrow} {sign}{change_val:.1f}%
                </div>
            </div>"""
        else:
            return f"""<div style="text-align: center; line-height: 1.2;">
                <div style="font-size: 16px; font-weight: 600;">{int(current_val)}</div>
                <div style="color: {color}; font-weight: 600; font-size: 12px; margin-top: 2px;">
                    {arrow} {sign}{int(change_val)} ({change_pct:+.1f}%)
                </div>
            </div>"""

    # T·∫°o DataFrame hi·ªÉn th·ªã v·ªõi bi·∫øn ƒë·ªông trong c√πng cell
    display_data = pivot_data.copy()
    display_columns = ['period']
    column_names = {f'period': f'{period_type}'}

    # T·∫°o c·ªôt hi·ªÉn th·ªã m·ªõi cho t·ª´ng metric
    room_columns = ['register_room', 'register_room_cancel', 'net_bookings', 'cancel_rate']
    room_names = ['T·ªïng ƒëƒÉng k√Ω', 'T·ªïng h·ªßy', 'ƒêƒÉng k√Ω th·ª±c', 'T·ª∑ l·ªá h·ªßy (%)']

    for i, col in enumerate(room_columns):
        new_col = f'{col}_display'
        display_data[new_col] = display_data.apply(lambda row: format_cell_with_change(row, col), axis=1)
        display_columns.append(new_col)
        column_names[new_col] = room_names[i]

    # Hi·ªÉn th·ªã b·∫£ng v·ªõi HTML ƒë·ªÉ render m√†u s·∫Øc
    df_display = display_data[display_columns].rename(columns=column_names)

    # T·∫°o HTML table v·ªõi sticky header
    html_table = "<div style='max-height: 400px; overflow-y: auto; border: 1px solid #ddd;'><table style='width: 100%; border-collapse: collapse; font-size: 16px;'>"

    # Header v·ªõi sticky positioning
    html_table += "<thead><tr>"
    for col in df_display.columns:
        html_table += f"<th style='position: sticky; top: 0; padding: 15px 8px; text-align: center; background-color: #f0f2f6; font-weight: bold; font-size: 17px; border: 1px solid #ddd; z-index: 10;'>{col}</th>"
    html_table += "</tr></thead>"

    # Body
    html_table += "<tbody>"
    for _, row in df_display.iterrows():
        html_table += "<tr>"
        for i, col in enumerate(df_display.columns):
            cell_value = row[col]
            style = "padding: 12px 8px; text-align: center; border: 1px solid #ddd; vertical-align: middle;"
            if i == 0:  # Period column
                style += " font-weight: 600; background-color: #f8f9fa;"
            html_table += f"<td style='{style}'>{cell_value}</td>"
        html_table += "</tr>"
    html_table += "</tbody></table></div>"

    st.markdown(html_table, unsafe_allow_html=True)

    return period_type

# H√†m t·∫°o bi·ªÉu ƒë·ªì cho qu·∫£n l√Ω ph√≤ng h·ªçp
def create_room_charts(df, period_type='Tu·∫ßn'):
    # C√°c bi·ªÉu ƒë·ªì chi ti·∫øt
    col1, col2 = st.columns(2)
    # Chu·∫©n b·ªã d·ªØ li·ªáu theo period_type
    df_chart = df.copy()

    # Th√™m c√°c c·ªôt c·∫ßn thi·∫øt
    df_chart['year'] = df_chart['datetime'].dt.year
    df_chart['month'] = df_chart['datetime'].dt.month
    df_chart['week'] = df_chart['datetime'].dt.isocalendar().week

    # T·∫°o period theo l·ª±a ch·ªçn
    if period_type == 'Tu·∫ßn':
        df_chart['period'] = 'W' + df_chart['week'].astype(str) + '-' + df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['week']
        chart_title_base = 'theo tu·∫ßn'
        x_title = "Tu·∫ßn"
    elif period_type == 'Th√°ng':
        df_chart['period'] = 'T' + df_chart['month'].astype(str) + '-' + df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['month']
        chart_title_base = 'theo th√°ng'
        x_title = "Th√°ng"
    elif period_type == 'Qu√Ω':
        df_chart['quarter'] = ((df_chart['month'] - 1) // 3) + 1
        df_chart['period'] = 'Q' + df_chart['quarter'].astype(str) + '-' + df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['quarter']
        chart_title_base = 'theo qu√Ω'
        x_title = "Qu√Ω"
    elif period_type == 'NƒÉm':
        df_chart['period'] = df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year']
        chart_title_base = 'theo nƒÉm'
        x_title = "NƒÉm"
    else:  # Ng√†y
        df_chart['period'] = df_chart['datetime'].dt.strftime('%d/%m/%Y')
        df_chart['period_sort'] = df_chart['datetime']
        chart_title_base = 'theo ng√†y'
        x_title = "Ng√†y"

    # Group data theo period
    period_data = df_chart.groupby(['period', 'period_sort']).agg({
        'register_room': 'sum',
        'register_room_cancel': 'sum',
        'net_bookings': 'sum'
    }).reset_index()
    period_data = period_data.sort_values('period_sort')
    period_data['cancel_rate'] = (period_data['register_room_cancel'] / period_data['register_room'] * 100).fillna(0)

    with col1:
        # Chart 1: ƒêƒÉng k√Ω ph√≤ng theo period
        fig_bookings = go.Figure()

        fig_bookings.add_trace(go.Scatter(
            x=period_data['period'],
            y=period_data['register_room'],
            mode='lines+markers',
            name='ƒêƒÉng k√Ω',
            line=dict(color='#007bff', width=4),
            marker=dict(size=10)
        ))

        # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng
        if len(period_data) >= 3:
            ma_window = min(3, len(period_data)//2)
            if ma_window > 0:
                ma_trend = period_data['register_room'].rolling(window=ma_window, center=True).mean()
                fig_bookings.add_trace(go.Scatter(
                    x=period_data['period'],
                    y=ma_trend,
                    mode='lines',
                    name='Xu h∆∞·ªõng',
                    line=dict(color='#007bff', width=2, dash='dash'),
                    opacity=0.7,
                    showlegend=False
                ))

        fig_bookings.update_layout(
            title=f'üè¢ ƒêƒÉng k√Ω ph√≤ng {chart_title_base}',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            hovermode='x unified',
            height=400
        )
        st.plotly_chart(fig_bookings, use_container_width=True)

    with col2:
        # Chart 2: So s√°nh ƒëƒÉng k√Ω vs h·ªßy
        fig_compare = go.Figure()

        fig_compare.add_trace(go.Bar(
            x=period_data['period'],
            y=period_data['register_room'],
            name='ƒêƒÉng k√Ω',
            marker_color='#28a745'
        ))

        fig_compare.add_trace(go.Bar(
            x=period_data['period'],
            y=period_data['register_room_cancel'],
            name='H·ªßy b·ªè',
            marker_color='#dc3545'
        ))

        fig_compare.update_layout(
            title=f'üìä So s√°nh ƒëƒÉng k√Ω vs h·ªßy {chart_title_base}',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            barmode='group',
            height=400
        )
        st.plotly_chart(fig_compare, use_container_width=True)

    # H√†ng 2: 2 charts b·ªï sung
    st.markdown("---")
    col3, col4 = st.columns(2)

    with col3:
        # Chart 3: T·ª∑ l·ªá h·ªßy theo period
        fig_cancel_rate = go.Figure()

        fig_cancel_rate.add_trace(go.Scatter(
            x=period_data['period'],
            y=period_data['cancel_rate'],
            mode='lines+markers',
            name='T·ª∑ l·ªá h·ªßy',
            line=dict(color='#ffc107', width=4),
            marker=dict(size=10)
        ))

        # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng
        if len(period_data) >= 3:
            ma_window = min(3, len(period_data)//2)
            if ma_window > 0:
                ma_trend_cancel = period_data['cancel_rate'].rolling(window=ma_window, center=True).mean()
                fig_cancel_rate.add_trace(go.Scatter(
                    x=period_data['period'],
                    y=ma_trend_cancel,
                    mode='lines',
                    name='Xu h∆∞·ªõng',
                    line=dict(color='#ffc107', width=2, dash='dash'),
                    opacity=0.7,
                    showlegend=False
                ))

        fig_cancel_rate.update_layout(
            title=f'üìâ T·ª∑ l·ªá h·ªßy {chart_title_base}',
            xaxis_title=x_title,
            yaxis_title="T·ª∑ l·ªá (%)",
            hovermode='x unified',
            height=400
        )
        st.plotly_chart(fig_cancel_rate, use_container_width=True)

    with col4:
        # Chart 4: Ph√¢n b·ªë theo ng√†y trong tu·∫ßn
        weekday_summary = df.groupby('weekday_vi').agg({
            'register_room': 'sum',
            'register_room_cancel': 'sum'
        }).reindex([
            'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7', 'Ch·ªß nh·∫≠t'
        ]).fillna(0)

        fig_weekday = go.Figure()

        fig_weekday.add_trace(go.Bar(
            name='ƒêƒÉng k√Ω',
            x=weekday_summary.index,
            y=weekday_summary['register_room'],
            marker_color='#007bff'
        ))

        fig_weekday.add_trace(go.Bar(
            name='H·ªßy b·ªè',
            x=weekday_summary.index,
            y=weekday_summary['register_room_cancel'],
            marker_color='#dc3545'
        ))

        fig_weekday.update_layout(
            title='üìÖ Ph√¢n b·ªë theo ng√†y trong tu·∫ßn',
            xaxis_title="Ng√†y trong tu·∫ßn",
            yaxis_title="S·ªë l∆∞·ª£ng",
            barmode='group',
            height=400
        )
        st.plotly_chart(fig_weekday, use_container_width=True)

# H√†m t·∫°o bi·ªÉu ƒë·ªì cho l·ªãch h·ªçp
def create_meeting_charts(df, period_type='Tu·∫ßn'):

    # C√°c bi·ªÉu ƒë·ªì chi ti·∫øt
    col1, col2 = st.columns(2)
    # Chu·∫©n b·ªã d·ªØ li·ªáu theo period_type
    df_chart = df.copy()

    # T·∫°o period theo l·ª±a ch·ªçn
    if period_type == 'Tu·∫ßn':
        df_chart['period'] = 'W' + df_chart['week'].astype(str) + '-' + df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['week']
        chart_title_base = 'theo tu·∫ßn'
        x_title = "Tu·∫ßn"
    elif period_type == 'Th√°ng':
        df_chart['period'] = 'T' + df_chart['month'].astype(str) + '-' + df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['month']
        chart_title_base = 'theo th√°ng'
        x_title = "Th√°ng"
    elif period_type == 'Qu√Ω':
        df_chart['quarter'] = ((df_chart['month'] - 1) // 3) + 1
        df_chart['period'] = 'Q' + df_chart['quarter'].astype(str) + '-' + df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['quarter']
        chart_title_base = 'theo qu√Ω'
        x_title = "Qu√Ω"
    elif period_type == 'NƒÉm':
        df_chart['period'] = df_chart['year'].astype(str)
        df_chart['period_sort'] = df_chart['year']
        chart_title_base = 'theo nƒÉm'
        x_title = "NƒÉm"
    else:  # Ng√†y
        df_chart['period'] = df_chart['datetime'].dt.strftime('%d/%m/%Y')
        df_chart['period_sort'] = df_chart['datetime']
        chart_title_base = 'theo ng√†y'
        x_title = "Ng√†y"

    # Group data theo period
    period_data = df_chart.groupby(['period', 'period_sort']).agg({
        'meeting_schedules': 'sum'
    }).reset_index()
    period_data = period_data.sort_values('period_sort')

    with col1:
        # Chart 1: Cu·ªôc h·ªçp theo period
        fig_meetings = go.Figure()

        fig_meetings.add_trace(go.Scatter(
            x=period_data['period'],
            y=period_data['meeting_schedules'],
            mode='lines+markers',
            name='Cu·ªôc h·ªçp',
            line=dict(color='#007bff', width=4),
            marker=dict(size=10)
        ))

        # Th√™m ƒë∆∞·ªùng xu h∆∞·ªõng
        if len(period_data) >= 3:
            ma_window = min(3, len(period_data)//2)
            if ma_window > 0:
                ma_trend = period_data['meeting_schedules'].rolling(window=ma_window, center=True).mean()
                fig_meetings.add_trace(go.Scatter(
                    x=period_data['period'],
                    y=ma_trend,
                    mode='lines',
                    name='Xu h∆∞·ªõng',
                    line=dict(color='#007bff', width=2, dash='dash'),
                    opacity=0.7,
                    showlegend=False
                ))

        fig_meetings.update_layout(
            title=f'üìÖ Cu·ªôc h·ªçp {chart_title_base}',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng",
            hovermode='x unified',
            height=400
        )
        st.plotly_chart(fig_meetings, use_container_width=True)

    with col2:
        # Chart 2: Ph√¢n b·ªë theo ng√†y trong tu·∫ßn
        weekday_summary = df.groupby('weekday_vi')['meeting_schedules'].sum().reindex([
            'Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7', 'Ch·ªß nh·∫≠t'
        ]).fillna(0)

        colors = ['#28a745' if day in ['Th·ª© 7', 'Ch·ªß nh·∫≠t'] else '#007bff' for day in weekday_summary.index]

        fig_weekday = px.bar(
            x=weekday_summary.index,
            y=weekday_summary.values,
            title='üìÖ Ph√¢n b·ªë cu·ªôc h·ªçp theo ng√†y trong tu·∫ßn',
            color=weekday_summary.index,
            color_discrete_sequence=colors
        )
        fig_weekday.update_layout(
            xaxis_title="Ng√†y trong tu·∫ßn",
            yaxis_title="T·ªïng s·ªë cu·ªôc h·ªçp",
            showlegend=False,
            height=400
        )
        st.plotly_chart(fig_weekday, use_container_width=True)

    # H√†ng 2: 2 charts b·ªï sung
    st.markdown("---")
    col3, col4 = st.columns(2)

    with col3:
        # Chart 3: M·ª©c ƒë·ªô b·∫≠n r·ªôn
        level_counts = df['meeting_level'].value_counts()
        level_order = ['R·∫•t √≠t', '√çt', 'Trung b√¨nh', 'Nhi·ªÅu', 'R·∫•t nhi·ªÅu']
        level_counts = level_counts.reindex(level_order).fillna(0)

        colors_level = {'R·∫•t √≠t': '#28a745', '√çt': '#6c757d', 'Trung b√¨nh': '#ffc107',
                       'Nhi·ªÅu': '#fd7e14', 'R·∫•t nhi·ªÅu': '#dc3545'}

        fig_level = px.pie(
            values=level_counts.values,
            names=level_counts.index,
            title='üìä Ph√¢n b·ªë m·ª©c ƒë·ªô b·∫≠n r·ªôn',
            color=level_counts.index,
            color_discrete_map=colors_level,
            hole=0.4
        )
        fig_level.update_layout(height=400)
        st.plotly_chart(fig_level, use_container_width=True)

    with col4:
        # Chart 4: So s√°nh ng√†y l√†m vi·ªác vs cu·ªëi tu·∫ßn
        day_type_summary = df.groupby('day_type')['meeting_schedules'].agg(['count', 'sum', 'mean']).round(1)

        fig_daytype = go.Figure()
        fig_daytype.add_trace(go.Bar(
            name='S·ªë ng√†y',
            x=day_type_summary.index,
            y=day_type_summary['count'],
            marker_color='lightblue'
        ))
        fig_daytype.add_trace(go.Bar(
            name='T·ªïng cu·ªôc h·ªçp',
            x=day_type_summary.index,
            y=day_type_summary['sum'],
            marker_color='darkblue'
        ))

        fig_daytype.update_layout(
            title='üìä So s√°nh ng√†y l√†m vi·ªác vs cu·ªëi tu·∫ßn',
            xaxis_title="Lo·∫°i ng√†y",
            yaxis_title="S·ªë l∆∞·ª£ng",
            barmode='group',
            height=400
        )
        st.plotly_chart(fig_daytype, use_container_width=True)

# H√†m t·∫°o bi·ªÉu ƒë·ªì cho vƒÉn b·∫£n ƒë·∫øn
def create_incoming_docs_charts(df, period_type='Tu·∫ßn'):
    col1, col2 = st.columns(2)
    
    with col1:
        # Bi·ªÉu ƒë·ªì theo period_type ƒë∆∞·ª£c ch·ªçn
        df_chart = df.copy()

        # T·∫°o period theo l·ª±a ch·ªçn
        if period_type == 'Tu·∫ßn':
            df_chart['period'] = 'W' + df_chart['week'].astype(str) + '-' + df_chart['year'].astype(str)
            df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['week']
            chart_title = 'üìà S·ªë l∆∞·ª£ng vƒÉn b·∫£n ƒë·∫øn theo tu·∫ßn'
            x_title = "Tu·∫ßn"
        elif period_type == 'Th√°ng':
            df_chart['period'] = 'T' + df_chart['month'].astype(str) + '-' + df_chart['year'].astype(str)
            df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['month']
            chart_title = 'üìà S·ªë l∆∞·ª£ng vƒÉn b·∫£n ƒë·∫øn theo th√°ng'
            x_title = "Th√°ng"
        elif period_type == 'Qu√Ω':
            df_chart['quarter'] = ((df_chart['month'] - 1) // 3) + 1
            df_chart['period'] = 'Q' + df_chart['quarter'].astype(str) + '-' + df_chart['year'].astype(str)
            df_chart['period_sort'] = df_chart['year'] * 100 + df_chart['quarter']
            chart_title = 'üìà S·ªë l∆∞·ª£ng vƒÉn b·∫£n ƒë·∫øn theo qu√Ω'
            x_title = "Qu√Ω"
        elif period_type == 'NƒÉm':
            df_chart['period'] = df_chart['year'].astype(str)
            df_chart['period_sort'] = df_chart['year']
            chart_title = 'üìà S·ªë l∆∞·ª£ng vƒÉn b·∫£n ƒë·∫øn theo nƒÉm'
            x_title = "NƒÉm"
        else:  # Ng√†y
            df_chart['period'] = df_chart['datetime'].dt.strftime('%d/%m/%Y')
            df_chart['period_sort'] = df_chart['datetime']
            chart_title = 'üìà S·ªë l∆∞·ª£ng vƒÉn b·∫£n ƒë·∫øn theo ng√†y'
            x_title = "Ng√†y"

        # Group data theo period
        period_data = df_chart.groupby(['period', 'period_sort'])['total_incoming'].sum().reset_index()
        period_data = period_data.sort_values('period_sort')

        # T·∫°o bi·ªÉu ƒë·ªì
        fig_period = go.Figure()

        # ƒê∆∞·ªùng bi·ªÉu ƒë·ªì ch√≠nh
        fig_period.add_trace(go.Scatter(
            x=period_data['period'],
            y=period_data['total_incoming'],
            mode='lines+markers',
            name='VƒÉn b·∫£n ƒë·∫øn',
            line=dict(color='#1f77b4', width=2),
            marker=dict(size=8)
        ))

        # ƒê∆∞·ªùng xu h∆∞·ªõng (n·∫øu ƒë·ªß d·ªØ li·ªáu)
        if len(period_data) >= 3:
            ma_window = min(3, len(period_data)//2)
            ma_trend = period_data['total_incoming'].rolling(window=ma_window, center=True).mean()
            fig_period.add_trace(go.Scatter(
                x=period_data['period'],
                y=ma_trend,
                mode='lines',
                name=f'Xu h∆∞·ªõng ({ma_window} {period_type.lower()})',
                line=dict(color='red', width=3, dash='dash'),
                opacity=0.8
            ))

        fig_period.update_layout(
            title=f'{chart_title} (c√≥ xu h∆∞·ªõng)',
            xaxis_title=x_title,
            yaxis_title="S·ªë l∆∞·ª£ng vƒÉn b·∫£n",
            hovermode='x unified'
        )
        st.plotly_chart(fig_period, use_container_width=True)
        
        # Bi·ªÉu ƒë·ªì t·ª∑ l·ªá x·ª≠ l√Ω ƒë√∫ng h·∫°n vs tr·ªÖ h·∫°n theo period_type
        # T√≠nh l·∫°i processed data theo period
        processed_summary = df_chart.groupby(['period', 'period_sort']).agg({
            'processed_on_time': 'sum',
            'processed_late': 'sum'
        }).reset_index()
        processed_summary = processed_summary.sort_values('period_sort')

        fig_processed = go.Figure()
        fig_processed.add_trace(go.Scatter(x=processed_summary['period'],
                                         y=processed_summary['processed_on_time'],
                                         mode='lines', name='ƒê√∫ng h·∫°n',
                                         line=dict(color='green')))
        fig_processed.add_trace(go.Scatter(x=processed_summary['period'],
                                         y=processed_summary['processed_late'],
                                         mode='lines', name='Tr·ªÖ h·∫°n',
                                         line=dict(color='red')))
        fig_processed.update_layout(title=f'‚è∞ T√¨nh h√¨nh x·ª≠ l√Ω vƒÉn b·∫£n theo {period_type.lower()}',
                                  xaxis_title=x_title, yaxis_title="S·ªë l∆∞·ª£ng")
        st.plotly_chart(fig_processed, use_container_width=True)
    
    with col2:
        # Bi·ªÉu ƒë·ªì ph√¢n b·ªë theo ƒë∆°n v·ªã g·ª≠i
        def extract_sender_name(x):
            try:
                if isinstance(x, dict):
                    return x.get('send_name', 'Kh√°c')
                elif isinstance(x, str):
                    import json
                    parsed = json.loads(x)
                    return parsed.get('send_name', 'Kh√°c')
                else:
                    return 'Kh√°c'
            except:
                return 'Kh√°c'

        sender_data = df['total_incoming_detail'].apply(extract_sender_name).value_counts()
        fig_sender = px.pie(values=sender_data.values, names=sender_data.index,
                           title='üèõÔ∏è Ph√¢n b·ªë theo ƒë∆°n v·ªã g·ª≠i')
        st.plotly_chart(fig_sender, use_container_width=True)

        # Bi·ªÉu ƒë·ªì top ƒë∆°n v·ªã g·ª≠i theo period_type
        try:
            # T·∫°o DataFrame v·ªõi sender cho t·ª´ng period
            df_chart['sender'] = df_chart['total_incoming_detail'].apply(extract_sender_name)

            # T√¨m top 5 senders t·ªïng th·ªÉ
            top_senders = df_chart['sender'].value_counts().head(5).index.tolist()

            if len(top_senders) > 0:
                fig_sender_trend = go.Figure()

                for sender in top_senders:
                    # ƒê·∫øm s·ªë vƒÉn b·∫£n t·ª´ sender n√†y theo period
                    sender_data = df_chart[df_chart['sender'] == sender].groupby(['period', 'period_sort']).size().reset_index(name='count')
                    sender_data = sender_data.sort_values('period_sort')

                    # ƒê·∫£m b·∫£o t·∫•t c·∫£ periods ƒë·ªÅu c√≥ d·ªØ li·ªáu (fill missing v·ªõi 0)
                    all_periods = period_data[['period', 'period_sort']].drop_duplicates()
                    sender_data = all_periods.merge(sender_data, on=['period', 'period_sort'], how='left')
                    sender_data['count'] = sender_data['count'].fillna(0)

                    fig_sender_trend.add_trace(go.Bar(
                        name=sender,
                        x=sender_data['period'],
                        y=sender_data['count']
                    ))

                fig_sender_trend.update_layout(
                    title=f'üìä Top 5 ƒë∆°n v·ªã g·ª≠i theo {period_type.lower()}',
                    xaxis_title=x_title,
                    yaxis_title="S·ªë l∆∞·ª£ng vƒÉn b·∫£n",
                    barmode='stack'
                )
                st.plotly_chart(fig_sender_trend, use_container_width=True)
            else:
                st.info(f"Kh√¥ng c√≥ d·ªØ li·ªáu ƒë∆°n v·ªã g·ª≠i theo {period_type.lower()}")
        except Exception as e:
            st.error(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì ƒë∆°n v·ªã g·ª≠i: {str(e)}")
            st.info("Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ƒë∆°n v·ªã g·ª≠i ƒë∆°n gi·∫£n thay th·∫ø")

            # Fallback - bi·ªÉu ƒë·ªì ƒë∆°n gi·∫£n h∆°n
            if 'total_incoming_detail' in df.columns:
                simple_sender_data = df['total_incoming_detail'].apply(extract_sender_name).value_counts().head(5)
                fig_simple = px.bar(
                    x=simple_sender_data.index,
                    y=simple_sender_data.values,
                    title='üìä Top 5 ƒë∆°n v·ªã g·ª≠i (t·ªïng h·ª£p)',
                    labels={'x': 'ƒê∆°n v·ªã', 'y': 'S·ªë l∆∞·ª£ng vƒÉn b·∫£n'}
                )
                st.plotly_chart(fig_simple, use_container_width=True)

# CSS cho tabs 2 h√†ng
st.markdown("""
<style>
.stTabs [data-baseweb="tab-list"] {
    gap: 8px;
    flex-wrap: wrap;
    justify-content: center;
}
.stTabs [data-baseweb="tab"] {
    height: auto;
    white-space: nowrap;
    padding: 8px 12px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
}
</style>
""", unsafe_allow_html=True)

# T·∫°o tabs v·ªõi t√™n ng·∫Øn g·ªçn h∆°n
tab1, tab2, tab3, tab4, tab5, tab6, tab7, tab8, tab9, tab10, tab11, tab12 = st.tabs([
    "üè† T·ªïng quan",
    "üì• VB ƒê·∫øn",
    "üì§ VB ƒêi",
    "üöó T·ªï xe",
    "üìû T·ªïng ƒë√†i",
    "üë• Th∆∞ k√Ω",
    "üÖøÔ∏è B√£i xe",
    "üéâ S·ª± ki·ªán",
    "üìã C√¥ng vi·ªác",
    "üìÖ L·ªãch h·ªçp",
    "üè¢ Ph√≤ng h·ªçp",
    "üîó Kh√°c"
])

# Tab 1: T·ªïng quan
with tab1:
    st.markdown('<div class="tab-header">üìä T·ªïng quan Ph√≤ng H√†nh ch√≠nh</div>', unsafe_allow_html=True)
    
    # Load d·ªØ li·ªáu t·ª´ GitHub
    df_summary = load_data_from_github('tonghop.json')

    if df_summary is not None:
        # T·∫°o c·ªôt datetime
        df_summary['datetime'] = pd.to_datetime(df_summary[['year', 'month', 'date']].rename(columns={'date': 'day'}))

        # Chu·∫©n h√≥a category names
        df_summary['category_clean'] = df_summary['category'].str.replace(' ', '_').str.lower()
        df_summary['category_vi'] = df_summary['category'].map({
            'Van ban den': 'üì• VƒÉn b·∫£n ƒë·∫øn',
            'Van ban phat hanh di': 'üì§ VƒÉn b·∫£n ƒëi',
            'Van ban phat hanh quyet dinh': 'üìú Quy·∫øt ƒë·ªãnh',
            'Van ban phat hanhquy dinh': 'üìã Quy ƒë·ªãnh',
            'Van ban phat hanhquy trinh': 'üìã Quy tr√¨nh',
            'Van ban phat hanh hop dong': 'üìù H·ª£p ƒë·ªìng',
            'Quan ly phong hop': 'üè¢ Ph√≤ng h·ªçp',
            'Quan ly cong viec': 'üíº C√¥ng vi·ªác'
        }).fillna('üî∏ ' + df_summary['category'])
    
    if df_summary is not None:
        # √Åp d·ª•ng global filter
        df_summary = apply_global_filter(df_summary)
        
        # T√≠nh to√°n metrics t·ªïng quan
        categories_summary = df_summary.groupby('category_vi')['count'].sum().sort_values(ascending=False)
        total_items = df_summary['count'].sum()
        
        # Metrics t·ªïng quan
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            vb_den = categories_summary.get('üì• VƒÉn b·∫£n ƒë·∫øn', 0)
            st.metric("üì• VƒÉn b·∫£n ƒë·∫øn", vb_den)
        
        with col2:
            vb_di = categories_summary.get('üì§ VƒÉn b·∫£n ƒëi', 0)
            st.metric("üì§ VƒÉn b·∫£n ƒëi", vb_di)
        
        with col3:
            phong_hop = categories_summary.get('üè¢ Ph√≤ng h·ªçp', 0)
            st.metric("üè¢ Cu·ªôc h·ªçp", phong_hop)
        
        with col4:
            hop_dong = categories_summary.get('üìù H·ª£p ƒë·ªìng', 0)
            quyet_dinh = categories_summary.get('üìú Quy·∫øt ƒë·ªãnh', 0)
            st.metric("üìú Qƒê + Hƒê", hop_dong + quyet_dinh)
        
        st.markdown("---")
        
        # Bi·ªÉu ƒë·ªì t·ªïng quan
        col1, col2 = st.columns(2)
        
        with col1:
            # Bi·ªÉu ƒë·ªì xu h∆∞·ªõng theo th·ªùi gian
            daily_summary = df_summary.groupby(['datetime', 'category_vi'])['count'].sum().reset_index()
            
            fig_trend = px.line(daily_summary, x='datetime', y='count', color='category_vi',
                               title='üìà Xu h∆∞·ªõng ho·∫°t ƒë·ªông theo th·ªùi gian',
                               labels={'count': 'S·ªë l∆∞·ª£ng', 'datetime': 'Ng√†y', 'category_vi': 'Lo·∫°i ho·∫°t ƒë·ªông'})
            fig_trend.update_layout(height=400, hovermode='x unified')
            st.plotly_chart(fig_trend, use_container_width=True)
        
        with col2:
            # Bi·ªÉu ƒë·ªì ph√¢n b·ªë theo lo·∫°i ho·∫°t ƒë·ªông
            fig_pie = px.pie(values=categories_summary.values, names=categories_summary.index,
                           title='üìä Ph√¢n b·ªë theo lo·∫°i ho·∫°t ƒë·ªông',
                           hole=0.4)
            fig_pie.update_layout(height=400)
            st.plotly_chart(fig_pie, use_container_width=True)
        
        # Ph√¢n t√≠ch chi ti·∫øt
        st.markdown('<div class="section-header">üìà Ph√¢n t√≠ch chi ti·∫øt</div>', unsafe_allow_html=True)
        
        # Tabs con cho ph√¢n t√≠ch
        subtab1, subtab2, subtab3 = st.tabs(["üìÖ Theo th·ªùi gian", "üìä Theo lo·∫°i", "üìà Top ng√†y"])
        
        with subtab1:
            # Ph√¢n t√≠ch theo th√°ng li√™n t·ª•c
            df_summary['year_month'] = df_summary['year'].astype(str) + '-' + df_summary['month'].astype(str).str.zfill(2)
            df_summary['month_year_vi'] = df_summary['month'].astype(str) + '/' + df_summary['year'].astype(str)
            
            monthly_data = df_summary.groupby(['year_month', 'month_year_vi', 'category_vi'])['count'].sum().reset_index()
            
            fig_monthly = px.bar(monthly_data, x='month_year_vi', y='count', color='category_vi',
                               title='Ho·∫°t ƒë·ªông theo th·ªùi gian (th√°ng/nƒÉm)', barmode='group',
                               labels={'count': 'S·ªë l∆∞·ª£ng', 'month_year_vi': 'Th√°ng/NƒÉm', 'category_vi': 'Lo·∫°i'})
            fig_monthly.update_xaxes(tickangle=45)
            st.plotly_chart(fig_monthly, use_container_width=True)
            
            # B·∫£ng th·ªëng k√™ theo th√°ng li√™n t·ª•c
            monthly_stats = df_summary.groupby(['month_year_vi', 'category_vi'])['count'].sum().unstack(fill_value=0)
            monthly_stats = monthly_stats.sort_index(key=lambda x: pd.to_datetime(x, format='%m/%Y'))
            st.dataframe(monthly_stats, use_container_width=True)
        
        with subtab2:
            # Ph√¢n t√≠ch chi ti·∫øt theo t·ª´ng lo·∫°i
            for category in categories_summary.index[:4]:  # Top 4 categories
                category_data = df_summary[df_summary['category_vi'] == category]
                daily_trend = category_data.groupby('datetime')['count'].sum()
                
                st.markdown(f"#### {category}")
                col_a, col_b, col_c = st.columns([2, 1, 1])
                
                with col_a:
                    fig_cat = px.line(x=daily_trend.index, y=daily_trend.values,
                                     title=f'Xu h∆∞·ªõng {category}')
                    fig_cat.update_layout(height=300)
                    st.plotly_chart(fig_cat, use_container_width=True)
                
                with col_b:
                    st.metric("T·ªïng", f"{int(category_data['count'].sum()):,}")
                
                with col_c:
                    st.metric("TB/ng√†y", f"{category_data['count'].mean():.1f}")
        
        with subtab3:
            # Top ng√†y c√≥ ho·∫°t ƒë·ªông cao nh·∫•t
            daily_total = df_summary.groupby('datetime')['count'].sum().sort_values(ascending=False)
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("#### üèÜ Top 10 ng√†y ho·∫°t ƒë·ªông m·∫°nh nh·∫•t")
                for i, (date, count) in enumerate(daily_total.head(10).items(), 1):
                    day_detail = df_summary[df_summary['datetime'] == date].groupby('category_vi')['count'].sum()
                    detail_text = " | ".join([f"{cat}: {val}" for cat, val in day_detail.items()])
                    st.success(f"#{i}. {date.strftime('%d/%m/%Y')}: **{count}** ho·∫°t ƒë·ªông\n\n{detail_text}")
            
            with col2:
                st.markdown("#### üìä Ho·∫°t ƒë·ªông theo ng√†y trong tu·∫ßn")
                df_summary['weekday'] = df_summary['datetime'].dt.day_name()
                df_summary['weekday_vi'] = df_summary['weekday'].map({
                    'Monday': 'Th·ª© 2', 'Tuesday': 'Th·ª© 3', 'Wednesday': 'Th·ª© 4',
                    'Thursday': 'Th·ª© 5', 'Friday': 'Th·ª© 6', 'Saturday': 'Th·ª© 7', 'Sunday': 'CN'
                })
                
                weekday_stats = df_summary.groupby('weekday_vi')['count'].agg(['sum', 'mean']).round(2)
                weekday_stats.columns = ['T·ªïng', 'TB/ng√†y']
                
                fig_weekday = px.bar(x=weekday_stats.index, y=weekday_stats['T·ªïng'],
                                   title='T·ªïng ho·∫°t ƒë·ªông theo ng√†y trong tu·∫ßn')
                st.plotly_chart(fig_weekday, use_container_width=True)
                
                st.dataframe(weekday_stats, use_container_width=True)
    
    else:
        st.error("‚ùå Kh√¥ng th·ªÉ load d·ªØ li·ªáu t·ªïng h·ª£p t·ª´ file tonghop.json")
        st.info("üìÅ ƒê·∫£m b·∫£o file tonghop.json t·ªìn t·∫°i trong th∆∞ m·ª•c g·ªëc")

# Tab 2: VƒÉn b·∫£n ƒë·∫øn
with tab2:
    st.markdown('<div class="tab-header">üì• Qu·∫£n l√Ω VƒÉn b·∫£n ƒê·∫øn</div>', unsafe_allow_html=True)
    
    # Load d·ªØ li·ªáu t·ª´ GitHub
    df = load_data_from_github('vanbanden.json')

    if df is not None:
        # X·ª≠ l√Ω d·ªØ li·ªáu
        if 'datetime' not in df.columns:
            if all(col in df.columns for col in ['year', 'month', 'date']):
                df['datetime'] = pd.to_datetime(df[['year', 'month', 'date']].rename(columns={'date': 'day'}))
            elif all(col in df.columns for col in ['Year', 'Month', 'Date']):
                df['datetime'] = pd.to_datetime(df[['Year', 'Month', 'Date']].rename(columns={'Date': 'day'}))

        # Th√™m c√°c c·ªôt c·∫ßn thi·∫øt
        df['weekday'] = df['datetime'].dt.day_name()
        df['weekday_vi'] = df['weekday'].map({
            'Monday': 'Th·ª© 2', 'Tuesday': 'Th·ª© 3', 'Wednesday': 'Th·ª© 4',
            'Thursday': 'Th·ª© 5', 'Friday': 'Th·ª© 6', 'Saturday': 'Th·ª© 7', 'Sunday': 'Ch·ªß nh·∫≠t'
        })
        df['year'] = df['datetime'].dt.year
        df['month'] = df['datetime'].dt.month
        df['week'] = df['datetime'].dt.isocalendar().week

    if df is not None:
        # √Åp d·ª•ng filter to√†n c·ª•c
        df = apply_global_filter(df)
        # Th·ªëng k√™ t·ªïng quan
        st.markdown("### üìä Th·ªëng k√™ t·ªïng quan")

        # H√†ng 1: Th·ªëng k√™ ch√≠nh
        col1, col2, col3, col4, col5 = st.columns(5)

        with col1:
            total_docs = df['total_incoming'].sum()
            st.metric("üìë T·ªïng vƒÉn b·∫£n", f"{int(total_docs):,}")

        with col2:
            avg_daily = df['total_incoming'].mean()
            st.metric("üìà Trung b√¨nh/ng√†y", f"{avg_daily:.1f}")

        with col3:
            total_on_time = df['processed_on_time'].sum()
            st.metric("‚úÖ X·ª≠ l√Ω ƒë√∫ng h·∫°n", f"{int(total_on_time):,}")

        with col4:
            total_late = df['processed_late'].sum()
            st.metric("‚ö†Ô∏è X·ª≠ l√Ω tr·ªÖ h·∫°n", f"{int(total_late):,}")

        with col5:
            if total_docs > 0:
                on_time_rate = (total_on_time / total_docs) * 100
            else:
                on_time_rate = 0
            st.metric("üìä T·ª∑ l·ªá ƒë√∫ng h·∫°n", f"{on_time_rate:.1f}%")

        # H√†ng 2: Ph√¢n lo·∫°i ph·∫£n h·ªìi
        st.markdown("#### üìã Ph√¢n lo·∫°i theo y√™u c·∫ßu ph·∫£n h·ªìi")
        col1, col2, col3, col4, col5 = st.columns(5)

        with col1:
            no_response = df['no_response_required'].sum()
            st.metric("üîï Kh√¥ng c·∫ßn ph·∫£n h·ªìi", f"{int(no_response):,}")

        with col2:
            need_response = df['response_required'].sum()
            st.metric("üì¢ C·∫ßn ph·∫£n h·ªìi", f"{int(need_response):,}")

        with col3:
            vanban_response = df['response_required_VanBan'].sum()
            st.metric("üìÑ PH VƒÉn b·∫£n", f"{int(vanban_response):,}")

        with col4:
            email_response = df['response_required_Email'].sum()
            st.metric("üìß PH Email", f"{int(email_response):,}")

        with col5:
            phone_response = df['response_required_DienThoai'].sum()
            st.metric("üìû PH ƒêi·ªán tho·∫°i", f"{int(phone_response):,}")

        st.markdown("---")

        # Pivot Table
        selected_period_type = create_pivot_table(df)

        st.markdown("---")

        # Bi·ªÉu ƒë·ªì
        create_incoming_docs_charts(df, selected_period_type)

        # B·∫£ng d·ªØ li·ªáu chi ti·∫øt
        st.markdown("### üìã Chi ti·∫øt d·ªØ li·ªáu")
            
        # L·ªçc d·ªØ li·ªáu
        col1, col2 = st.columns(2)
        with col1:
                date_range = st.date_input(
                    "üìÖ Ch·ªçn kho·∫£ng th·ªùi gian",
                    value=(df['datetime'].min(), df['datetime'].max()),
                    min_value=df['datetime'].min(),
                    max_value=df['datetime'].max()
                )
            
        with col2:
                min_docs = st.number_input("üìä S·ªë vƒÉn b·∫£n t·ªëi thi·ªÉu", min_value=0, value=0)
            
            # √Åp d·ª•ng filter
        if len(date_range) == 2:
                filtered_df = df[
                    (df['datetime'] >= pd.to_datetime(date_range[0])) & 
                    (df['datetime'] <= pd.to_datetime(date_range[1])) &
                    (df['total_incoming'] >= min_docs)
                ]
        else:
                filtered_df = df[df['total_incoming'] >= min_docs]
            
        display_cols = ['datetime', 'total_incoming', 'no_response_required', 'response_required',
                           'processed_on_time', 'processed_late']
            
            # Th√™m c√°c c·ªôt ph·∫£n h·ªìi n·∫øu c√≥
        response_cols = ['response_required_VanBan', 'response_required_Email', 
                           'response_required_DienThoai', 'response_required_PhanMem']
        for col in response_cols:
                if col in filtered_df.columns:
                    display_cols.append(col)
            
            # Th√™m c·ªôt detail n·∫øu c√≥
        if 'total_incoming_detail' in filtered_df.columns:
                display_cols.append('total_incoming_detail')
            
        st.dataframe(filtered_df[display_cols], use_container_width=True)
    else:
        st.info("üìÅ Vui l√≤ng upload file d·ªØ li·ªáu ƒë·ªÉ xem th·ªëng k√™ chi ti·∫øt")

# Tab 3: VƒÉn b·∫£n ƒëi
with tab3:
    st.markdown('<div class="tab-header">üì§ Qu·∫£n l√Ω VƒÉn b·∫£n ƒêi</div>', unsafe_allow_html=True)
    
    # Load d·ªØ li·ªáu t·ª´ GitHub
    df_out = load_data_from_github('vanbanphathanh.json')

    if df_out is not None:
        # Flatten nested structure ƒë·ªÉ t·∫°o c√°c c·ªôt _total
        for index, row in df_out.iterrows():
            # Extract totals from nested objects
            if 'contracts' in row and isinstance(row['contracts'], dict):
                df_out.loc[index, 'contracts_total'] = row['contracts'].get('total', 0)
            if 'decisions' in row and isinstance(row['decisions'], dict):
                df_out.loc[index, 'decisions_total'] = row['decisions'].get('total', 0)
            if 'regulations' in row and isinstance(row['regulations'], dict):
                df_out.loc[index, 'regulations_total'] = row['regulations'].get('total', 0)
            if 'rules' in row and isinstance(row['rules'], dict):
                df_out.loc[index, 'rules_total'] = row['rules'].get('total', 0)
            if 'procedures' in row and isinstance(row['procedures'], dict):
                df_out.loc[index, 'procedures_total'] = row['procedures'].get('total', 0)
            if 'instruct' in row and isinstance(row['instruct'], dict):
                df_out.loc[index, 'instruct_total'] = row['instruct'].get('total', 0)

        # X·ª≠ l√Ω datetime
        if 'datetime' not in df_out.columns:
            if all(col in df_out.columns for col in ['year', 'month', 'date']):
                df_out['datetime'] = pd.to_datetime(df_out[['year', 'month', 'date']].rename(columns={'date': 'day'}))
            elif all(col in df_out.columns for col in ['Year', 'Month', 'Date']):
                df_out['datetime'] = pd.to_datetime(df_out[['Year', 'Month', 'Date']].rename(columns={'Date': 'day'}))

        # Th√™m c√°c c·ªôt c·∫ßn thi·∫øt
        df_out['weekday'] = df_out['datetime'].dt.day_name()
        df_out['weekday_vi'] = df_out['weekday'].map({
            'Monday': 'Th·ª© 2', 'Tuesday': 'Th·ª© 3', 'Wednesday': 'Th·ª© 4',
            'Thursday': 'Th·ª© 5', 'Friday': 'Th·ª© 6', 'Saturday': 'Th·ª© 7', 'Sunday': 'Ch·ªß nh·∫≠t'
        })
        df_out['year'] = df_out['datetime'].dt.year
        df_out['month'] = df_out['datetime'].dt.month
        df_out['week'] = df_out['datetime'].dt.isocalendar().week

        # T√≠nh total_outgoing (t·ªïng c√°c lo·∫°i vƒÉn b·∫£n bao g·ªìm c·∫£ documents)
        total_columns = ['documents', 'contracts_total', 'decisions_total', 'regulations_total',
                       'rules_total', 'procedures_total', 'instruct_total']
        for col in total_columns:
            if col not in df_out.columns:
                df_out[col] = 0

        df_out['total_outgoing'] = df_out[total_columns].sum(axis=1)

    if df_out is not None:
            # √Åp d·ª•ng filter to√†n c·ª•c
            df_out = apply_global_filter(df_out)
            # Th·ªëng k√™ t·ªïng quan
            st.markdown("### üìä Th·ªëng k√™ t·ªïng quan vƒÉn b·∫£n ƒëi")
            
            # H√†ng 1: Th·ªëng k√™ ch√≠nh
            col1, col2, col3, col4, col5 = st.columns(5)
            
            with col1:
                # T√≠nh t·ªïng t·∫•t c·∫£ c√°c lo·∫°i vƒÉn b·∫£n ƒëi (bao g·ªìm c·∫£ documents)
                total_docs = df_out['documents'].sum() if 'documents' in df_out.columns else 0
                total_contracts = df_out['contracts_total'].sum() if 'contracts_total' in df_out.columns else 0
                total_decisions = df_out['decisions_total'].sum() if 'decisions_total' in df_out.columns else 0
                total_regulations = df_out['regulations_total'].sum() if 'regulations_total' in df_out.columns else 0
                total_rules = df_out['rules_total'].sum() if 'rules_total' in df_out.columns else 0
                total_procedures = df_out['procedures_total'].sum() if 'procedures_total' in df_out.columns else 0
                total_instruct = df_out['instruct_total'].sum() if 'instruct_total' in df_out.columns else 0

                total_outgoing = total_docs + total_contracts + total_decisions + total_regulations + total_rules + total_procedures + total_instruct
                st.metric("üìÑ T·ªïng vƒÉn b·∫£n ƒëi", f"{int(total_outgoing):,}")

            with col2:
                st.metric("üìù VƒÉn b·∫£n ph√°t h√†nh", f"{int(total_docs):,}")

            with col3:
                st.metric("üìÅ H·ª£p ƒë·ªìng", f"{int(total_contracts):,}")

            with col4:
                st.metric("‚öñÔ∏è Quy·∫øt ƒë·ªãnh", f"{int(total_decisions):,}")
            
            with col5:
                # T√≠nh trung b√¨nh d·ª±a tr√™n t·ªïng vƒÉn b·∫£n th·ª±c t·∫ø
                if len(df_out) > 0:
                    avg_daily = total_outgoing / len(df_out)
                    st.metric("üìà TB/ng√†y", f"{avg_daily:.1f}")
                else:
                    st.metric("üìà TB/ng√†y", "0")

            # H√†ng 2: Th·ªëng k√™ quy ch·∫ø v√† quy ƒë·ªãnh
            st.markdown("#### üìã Th·ªëng k√™ quy ch·∫ø v√† quy ƒë·ªãnh")
            col1, col2, col3, col4 = st.columns(4)

            with col1:
                st.metric("üìú Quy ƒë·ªãnh", f"{int(total_regulations):,}")

            with col2:
                st.metric("üìã Quy ch·∫ø", f"{int(total_rules):,}")

            with col3:
                st.metric("üîÑ Th·ªß t·ª•c", f"{int(total_procedures):,}")

            with col4:
                st.metric("üìö H∆∞·ªõng d·∫´n", f"{int(total_instruct):,}")
            
            st.markdown("---")
            
            # Pivot Table
            selected_period_type_out = create_outgoing_pivot_table(df_out)

            st.markdown("---")

            # Bi·ªÉu ƒë·ªì
            create_outgoing_docs_charts(df_out, selected_period_type_out)
            
            # B·∫£ng d·ªØ li·ªáu chi ti·∫øt
            st.markdown("### üìã Chi ti·∫øt d·ªØ li·ªáu")

            # L·ªçc d·ªØ li·ªáu
            col1, col2 = st.columns(2)
            with col1:
                date_range_out = st.date_input(
                    "üìÖ Ch·ªçn kho·∫£ng th·ªùi gian",
                    value=(df_out['datetime'].min(), df_out['datetime'].max()),
                    min_value=df_out['datetime'].min(),
                    max_value=df_out['datetime'].max(),
                    key="outgoing_date_range"
                )

            with col2:
                min_docs_out = st.number_input("üìä S·ªë vƒÉn b·∫£n t·ªëi thi·ªÉu", min_value=0, value=0, key="outgoing_min_docs")

            # √Åp d·ª•ng filter
            if len(date_range_out) == 2:
                filtered_df_out = df_out[
                    (df_out['datetime'] >= pd.to_datetime(date_range_out[0])) &
                    (df_out['datetime'] <= pd.to_datetime(date_range_out[1])) &
                    (df_out['documents'] >= min_docs_out)
                ]
            else:
                filtered_df_out = df_out[df_out['documents'] >= min_docs_out]
            display_cols_out = ['datetime', 'total_outgoing', 'documents', 'contracts_total', 'decisions_total',
                               'regulations_total', 'rules_total', 'procedures_total', 'instruct_total']
            # Ch·ªâ hi·ªÉn th·ªã c√°c c·ªôt c√≥ trong DataFrame
            display_cols_out = [col for col in display_cols_out if col in filtered_df_out.columns]

            # Th√™m c·ªôt contracts, decisions detail n·∫øu c√≥
            detail_cols = ['contracts', 'decisions']
            for col in detail_cols:
                if col in filtered_df_out.columns:
                    display_cols_out.append(col)

            st.dataframe(filtered_df_out[display_cols_out], use_container_width=True)
    else:
        st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ vbdi.json")

# Tab 9: Qu·∫£n l√Ω c√¥ng vi·ªác
with tab9:
    st.markdown('<div class="tab-header">üìã Qu·∫£n l√Ω C√¥ng Vi·ªác</div>', unsafe_allow_html=True)
    
    # Load d·ªØ li·ªáu t·ª´ GitHub
    df = load_data_from_github('congviec.json')

    if df is not None:
        # Flatten nested structure t·ª´ all_departments
        for index, row in df.iterrows():
            if 'all_departments' in row and isinstance(row['all_departments'], dict):
                all_dept = row['all_departments']
                df.loc[index, 'tasks_assigned'] = all_dept.get('tasks_assigned', 0)
                df.loc[index, 'tasks_completed_on_time'] = all_dept.get('tasks_completed_on_time', 0)
                df.loc[index, 'tasks_completed_on_time_rate'] = all_dept.get('tasks_completed_on_time_rate', 0)
                df.loc[index, 'tasks_new'] = all_dept.get('tasks_new', 0)
                df.loc[index, 'tasks_new_rate'] = all_dept.get('tasks_new_rate', 0)
                df.loc[index, 'tasks_processing'] = all_dept.get('tasks_processing', 0)
                df.loc[index, 'tasks_processing_rate'] = all_dept.get('tasks_processing_rate', 0)

        # X·ª≠ l√Ω datetime
        if 'datetime' not in df.columns:
            if all(col in df.columns for col in ['year', 'month', 'date']):
                df['datetime'] = pd.to_datetime(df[['year', 'month', 'date']].rename(columns={'date': 'day'}))
            elif all(col in df.columns for col in ['Year', 'Month', 'Date']):
                df['datetime'] = pd.to_datetime(df[['Year', 'Month', 'Date']].rename(columns={'Date': 'day'}))

        # Th√™m c√°c c·ªôt c·∫ßn thi·∫øt
        df['weekday'] = df['datetime'].dt.day_name()
        df['weekday_vi'] = df['weekday'].map({
            'Monday': 'Th·ª© 2', 'Tuesday': 'Th·ª© 3', 'Wednesday': 'Th·ª© 4',
            'Thursday': 'Th·ª© 5', 'Friday': 'Th·ª© 6', 'Saturday': 'Th·ª© 7', 'Sunday': 'Ch·ªß nh·∫≠t'
        })
        df['year'] = df['datetime'].dt.year
        df['month'] = df['datetime'].dt.month
        df['week'] = df['datetime'].dt.isocalendar().week

        # ƒê·∫£m b·∫£o c√°c c·ªôt task t·ªìn t·∫°i v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
        task_columns = ['tasks_assigned', 'tasks_completed_on_time', 'tasks_completed_on_time_rate',
                       'tasks_new', 'tasks_new_rate', 'tasks_processing', 'tasks_processing_rate']
        for col in task_columns:
            if col not in df.columns:
                df[col] = 0

        # T√≠nh completion_rate cho m·ªói h√†ng
        df['completion_rate'] = df.apply(lambda row:
            (row['tasks_completed_on_time'] / row['tasks_assigned'] * 100)
            if row['tasks_assigned'] > 0 else 0, axis=1)

        # T·∫°o DataFrame ri√™ng cho detail_departments
        detail_rows = []
        for index, row in df.iterrows():
            if 'detail_departments' in row and isinstance(row['detail_departments'], list):
                for dept in row['detail_departments']:
                    if isinstance(dept, dict):
                        detail_row = {
                            'Date': row.get('Date', row.get('date', '')),
                            'Month': row.get('Month', row.get('month', '')),
                            'Year': row.get('Year', row.get('year', '')),
                            'datetime': row.get('datetime', ''),
                            'weekday': row.get('weekday', ''),
                            'weekday_vi': row.get('weekday_vi', ''),
                            'year': row.get('year', ''),
                            'month': row.get('month', ''),
                            'week': row.get('week', ''),
                            'department': dept.get('Name', ''),
                            'tasks_assigned': dept.get('tasks_assigned', 0),
                            'tasks_completed_on_time': dept.get('tasks_completed_on_time', 0),
                            'tasks_completed_on_time_rate': dept.get('tasks_completed_on_time_rate', 0),
                            'tasks_new': dept.get('tasks_new', 0),
                            'tasks_new_rate': dept.get('tasks_new_rate', 0),
                            'tasks_processing': dept.get('tasks_processing', 0),
                            'tasks_processing_rate': dept.get('tasks_processing_rate', 0)
                        }
                        detail_rows.append(detail_row)

        # Return both dataframes
        df_all_tasks = df
        if detail_rows:
            df_detail_tasks = pd.DataFrame(detail_rows)
            # T√≠nh completion_rate cho detail
            df_detail_tasks['completion_rate'] = df_detail_tasks.apply(lambda row:
                (row['tasks_completed_on_time'] / row['tasks_assigned'] * 100)
                if row['tasks_assigned'] > 0 else 0, axis=1)
        else:
            df_detail_tasks = pd.DataFrame()
    else:
        df_all_tasks = None
        df_detail_tasks = None

    if df_all_tasks is not None and df_detail_tasks is not None:
            # √Åp d·ª•ng filter to√†n c·ª•c
            df_all_tasks_filtered = apply_global_filter(df_all_tasks)
            df_detail_tasks_filtered = apply_global_filter(df_detail_tasks)

            # Ki·ªÉm tra d·ªØ li·ªáu sau khi filter
            if df_all_tasks_filtered.empty:
                st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc hi·ªán t·∫°i. Vui l√≤ng ƒëi·ªÅu ch·ªânh b·ªô l·ªçc.")
                st.stop()
            # Th·ªëng k√™ t·ªïng quan
            st.markdown("### üìä Th·ªëng k√™ t·ªïng quan c√¥ng vi·ªác")
            
            # H√†ng 1: Th·ªëng k√™ ch√≠nh
            col1, col2, col3, col4, col5 = st.columns(5)
            
            with col1:
                total_assigned = df_all_tasks_filtered['tasks_assigned'].sum()
                st.metric("üìã T·ªïng giao vi·ªác", total_assigned)
            
            with col2:
                total_completed = df_all_tasks_filtered['tasks_completed_on_time'].sum()
                st.metric("‚úÖ Ho√†n th√†nh", total_completed)
            
            with col3:
                total_processing = df_all_tasks_filtered['tasks_processing'].sum()
                st.metric("üîÑ ƒêang x·ª≠ l√Ω", total_processing)
            
            with col4:
                total_new = df_all_tasks_filtered['tasks_new'].sum()
                st.metric("üÜï Vi·ªác m·ªõi", total_new)
            
            with col5:
                # T√≠nh t·ª∑ l·ªá ho√†n th√†nh: (completed / assigned) * 100
                total_assigned_all = df_all_tasks_filtered['tasks_assigned'].sum()
                total_completed_all = df_all_tasks_filtered['tasks_completed_on_time'].sum()
                if total_assigned_all > 0:
                    avg_completion = (total_completed_all / total_assigned_all) * 100
                    st.metric("üìä T·ª∑ l·ªá ho√†n th√†nh", f"{avg_completion:.1f}%")
                else:
                    st.metric("üìä T·ª∑ l·ªá ho√†n th√†nh", "0%")
            
            # H√†ng 2: Th·ªëng k√™ ph√≤ng ban
            st.markdown("#### üìã Th·ªëng k√™ theo ph√≤ng ban")
            if len(df_detail_tasks_filtered) > 0:
                dept_summary = df_detail_tasks_filtered.groupby('department').agg({
                    'tasks_assigned': 'sum',
                    'tasks_completed_on_time': 'sum',
                    'tasks_processing': 'sum',
                    'tasks_new': 'sum'
                }).reset_index()
                dept_summary['completion_rate'] = (dept_summary['tasks_completed_on_time'] / dept_summary['tasks_assigned'] * 100).fillna(0)
                
                # Top 3 ph√≤ng ban theo t·ªïng s·ªë c√¥ng vi·ªác ƒë∆∞·ª£c giao
                top_depts = dept_summary.nlargest(3, 'tasks_assigned')

                col1, col2, col3 = st.columns(3)
                for i, (idx, dept) in enumerate(top_depts.iterrows()):
                    with [col1, col2, col3][i]:
                        completion_rate = (dept['tasks_completed_on_time'] / dept['tasks_assigned'] * 100) if dept['tasks_assigned'] > 0 else 0
                        st.metric(f"üèÜ {dept['department']}",
                                f"{dept['tasks_completed_on_time']}/{dept['tasks_assigned']} vi·ªác",
                                f"T·ª∑ l·ªá: {completion_rate:.1f}%")
            
            st.markdown("---")
            
            # Pivot Table
            selected_period_type_tasks = create_task_pivot_table(df_all_tasks_filtered, df_detail_tasks_filtered)

            st.markdown("---")

            # Bi·ªÉu ƒë·ªì
            create_task_management_charts(df_all_tasks_filtered, df_detail_tasks_filtered, selected_period_type_tasks)
            
            # B·∫£ng d·ªØ li·ªáu chi ti·∫øt
            st.markdown("### üìã Chi ti·∫øt d·ªØ li·ªáu")
            
            # Ch·ªçn lo·∫°i d·ªØ li·ªáu hi·ªÉn th·ªã
            detail_type = st.selectbox(
                "üìä Hi·ªÉn th·ªã d·ªØ li·ªáu:",
                options=['T·ªïng h·ª£p t·∫•t c·∫£ ph√≤ng ban', 'Chi ti·∫øt t·ª´ng ph√≤ng ban'],
                key="task_detail_type"
            )
            
            # Ch·ªçn DataFrame ƒë√£ ƒë∆∞·ª£c filter to√†n c·ª•c
            display_df = df_all_tasks_filtered if detail_type == 'T·ªïng h·ª£p t·∫•t c·∫£ ph√≤ng ban' else df_detail_tasks_filtered
            
            # L·ªçc th√™m theo s·ªë vi·ªác t·ªëi thi·ªÉu
            min_tasks = st.number_input("üìä S·ªë vi·ªác t·ªëi thi·ªÉu", min_value=0, value=0, key="tasks_min")
            filtered_df_tasks = display_df[display_df['tasks_assigned'] >= min_tasks]
            
            # C√°c c·ªôt hi·ªÉn th·ªã
            display_cols_tasks = ['datetime', 'tasks_assigned', 'tasks_completed_on_time', 
                                 'tasks_processing', 'tasks_new', 'completion_rate']
            
            if detail_type == 'Chi ti·∫øt t·ª´ng ph√≤ng ban':
                display_cols_tasks.insert(1, 'department')
            
            # Format completion_rate
            filtered_df_display = filtered_df_tasks[display_cols_tasks].copy()
            filtered_df_display['completion_rate'] = filtered_df_display['completion_rate'].round(1)
            
            st.dataframe(
                filtered_df_display.rename(columns={
                    'datetime': 'Ng√†y',
                    'department': 'Ph√≤ng ban',
                    'tasks_assigned': 'Giao vi·ªác',
                    'tasks_completed_on_time': 'Ho√†n th√†nh',
                    'tasks_processing': 'ƒêang x·ª≠ l√Ω',
                    'tasks_new': 'Vi·ªác m·ªõi',
                    'completion_rate': 'T·ª∑ l·ªá ho√†n th√†nh (%)'
                }), 
                use_container_width=True
            )
    else:
        st.info("üìÅ Vui l√≤ng upload file d·ªØ li·ªáu ƒë·ªÉ xem th·ªëng k√™ chi ti·∫øt")

# Tab 10: Qu·∫£n l√Ω l·ªãch h·ªçp
with tab10:
    st.markdown('<div class="tab-header">üìÖ Qu·∫£n l√Ω L·ªãch H·ªçp</div>', unsafe_allow_html=True)
    
    # Load d·ªØ li·ªáu t·ª´ GitHub
    df_meetings = load_data_from_github('lichhop.json')

    if df_meetings is not None:
        # X·ª≠ l√Ω d·ªØ li·ªáu
        if 'datetime' not in df_meetings.columns:
            if all(col in df_meetings.columns for col in ['year', 'month', 'date']):
                df_meetings['datetime'] = pd.to_datetime(df_meetings[['year', 'month', 'date']].rename(columns={'date': 'day'}))
            elif all(col in df_meetings.columns for col in ['Year', 'Month', 'Date']):
                df_meetings['datetime'] = pd.to_datetime(df_meetings[['Year', 'Month', 'Date']].rename(columns={'Date': 'day'}))

        # Th√™m c√°c c·ªôt c·∫ßn thi·∫øt
        df_meetings['weekday'] = df_meetings['datetime'].dt.day_name()
        df_meetings['weekday_vi'] = df_meetings['weekday'].map({
            'Monday': 'Th·ª© 2', 'Tuesday': 'Th·ª© 3', 'Wednesday': 'Th·ª© 4',
            'Thursday': 'Th·ª© 5', 'Friday': 'Th·ª© 6', 'Saturday': 'Th·ª© 7', 'Sunday': 'Ch·ªß nh·∫≠t'
        })
        df_meetings['year'] = df_meetings['datetime'].dt.year
        df_meetings['month'] = df_meetings['datetime'].dt.month
        df_meetings['week'] = df_meetings['datetime'].dt.isocalendar().week

        # Th√™m c·ªôt day_type d·ª±a tr√™n weekday
        df_meetings['day_type'] = df_meetings['weekday'].map({
            'Monday': 'Ng√†y l√†m vi·ªác', 'Tuesday': 'Ng√†y l√†m vi·ªác', 'Wednesday': 'Ng√†y l√†m vi·ªác',
            'Thursday': 'Ng√†y l√†m vi·ªác', 'Friday': 'Ng√†y l√†m vi·ªác',
            'Saturday': 'Cu·ªëi tu·∫ßn', 'Sunday': 'Cu·ªëi tu·∫ßn'
        })

        # ƒê·∫£m b·∫£o c·ªôt meeting_schedules t·ªìn t·∫°i
        if 'meeting_schedules' not in df_meetings.columns:
            df_meetings['meeting_schedules'] = 0

        # Th√™m c·ªôt meeting_level d·ª±a tr√™n s·ªë l∆∞·ª£ng meeting_schedules
        df_meetings['meeting_level'] = df_meetings['meeting_schedules'].apply(lambda x:
            'R·∫•t √≠t' if x <= 2 else
            '√çt' if x <= 5 else
            'Trung b√¨nh' if x <= 10 else
            'Nhi·ªÅu' if x <= 20 else
            'R·∫•t nhi·ªÅu'
        )

    if df_meetings is not None:
            # √Åp d·ª•ng filter to√†n c·ª•c
            df_meetings = apply_global_filter(df_meetings)
            
            # Th·ªëng k√™ t·ªïng quan
            st.markdown("### üìä Th·ªëng k√™ t·ªïng quan l·ªãch h·ªçp")
            
            col1, col2, col3, col4, col5 = st.columns(5)
            
            with col1:
                total_meetings = df_meetings['meeting_schedules'].sum()
                st.metric("üìÖ T·ªïng cu·ªôc h·ªçp", f"{int(total_meetings):,}")
            
            with col2:
                avg_daily = df_meetings['meeting_schedules'].mean()
                st.metric("üìà TB/ng√†y", f"{avg_daily:.1f}")
            
            with col3:
                max_day = df_meetings['meeting_schedules'].max()
                st.metric("üî• Nhi·ªÅu nh·∫•t", f"{max_day} cu·ªôc")
            
            with col4:
                min_day = df_meetings['meeting_schedules'].min()
                st.metric("üîª √çt nh·∫•t", f"{min_day} cu·ªôc")
            
            with col5:
                total_days = len(df_meetings)
                st.metric("üìÜ T·ªïng ng√†y", f"{total_days} ng√†y")
            
            # H√†ng 2: Th·ªëng k√™ theo lo·∫°i ng√†y
            st.markdown("#### üìã Ph√¢n t√≠ch theo lo·∫°i ng√†y")
            col1, col2, col3 = st.columns(3)
            
            workday_data = df_meetings[df_meetings['day_type'] == 'Ng√†y l√†m vi·ªác']
            weekend_data = df_meetings[df_meetings['day_type'] == 'Cu·ªëi tu·∫ßn']
            
            with col1:
                workday_total = workday_data['meeting_schedules'].sum()
                workday_count = len(workday_data)
                st.metric("üíº Ng√†y l√†m vi·ªác", f"{workday_total} cu·ªôc", f"{workday_count} ng√†y")
            
            with col2:
                weekend_total = weekend_data['meeting_schedules'].sum()
                weekend_count = len(weekend_data)
                st.metric("üè° Cu·ªëi tu·∫ßn", f"{weekend_total} cu·ªôc", f"{weekend_count} ng√†y")
            
            with col3:
                busy_days = len(df_meetings[df_meetings['meeting_schedules'] > 10])
                st.metric("üî• Ng√†y b·∫≠n r·ªôn", f"{busy_days} ng√†y", ">10 cu·ªôc")
            
            st.markdown("---")

            # Pivot Table
            selected_period_type_meetings = create_meeting_pivot_table(df_meetings)

            st.markdown("---")

            # Tab ƒë·ªãnh nghƒ©a m·ª©c ƒë·ªô b·∫≠n r·ªôn
            with st.expander("‚ÑπÔ∏è ƒê·ªãnh nghƒ©a m·ª©c ƒë·ªô b·∫≠n r·ªôn"):
                st.markdown("""
                #### üìä Ph√¢n lo·∫°i m·ª©c ƒë·ªô ho·∫°t ƒë·ªông l·ªãch h·ªçp:

                | M·ª©c ƒë·ªô | S·ªë cu·ªôc h·ªçp/ng√†y | M√¥ t·∫£ |
                |--------|------------------|-------|
                | üü¢ **R·∫•t √≠t** | 0-2 cu·ªôc | Ng√†y l√†m vi·ªác b√¨nh th∆∞·ªùng, √≠t ho·∫°t ƒë·ªông h·ªçp |
                | üîµ **√çt** | 3-5 cu·ªôc | Ng√†y c√≥ m·ªôt s·ªë cu·ªôc h·ªçp, m·ª©c ƒë·ªô v·ª´a ph·∫£i |
                | üü° **Trung b√¨nh** | 6-10 cu·ªôc | Ng√†y kh√° b·∫≠n r·ªôn v·ªõi nhi·ªÅu cu·ªôc h·ªçp |
                | üü† **Nhi·ªÅu** | 11-20 cu·ªôc | Ng√†y r·∫•t b·∫≠n v·ªõi m·∫≠t ƒë·ªô h·ªçp cao |
                | üî¥ **R·∫•t nhi·ªÅu** | >20 cu·ªôc | Ng√†y c·ª±c k·ª≥ b·∫≠n r·ªôn, li√™n t·ª•c c√°c cu·ªôc h·ªçp |

                ---
                #### üìà C√°c ch·ªâ s·ªë quan tr·ªçng:
                - **Ng√†y b·∫≠n r·ªôn**: Ng√†y c√≥ >5 cu·ªôc h·ªçp (t·ª´ m·ª©c Trung b√¨nh tr·ªü l√™n)
                - **T·ª∑ l·ªá ng√†y b·∫≠n**: % ng√†y trong k·ª≥ c√≥ >5 cu·ªôc h·ªçp
                - **Xu h∆∞·ªõng**: So s√°nh v·ªõi k·ª≥ tr∆∞·ªõc ƒë·ªÉ theo d√µi bi·∫øn ƒë·ªông
                """)

            # Bi·ªÉu ƒë·ªì
            create_meeting_charts(df_meetings, selected_period_type_meetings)
            
            st.markdown("---")
            
            # B·∫£ng d·ªØ li·ªáu chi ti·∫øt
            st.markdown("### üìã Chi ti·∫øt d·ªØ li·ªáu l·ªãch h·ªçp")
            
        # L·ªçc d·ªØ li·ªáu
    col1, col2 = st.columns(2)
    with col1:
                min_meetings = st.number_input("üìä S·ªë cu·ªôc h·ªçp t·ªëi thi·ªÉu", min_value=0, value=0, key="meetings_min")
    with col2:
                selected_level = st.selectbox(
                    "üìÖ M·ª©c ƒë·ªô b·∫≠n r·ªôn",
                    options=['T·∫•t c·∫£'] + list(df_meetings['meeting_level'].unique()),
                    key="meeting_level_filter"
                )
            
            # √Åp d·ª•ng filter
    filtered_meetings = df_meetings[df_meetings['meeting_schedules'] >= min_meetings]
    if selected_level != 'T·∫•t c·∫£':
                filtered_meetings = filtered_meetings[filtered_meetings['meeting_level'] == selected_level]
            
            # Hi·ªÉn th·ªã b·∫£ng
    display_cols_meetings = ['datetime', 'weekday_vi', 'meeting_schedules', 'meeting_level', 'day_type']
            
    st.dataframe(
                filtered_meetings[display_cols_meetings].rename(columns={
                    'datetime': 'Ng√†y',
                    'weekday_vi': 'Ng√†y trong tu·∫ßn', 
                    'meeting_schedules': 'S·ªë cu·ªôc h·ªçp',
                    'meeting_level': 'M·ª©c ƒë·ªô b·∫≠n r·ªôn',
                    'day_type': 'Lo·∫°i ng√†y'
                }),
                use_container_width=True
            )
            
            # Th·ªëng k√™ cu·ªëi
    st.markdown("**üìä Insights ch√≠nh:**")
    insights = []
            
    if len(df_meetings) > 0:
                busiest_day = df_meetings.loc[df_meetings['meeting_schedules'].idxmax()]
                insights.append(f"üî• Ng√†y b·∫≠n r·ªôn nh·∫•t: {busiest_day['datetime'].strftime('%d/%m/%Y')} ({busiest_day['weekday_vi']}) v·ªõi {busiest_day['meeting_schedules']} cu·ªôc h·ªçp")
                
                quietest_day = df_meetings.loc[df_meetings['meeting_schedules'].idxmin()]
                insights.append(f"üîª Ng√†y √≠t h·ªçp nh·∫•t: {quietest_day['datetime'].strftime('%d/%m/%Y')} ({quietest_day['weekday_vi']}) v·ªõi {quietest_day['meeting_schedules']} cu·ªôc h·ªçp")
                
                most_common_level = df_meetings['meeting_level'].mode()[0] if len(df_meetings['meeting_level'].mode()) > 0 else 'Kh√¥ng x√°c ƒë·ªãnh'
                insights.append(f"üìä M·ª©c ƒë·ªô ph·ªï bi·∫øn nh·∫•t: {most_common_level}")
                
                for insight in insights:
                    st.write(f"- {insight}")
    else:
        st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch h·ªçp")
        st.info("üìÅ Upload d·ªØ li·ªáu ƒë·ªÉ qu·∫£n l√Ω l·ªãch h·ªçp chi ti·∫øt")

# Tab 11: Qu·∫£n l√Ω ph√≤ng h·ªçp
with tab11:
    st.markdown('<div class="tab-header">üè¢ Qu·∫£n l√Ω Ph√≤ng H·ªçp</div>', unsafe_allow_html=True)
    
    # Load d·ªØ li·ªáu t·ª´ GitHub
    df_rooms = load_data_from_github('phonghop.json')

    if df_rooms is not None:
        # T·∫°o c·ªôt datetime
        df_rooms['datetime'] = pd.to_datetime(df_rooms[['Year', 'Month', 'Date']].rename(columns={'Date': 'day'}))
        df_rooms['weekday'] = df_rooms['datetime'].dt.day_name()
        df_rooms['weekday_vi'] = df_rooms['weekday'].map({
            'Monday': 'Th·ª© 2', 'Tuesday': 'Th·ª© 3', 'Wednesday': 'Th·ª© 4',
            'Thursday': 'Th·ª© 5', 'Friday': 'Th·ª© 6', 'Saturday': 'Th·ª© 7', 'Sunday': 'Ch·ªß nh·∫≠t'
        })
        df_rooms['month_vi'] = df_rooms['Month'].map({
            1: 'Th√°ng 1', 2: 'Th√°ng 2', 3: 'Th√°ng 3', 4: 'Th√°ng 4',
            5: 'Th√°ng 5', 6: 'Th√°ng 6', 7: 'Th√°ng 7', 8: 'Th√°ng 8',
            9: 'Th√°ng 9', 10: 'Th√°ng 10', 11: 'Th√°ng 11', 12: 'Th√°ng 12'
        })

        # T√≠nh to√°n c√°c ch·ªâ s·ªë
        df_rooms['cancel_rate'] = (df_rooms['register_room_cancel'] / df_rooms['register_room'] * 100).fillna(0).round(1)
        df_rooms['net_bookings'] = df_rooms['register_room'] - df_rooms['register_room_cancel']
        df_rooms['is_weekend'] = df_rooms['weekday'].isin(['Saturday', 'Sunday'])
        df_rooms['day_type'] = df_rooms['is_weekend'].map({False: 'Ng√†y l√†m vi·ªác', True: 'Cu·ªëi tu·∫ßn'})

        # √Åp d·ª•ng filter to√†n c·ª•c
        df_rooms = apply_global_filter(df_rooms)
    
    if df_rooms is not None and not df_rooms.empty:
        # Metrics t·ªïng quan
        col1, col2, col3, col4 = st.columns(4)
        
        total_bookings = df_rooms['register_room'].sum()
        total_cancels = df_rooms['register_room_cancel'].sum()
        avg_daily = df_rooms['register_room'].mean()
        cancel_rate_avg = (total_cancels / total_bookings * 100) if total_bookings > 0 else 0
        
        with col1:
            st.metric("üìÖ T·ªïng ƒëƒÉng k√Ω", f"{int(total_bookings):,}")
        with col2:
            st.metric("‚ùå T·ªïng h·ªßy", f"{int(total_cancels):,}")
        with col3:
            st.metric("üìä TB/ng√†y", f"{avg_daily:.1f}")
        with col4:
            st.metric("üìâ T·ª∑ l·ªá h·ªßy", f"{cancel_rate_avg:.1f}%")

        st.markdown("---")

        # Pivot Table
        selected_period_type_rooms = create_room_pivot_table(df_rooms)

        st.markdown("---")

        # Bi·ªÉu ƒë·ªì
        create_room_charts(df_rooms, selected_period_type_rooms)

        st.markdown("---")

        # B·∫£ng d·ªØ li·ªáu chi ti·∫øt
        st.markdown("### üìã Chi ti·∫øt d·ªØ li·ªáu ph√≤ng h·ªçp")

        # L·ªçc d·ªØ li·ªáu
        col1, col2 = st.columns(2)
        with col1:
            min_bookings = st.number_input("üìä S·ªë ƒëƒÉng k√Ω t·ªëi thi·ªÉu", min_value=0, value=0, key="rooms_min")
        with col2:
            selected_day_type = st.selectbox(
                "üìÖ Lo·∫°i ng√†y",
                options=['T·∫•t c·∫£'] + list(df_rooms['day_type'].unique()),
                key="room_day_type_filter"
            )

        # √Åp d·ª•ng filter
        filtered_rooms = df_rooms[df_rooms['register_room'] >= min_bookings]
        if selected_day_type != 'T·∫•t c·∫£':
            filtered_rooms = filtered_rooms[filtered_rooms['day_type'] == selected_day_type]

        # Hi·ªÉn th·ªã b·∫£ng
        display_cols_rooms = ['datetime', 'weekday_vi', 'register_room', 'register_room_cancel', 'net_bookings', 'cancel_rate', 'day_type']

        st.dataframe(
            filtered_rooms[display_cols_rooms].rename(columns={
                'datetime': 'Ng√†y',
                'weekday_vi': 'Ng√†y trong tu·∫ßn',
                'register_room': 'T·ªïng ƒëƒÉng k√Ω',
                'register_room_cancel': 'T·ªïng h·ªßy',
                'net_bookings': 'ƒêƒÉng k√Ω th·ª±c',
                'cancel_rate': 'T·ª∑ l·ªá h·ªßy (%)',
                'day_type': 'Lo·∫°i ng√†y'
            }),
            use_container_width=True
        )
    else:
        st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ph√≤ng h·ªçp")
        st.info("üìÅ Upload d·ªØ li·ªáu ho·∫∑c ƒë·∫£m b·∫£o file meeting_rooms_data.json t·ªìn t·∫°i ƒë·ªÉ xem chi ti·∫øt")

# H√†m t·∫°o pivot table cho T·ªï xe
def create_vehicle_pivot_table(df):
    st.markdown("### üìä B·∫£ng Pivot - Ph√¢n t√≠ch T·ªï xe theo th·ªùi gian")

    # CSS cho table l·ªõn h∆°n v√† ƒë·∫πp h∆°n
    st.markdown("""
    <style>
    .pivot-table-vehicle {
        font-size: 16px !important;
        font-weight: 500;
    }
    .pivot-table-vehicle td {
        padding: 12px 8px !important;
        text-align: center !important;
    }
    .pivot-table-vehicle th {
        padding: 15px 8px !important;
        text-align: center !important;
        background-color: #f0f2f6 !important;
        font-weight: bold !important;
        font-size: 17px !important;
    }
    .increase { color: #16a085; font-weight: 600; }
    .decrease { color: #e74c3c; font-weight: 600; }
    .neutral { color: #7f8c8d; font-weight: 600; }
    </style>
    """, unsafe_allow_html=True)

    col1, col2 = st.columns([1, 1])
    with col1:
        period_type = st.selectbox(
            "üìÖ T·ªïng h·ª£p theo:",
            options=['Tu·∫ßn', 'Th√°ng', 'NƒÉm'],  # Th√™m NƒÉm cho d·ªØ li·ªáu 2025
            index=0,  # M·∫∑c ƒë·ªãnh l√† Tu·∫ßn
            key="vehicle_period_type"
        )

    # D·ªØ li·ªáu T·ªï xe c√≥ c·∫•u tr√∫c kh√°c - c√≥ th·ªÉ c√≥ c·ªôt tu·∫ßn/th√°ng tr·ª±c ti·∫øp
    has_time_data = False
    df_period = df.copy()

    # Ki·ªÉm tra c√°c c·ªôt th·ªùi gian - data c√≥ Tu·∫ßn v√† Th√°ng
    if 'Tu·∫ßn' in df.columns or 'Th√°ng' in df.columns:
        has_time_data = True

        # Chu·∫©n b·ªã d·ªØ li·ªáu d·ª±a tr√™n period_type ƒë∆∞·ª£c ch·ªçn
        if period_type == 'Tu·∫ßn' and 'Tu·∫ßn' in df.columns:
            df_period['period'] = 'W' + df_period['Tu·∫ßn'].astype(str)
            df_period['period_sort'] = pd.to_numeric(df_period['Tu·∫ßn'], errors='coerce')
        elif period_type == 'Th√°ng' and 'Th√°ng' in df.columns:
            df_period['period'] = 'T' + df_period['Th√°ng'].astype(str)
            df_period['period_sort'] = pd.to_numeric(df_period['Th√°ng'], errors='coerce')
        elif period_type == 'NƒÉm':
            # D·ªØ li·ªáu nƒÉm 2025 - t·∫°o period nƒÉm
            df_period['period'] = '2025'
            df_period['period_sort'] = 2025
        else:
            # Fallback: s·ª≠ d·ª•ng Tu·∫ßn l√†m m·∫∑c ƒë·ªãnh
            if 'Tu·∫ßn' in df.columns:
                df_period['period'] = 'W' + df_period['Tu·∫ßn'].astype(str)
                df_period['period_sort'] = pd.to_numeric(df_period['Tu·∫ßn'], errors='coerce')
            else:
                has_time_data = False

    elif 'datetime' in df.columns:
        # X·ª≠ l√Ω datetime n·∫øu c√≥
        has_time_data = True
        df_period['datetime'] = pd.to_datetime(df_period['datetime'])
        df_period['year'] = df_period['datetime'].dt.year
        df_period['month'] = df_period['datetime'].dt.month
        df_period['week'] = df_period['datetime'].dt.isocalendar().week

        if period_type == 'Tu·∫ßn':
            df_period['period'] = 'W' + df_period['week'].astype(str) + '-' + df_period['year'].astype(str)
            df_period['period_sort'] = df_period['year'] * 100 + df_period['week']
        elif period_type == 'Th√°ng':
            df_period['period'] = 'T' + df_period['month'].astype(str) + '-' + df_period['year'].astype(str)
            df_period['period_sort'] = df_period['year'] * 100 + df_period['month']
    else:
        # Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi gian, t·∫°o period gi·∫£ l·∫≠p
        has_time_data = False

    if has_time_data:
        # T·∫°o pivot table v·ªõi c√°c ch·ªâ s·ªë T·ªï xe - m·ªü r·ªông ƒë·ªÉ bao g·ªìm t·∫•t c·∫£ metrics
        vehicle_metrics = ['so_chuyen', 'km_chay', 'doanh_thu', 'nhien_lieu', 'bao_duong', 'hai_long', 'km_hanh_chinh', 'km_cuu_thuong', 'phieu_khao_sat']

        # N·∫øu d·ªØ li·ªáu kh√¥ng c√≥ c√°c c·ªôt metric, t·∫°o ch√∫ng t·ª´ N·ªôi dung/S·ªë li·ªáu
        if 'N·ªôi dung' in df_period.columns and 'S·ªë li·ªáu' in df_period.columns:
            for metric in vehicle_metrics:
                df_period[metric] = 0

            # Mapping c√°c metric t·ª´ N·ªôi dung - d·ª±a tr√™n data th·ª±c t·∫ø
            metric_mapping = {
                'so_chuyen': ['S·ªë chuy·∫øn xe'],
                'km_chay': ['T·ªïng km ch·∫°y'],
                'doanh_thu': ['Doanh thu T·ªï xe'],
                'nhien_lieu': ['T·ªïng s·ªë nhi√™n li·ªáu ti√™u th·ª•'],
                'bao_duong': ['Chi ph√≠ b·∫£o d∆∞·ª°ng'],
                'hai_long': ['T·ª∑ l·ªá h√†i l√≤ng c·ªßa kh√°ch h√†ng'],
                'km_hanh_chinh': ['Km ch·∫°y c·ªßa Km ch·∫°y c·ªßa xe h√†nh ch√≠nh', 'Km ch·∫°y c·ªßa xe h√†nh ch√≠nh', 'Km ch·∫°y c·ªßa h√†nh ch√≠nh'],
                'km_cuu_thuong': ['Km ch·∫°y c·ªßa Km ch·∫°y c·ªßa xe c·ª©u th∆∞∆°ng', 'Km ch·∫°y c·ªßa xe c·ª©u th∆∞∆°ng'],
                'phieu_khao_sat': ['S·ªë phi·∫øu kh·∫£o s√°t h√†i l√≤ng']
            }

            for metric, content_names in metric_mapping.items():
                for content_name in content_names:
                    mask = df_period['N·ªôi dung'] == content_name
                    df_period.loc[mask, metric] = pd.to_numeric(df_period.loc[mask, 'S·ªë li·ªáu'], errors='coerce').fillna(0)

        # T·∫°o pivot data
        pivot_data = df_period.groupby(['period', 'period_sort'])[vehicle_metrics].sum().reset_index()
        pivot_data = pivot_data.sort_values('period_sort', ascending=False)

        # T√≠nh to√°n bi·∫øn ƒë·ªông so v·ªõi k·ª≥ tr∆∞·ªõc
        for col in vehicle_metrics:
            pivot_data[f'{col}_prev'] = pivot_data[col].shift(-1)
            pivot_data[f'{col}_change'] = pivot_data[col] - pivot_data[f'{col}_prev']
            pivot_data[f'{col}_change_pct'] = ((pivot_data[col] / pivot_data[f'{col}_prev'] - 1) * 100).round(1)
            pivot_data[f'{col}_change_pct'] = pivot_data[f'{col}_change_pct'].fillna(0)

        # T·∫°o DataFrame hi·ªÉn th·ªã v·ªõi bi·∫øn ƒë·ªông trong c√πng cell
        display_data = pivot_data.copy()

        # H√†m t·∫°o cell k·∫øt h·ª£p gi√° tr·ªã v√† bi·∫øn ƒë·ªông v·ªõi comma formatting
        def format_cell_with_change(row, col):
            current_val = row[col]
            change_val = row[f'{col}_change']
            change_pct = row[f'{col}_change_pct']
            prev_val = row[f'{col}_prev']

            # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu k·ª≥ tr∆∞·ªõc, ch·ªâ hi·ªÉn th·ªã gi√° tr·ªã hi·ªán t·∫°i v·ªõi comma
            if pd.isna(prev_val) or prev_val == 0:
                return f"{int(current_val):,}"

            # ƒê·ªãnh m√†u s·∫Øc theo chi·ªÅu h∆∞·ªõng thay ƒë·ªïi
            if change_val > 0:
                color_class = "increase"
                arrow = "‚Üó"
                sign = "+"
            elif change_val < 0:
                color_class = "decrease"
                arrow = "‚Üò"
                sign = ""
            else:
                color_class = "neutral"
                arrow = "‚Üí"
                sign = ""

            # Tr·∫£ v·ªÅ HTML v·ªõi m√†u s·∫Øc v√† comma formatting
            return f"""<div style="text-align: center; line-height: 1.2;">
                <div style="font-size: 16px; font-weight: 600;">{int(current_val):,}</div>
                <div class="{color_class}" style="font-size: 12px; margin-top: 2px;">
                    {arrow} {sign}{int(change_val):,} ({change_pct:+.1f}%)
                </div>
            </div>"""

        # T·∫°o c·ªôt hi·ªÉn th·ªã m·ªõi
        display_columns = ['period']
        column_names = {f'period': f'{period_type}'}

        for col in vehicle_metrics:
            new_col = f'{col}_display'
            display_data[new_col] = display_data.apply(lambda row: format_cell_with_change(row, col), axis=1)
            display_columns.append(new_col)

            # Mapping t√™n c·ªôt cho hi·ªÉn th·ªã
            metric_names = {
                'so_chuyen': 'S·ªë chuy·∫øn',
                'km_chay': 'T·ªïng km',
                'doanh_thu': 'Doanh thu (VNƒê)',
                'nhien_lieu': 'Nhi√™n li·ªáu (L)',
                'bao_duong': 'B·∫£o d∆∞·ª°ng (VNƒê)',
                'hai_long': 'H√†i l√≤ng (%)',
                'km_hanh_chinh': 'Km h√†nh ch√≠nh',
                'km_cuu_thuong': 'Km c·ª©u th∆∞∆°ng',
                'phieu_khao_sat': 'Phi·∫øu kh·∫£o s√°t'
            }
            column_names[new_col] = metric_names.get(col, col)

        st.markdown(f"#### üìã T·ªïng h·ª£p theo {period_type} (bao g·ªìm bi·∫øn ƒë·ªông)")

        # Hi·ªÉn th·ªã b·∫£ng v·ªõi HTML ƒë·ªÉ render m√†u s·∫Øc
        df_display = display_data[display_columns].rename(columns=column_names)

        # T·∫°o HTML table v·ªõi sticky header
        html_table = "<div style='max-height: 400px; overflow-y: auto; border: 1px solid #ddd;'><table class='pivot-table-vehicle' style='width: 100%; border-collapse: collapse; font-size: 16px;'>"

        # Header v·ªõi sticky positioning
        html_table += "<thead><tr>"
        for col in df_display.columns:
            html_table += f"<th style='position: sticky; top: 0; padding: 15px 8px; text-align: center; background-color: #f0f2f6; font-weight: bold; font-size: 17px; border: 1px solid #ddd; z-index: 10;'>{col}</th>"
        html_table += "</tr></thead>"

        # Body
        html_table += "<tbody>"
        for _, row in df_display.iterrows():
            html_table += "<tr>"
            for i, col in enumerate(df_display.columns):
                cell_value = row[col]
                style = "padding: 12px 8px; text-align: center; border: 1px solid #ddd;"
                html_table += f"<td style='{style}'>{cell_value}</td>"
            html_table += "</tr>"
        html_table += "</tbody></table></div>"

        st.markdown(html_table, unsafe_allow_html=True)

    else:
        st.info("üìä D·ªØ li·ªáu ch∆∞a c√≥ th√¥ng tin th·ªùi gian ƒë·ªÉ t·∫°o pivot table")
        # Hi·ªÉn th·ªã d·ªØ li·ªáu c∆° b·∫£n v·ªõi comma formatting
        if 'N·ªôi dung' in df.columns and 'S·ªë li·ªáu' in df.columns:
            summary_data = df[['N·ªôi dung', 'S·ªë li·ªáu']].copy()
            # Clean and format numbers with commas
            def format_summary_number(x):
                cleaned = str(x).replace('\xa0', '').replace(' ', '').strip()
                numeric_val = pd.to_numeric(cleaned, errors='coerce')
                if pd.isna(numeric_val):
                    return str(x)
                elif numeric_val >= 1:
                    return f"{numeric_val:,.0f}"
                else:
                    return f"{numeric_val:.1f}"

            summary_data['S·ªë li·ªáu'] = summary_data['S·ªë li·ªáu'].apply(format_summary_number)
            st.dataframe(summary_data, use_container_width=True, hide_index=True)

    return period_type

# H√†m t·∫°o pivot table cho T·ªïng ƒë√†i
def create_call_pivot_table(df):
    st.markdown("### üìä B·∫£ng Pivot - Ph√¢n t√≠ch T·ªïng ƒë√†i theo th·ªùi gian")

    # CSS cho table l·ªõn h∆°n v√† ƒë·∫πp h∆°n
    st.markdown("""
    <style>
    .pivot-table-call {
        font-size: 16px !important;
        font-weight: 500;
    }
    .pivot-table-call td {
        padding: 12px 8px !important;
        text-align: center !important;
    }
    .pivot-table-call th {
        padding: 15px 8px !important;
        text-align: center !important;
        background-color: #f0f2f6 !important;
        font-weight: bold !important;
        font-size: 17px !important;
    }
    .increase { color: #16a085; font-weight: 600; }
    .decrease { color: #e74c3c; font-weight: 600; }
    .neutral { color: #7f8c8d; font-weight: 600; }
    </style>
    """, unsafe_allow_html=True)

    col1, col2 = st.columns([1, 1])
    with col1:
        period_type = st.selectbox(
            "üìÖ T·ªïng h·ª£p theo:",
            options=['Tu·∫ßn', 'Th√°ng', 'NƒÉm'],  # Th√™m NƒÉm cho d·ªØ li·ªáu 2025
            index=0,  # M·∫∑c ƒë·ªãnh l√† Tu·∫ßn
            key="call_period_type"
        )

    # D·ªØ li·ªáu T·ªïng ƒë√†i c√≥ c·∫•u tr√∫c kh√°c - c√≥ th·ªÉ c√≥ c·ªôt tu·∫ßn/th√°ng tr·ª±c ti·∫øp
    has_time_data = False
    df_period = df.copy()

    # Ki·ªÉm tra c√°c c·ªôt th·ªùi gian - data c√≥ Tu·∫ßn v√† Th√°ng
    if 'Tu·∫ßn' in df.columns or 'Th√°ng' in df.columns:
        has_time_data = True

        # Chu·∫©n b·ªã d·ªØ li·ªáu d·ª±a tr√™n period_type ƒë∆∞·ª£c ch·ªçn
        if period_type == 'Tu·∫ßn' and 'Tu·∫ßn' in df.columns:
            df_period['period'] = 'W' + df_period['Tu·∫ßn'].astype(str)
            df_period['period_sort'] = pd.to_numeric(df_period['Tu·∫ßn'], errors='coerce')
        elif period_type == 'Th√°ng' and 'Th√°ng' in df.columns:
            df_period['period'] = 'T' + df_period['Th√°ng'].astype(str)
            df_period['period_sort'] = pd.to_numeric(df_period['Th√°ng'], errors='coerce')
        elif period_type == 'NƒÉm':
            # D·ªØ li·ªáu nƒÉm 2025 - t·∫°o period nƒÉm
            df_period['period'] = '2025'
            df_period['period_sort'] = 2025
        else:
            # Fallback: s·ª≠ d·ª•ng Tu·∫ßn l√†m m·∫∑c ƒë·ªãnh
            if 'Tu·∫ßn' in df.columns:
                df_period['period'] = 'W' + df_period['Tu·∫ßn'].astype(str)
                df_period['period_sort'] = pd.to_numeric(df_period['Tu·∫ßn'], errors='coerce')
            else:
                has_time_data = False

    elif 'datetime' in df.columns:
        # X·ª≠ l√Ω datetime n·∫øu c√≥
        has_time_data = True
        df_period['datetime'] = pd.to_datetime(df_period['datetime'])
        df_period['year'] = df_period['datetime'].dt.year
        df_period['month'] = df_period['datetime'].dt.month
        df_period['week'] = df_period['datetime'].dt.isocalendar().week

        if period_type == 'Tu·∫ßn':
            df_period['period'] = 'W' + df_period['week'].astype(str) + '-' + df_period['year'].astype(str)
            df_period['period_sort'] = df_period['year'] * 100 + df_period['week']
        elif period_type == 'Th√°ng':
            df_period['period'] = 'T' + df_period['month'].astype(str) + '-' + df_period['year'].astype(str)
            df_period['period_sort'] = df_period['year'] * 100 + df_period['month']
    else:
        # Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi gian, t·∫°o period gi·∫£ l·∫≠p
        has_time_data = False

    if has_time_data:
        # T·∫°o pivot table v·ªõi c√°c ch·ªâ s·ªë T·ªïng ƒë√†i - m·ªü r·ªông ƒë·ªÉ bao g·ªìm t·∫•t c·∫£ metrics
        call_metrics = ['tong_goi', 'nho_tu_choi', 'nho_ko_bat', 'ty_le_tra_loi', 'hotline']

        # N·∫øu d·ªØ li·ªáu kh√¥ng c√≥ c√°c c·ªôt metric, t·∫°o ch√∫ng t·ª´ N·ªôi dung/S·ªë li·ªáu
        if 'N·ªôi dung' in df_period.columns and 'S·ªë li·ªáu' in df_period.columns:
            for metric in call_metrics:
                df_period[metric] = 0

            # Mapping c√°c metric t·ª´ N·ªôi dung - d·ª±a tr√™n data th·ª±c t·∫ø
            metric_mapping = {
                'tong_goi': ['T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán'],
                'nho_tu_choi': ['T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do t·ª´ ch·ªëi'],
                'nho_ko_bat': ['T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do kh√¥ng b·∫Øt m√°y'],
                'ty_le_tra_loi': ['T·ª∑ l·ªá tr·∫£ l·ªùi'],
                'hotline': ['Hottline']
            }

            for metric, content_names in metric_mapping.items():
                for content_name in content_names:
                    mask = df_period['N·ªôi dung'] == content_name
                    df_period.loc[mask, metric] = pd.to_numeric(df_period.loc[mask, 'S·ªë li·ªáu'], errors='coerce').fillna(0)

        # T·∫°o pivot data
        pivot_data = df_period.groupby(['period', 'period_sort'])[call_metrics].sum().reset_index()
        pivot_data = pivot_data.sort_values('period_sort', ascending=False)

        # T√≠nh to√°n bi·∫øn ƒë·ªông so v·ªõi k·ª≥ tr∆∞·ªõc
        for col in call_metrics:
            pivot_data[f'{col}_prev'] = pivot_data[col].shift(-1)
            pivot_data[f'{col}_change'] = pivot_data[col] - pivot_data[f'{col}_prev']
            pivot_data[f'{col}_change_pct'] = ((pivot_data[col] / pivot_data[f'{col}_prev'] - 1) * 100).round(1)
            pivot_data[f'{col}_change_pct'] = pivot_data[f'{col}_change_pct'].fillna(0)

        # T·∫°o DataFrame hi·ªÉn th·ªã v·ªõi bi·∫øn ƒë·ªông trong c√πng cell
        display_data = pivot_data.copy()

        # H√†m t·∫°o cell k·∫øt h·ª£p gi√° tr·ªã v√† bi·∫øn ƒë·ªông v·ªõi comma formatting
        def format_cell_with_change(row, col):
            current_val = row[col]
            change_val = row[f'{col}_change']
            change_pct = row[f'{col}_change_pct']
            prev_val = row[f'{col}_prev']

            # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu k·ª≥ tr∆∞·ªõc, ch·ªâ hi·ªÉn th·ªã gi√° tr·ªã hi·ªán t·∫°i v·ªõi comma
            if pd.isna(prev_val) or prev_val == 0:
                if col == 'ty_le_tra_loi':
                    return f"{current_val:.1f}%"
                return f"{int(current_val):,}"

            # ƒê·ªãnh m√†u s·∫Øc theo chi·ªÅu h∆∞·ªõng thay ƒë·ªïi
            if change_val > 0:
                color_class = "increase"
                arrow = "‚Üó"
                sign = "+"
            elif change_val < 0:
                color_class = "decrease"
                arrow = "‚Üò"
                sign = ""
            else:
                color_class = "neutral"
                arrow = "‚Üí"
                sign = ""

            # Tr·∫£ v·ªÅ HTML v·ªõi m√†u s·∫Øc v√† comma formatting
            if col == 'ty_le_tra_loi':
                return f"""<div style="text-align: center; line-height: 1.2;">
                    <div style="font-size: 16px; font-weight: 600;">{current_val:.1f}%</div>
                    <div class="{color_class}" style="font-size: 12px; margin-top: 2px;">
                        {arrow} {sign}{change_val:.1f} ({change_pct:+.1f}%)
                    </div>
                </div>"""
            else:
                return f"""<div style="text-align: center; line-height: 1.2;">
                    <div style="font-size: 16px; font-weight: 600;">{int(current_val):,}</div>
                    <div class="{color_class}" style="font-size: 12px; margin-top: 2px;">
                        {arrow} {sign}{int(change_val):,} ({change_pct:+.1f}%)
                    </div>
                </div>"""

        # T·∫°o c·ªôt hi·ªÉn th·ªã m·ªõi
        display_columns = ['period']
        column_names = {f'period': f'{period_type}'}

        for col in call_metrics:
            new_col = f'{col}_display'
            display_data[new_col] = display_data.apply(lambda row: format_cell_with_change(row, col), axis=1)
            display_columns.append(new_col)

            # Mapping t√™n c·ªôt cho hi·ªÉn th·ªã
            metric_names = {
                'tong_goi': 'T·ªïng cu·ªôc g·ªçi',
                'nho_tu_choi': 'Nh·ª° (t·ª´ ch·ªëi)',
                'nho_ko_bat': 'Nh·ª° (kh√¥ng b·∫Øt)',
                'ty_le_tra_loi': 'T·ª∑ l·ªá tr·∫£ l·ªùi (%)',
                'hotline': 'Hotline'
            }
            column_names[new_col] = metric_names.get(col, col)

        st.markdown(f"#### üìã T·ªïng h·ª£p theo {period_type} (bao g·ªìm bi·∫øn ƒë·ªông)")

        # Hi·ªÉn th·ªã b·∫£ng v·ªõi HTML ƒë·ªÉ render m√†u s·∫Øc
        df_display = display_data[display_columns].rename(columns=column_names)

        # T·∫°o HTML table v·ªõi sticky header
        html_table = "<div style='max-height: 400px; overflow-y: auto; border: 1px solid #ddd;'><table class='pivot-table-call' style='width: 100%; border-collapse: collapse; font-size: 16px;'>"

        # Header v·ªõi sticky positioning
        html_table += "<thead><tr>"
        for col in df_display.columns:
            html_table += f"<th style='position: sticky; top: 0; padding: 15px 8px; text-align: center; background-color: #f0f2f6; font-weight: bold; font-size: 17px; border: 1px solid #ddd; z-index: 10;'>{col}</th>"
        html_table += "</tr></thead>"

        # Body
        html_table += "<tbody>"
        for _, row in df_display.iterrows():
            html_table += "<tr>"
            for i, col in enumerate(df_display.columns):
                cell_value = row[col]
                style = "padding: 12px 8px; text-align: center; border: 1px solid #ddd;"
                html_table += f"<td style='{style}'>{cell_value}</td>"
            html_table += "</tr>"
        html_table += "</tbody></table></div>"

        st.markdown(html_table, unsafe_allow_html=True)

    else:
        st.info("üìä D·ªØ li·ªáu ch∆∞a c√≥ th√¥ng tin th·ªùi gian ƒë·ªÉ t·∫°o pivot table")
        # Hi·ªÉn th·ªã d·ªØ li·ªáu c∆° b·∫£n v·ªõi comma formatting
        if 'N·ªôi dung' in df.columns and 'S·ªë li·ªáu' in df.columns:
            summary_data = df[['N·ªôi dung', 'S·ªë li·ªáu']].copy()
            # Clean and format numbers with commas
            def format_summary_number(x):
                cleaned = str(x).replace('\xa0', '').replace(' ', '').strip()
                numeric_val = pd.to_numeric(cleaned, errors='coerce')
                if pd.isna(numeric_val):
                    return str(x)
                elif numeric_val >= 1:
                    return f"{numeric_val:,.0f}"
                else:
                    return f"{numeric_val:.1f}"

            summary_data['S·ªë li·ªáu'] = summary_data['S·ªë li·ªáu'].apply(format_summary_number)
            st.dataframe(summary_data, use_container_width=True, hide_index=True)

    return period_type

# H√†m t·∫°o pivot table cho H·ªá th·ªëng th∆∞ k√Ω
def create_secretary_pivot_table(df):
    st.markdown("### üìä B·∫£ng Pivot - Ph√¢n t√≠ch H·ªá th·ªëng th∆∞ k√Ω theo th·ªùi gian")

    # CSS cho table l·ªõn h∆°n v√† ƒë·∫πp h∆°n
    st.markdown("""
    <style>
    .pivot-table-secretary {
        font-size: 16px !important;
        font-weight: 500;
    }
    .pivot-table-secretary td {
        padding: 12px 8px !important;
        text-align: center !important;
    }
    .pivot-table-secretary th {
        padding: 15px 8px !important;
        text-align: center !important;
        background-color: #f0f2f6 !important;
        font-weight: bold !important;
        font-size: 17px !important;
    }
    .increase { color: #16a085; font-weight: 600; }
    .decrease { color: #e74c3c; font-weight: 600; }
    .neutral { color: #7f8c8d; font-weight: 600; }
    </style>
    """, unsafe_allow_html=True)

    col1, col2 = st.columns([1, 1])
    with col1:
        period_type = st.selectbox(
            "üìÖ T·ªïng h·ª£p theo:",
            options=['Tu·∫ßn', 'Th√°ng', 'NƒÉm'],  # Th√™m NƒÉm cho d·ªØ li·ªáu 2025
            index=0,  # M·∫∑c ƒë·ªãnh l√† Tu·∫ßn
            key="secretary_period_type"
        )

    # D·ªØ li·ªáu H·ªá th·ªëng th∆∞ k√Ω c√≥ c·∫•u tr√∫c kh√°c - c√≥ th·ªÉ c√≥ c·ªôt tu·∫ßn/th√°ng tr·ª±c ti·∫øp
    has_time_data = False
    df_period = df.copy()

    # Ki·ªÉm tra c√°c c·ªôt th·ªùi gian - data c√≥ Tu·∫ßn v√† Th√°ng
    if 'Tu·∫ßn' in df.columns or 'Th√°ng' in df.columns:
        has_time_data = True

        # Chu·∫©n b·ªã d·ªØ li·ªáu d·ª±a tr√™n period_type ƒë∆∞·ª£c ch·ªçn
        if period_type == 'Tu·∫ßn' and 'Tu·∫ßn' in df.columns:
            df_period['period'] = 'W' + df_period['Tu·∫ßn'].astype(str)
            df_period['period_sort'] = pd.to_numeric(df_period['Tu·∫ßn'], errors='coerce')
        elif period_type == 'Th√°ng' and 'Th√°ng' in df.columns:
            df_period['period'] = 'T' + df_period['Th√°ng'].astype(str)
            df_period['period_sort'] = pd.to_numeric(df_period['Th√°ng'], errors='coerce')
        elif period_type == 'NƒÉm':
            # D·ªØ li·ªáu nƒÉm 2025 - t·∫°o period nƒÉm
            df_period['period'] = '2025'
            df_period['period_sort'] = 2025
        else:
            # Fallback: s·ª≠ d·ª•ng Tu·∫ßn l√†m m·∫∑c ƒë·ªãnh
            if 'Tu·∫ßn' in df.columns:
                df_period['period'] = 'W' + df_period['Tu·∫ßn'].astype(str)
                df_period['period_sort'] = pd.to_numeric(df_period['Tu·∫ßn'], errors='coerce')
            else:
                has_time_data = False

    elif 'datetime' in df.columns:
        # X·ª≠ l√Ω datetime n·∫øu c√≥
        has_time_data = True
        df_period['datetime'] = pd.to_datetime(df_period['datetime'])
        df_period['year'] = df_period['datetime'].dt.year
        df_period['month'] = df_period['datetime'].dt.month
        df_period['week'] = df_period['datetime'].dt.isocalendar().week

        if period_type == 'Tu·∫ßn':
            df_period['period'] = 'W' + df_period['week'].astype(str) + '-' + df_period['year'].astype(str)
            df_period['period_sort'] = df_period['year'] * 100 + df_period['week']
        elif period_type == 'Th√°ng':
            df_period['period'] = 'T' + df_period['month'].astype(str) + '-' + df_period['year'].astype(str)
            df_period['period_sort'] = df_period['year'] * 100 + df_period['month']
    else:
        # Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi gian, t·∫°o period gi·∫£ l·∫≠p
        has_time_data = False

    if has_time_data:
        # T·∫°o pivot table v·ªõi c√°c ch·ªâ s·ªë H·ªá th·ªëng th∆∞ k√Ω - m·ªü r·ªông ƒë·ªÉ bao g·ªìm t·∫•t c·∫£ metrics
        secretary_metrics = ['tong_tk', 'tuyen_moi', 'nghi_viec', 'hanh_chinh', 'chuyen_mon', 'dao_tao']

        # N·∫øu d·ªØ li·ªáu kh√¥ng c√≥ c√°c c·ªôt metric, t·∫°o ch√∫ng t·ª´ N·ªôi dung/S·ªë li·ªáu
        if 'N·ªôi dung' in df_period.columns and 'S·ªë li·ªáu' in df_period.columns:
            for metric in secretary_metrics:
                df_period[metric] = 0

            # Mapping c√°c metric t·ª´ N·ªôi dung - d·ª±a tr√™n data th·ª±c t·∫ø
            metric_mapping = {
                'tong_tk': ['T·ªïng s·ªë th∆∞ k√Ω'],
                'tuyen_moi': ['S·ªë th∆∞ k√Ω ƒë∆∞·ª£c tuy·ªÉn d·ª•ng'],
                'nghi_viec': ['S·ªë th∆∞ k√Ω ngh·ªâ vi·ªác'],
                'hanh_chinh': ['- Th∆∞ k√Ω h√†nh ch√≠nh'],
                'chuyen_mon': ['- Th∆∞ k√Ω chuy√™n m√¥n'],
                'dao_tao': ['S·ªë bu·ªïi t·∫≠p hu·∫•n, ƒë√†o t·∫°o cho th∆∞ k√Ω']
            }

            for metric, content_names in metric_mapping.items():
                for content_name in content_names:
                    mask = df_period['N·ªôi dung'] == content_name
                    df_period.loc[mask, metric] = pd.to_numeric(df_period.loc[mask, 'S·ªë li·ªáu'], errors='coerce').fillna(0)

        # T·∫°o pivot data
        pivot_data = df_period.groupby(['period', 'period_sort'])[secretary_metrics].sum().reset_index()
        pivot_data = pivot_data.sort_values('period_sort', ascending=False)

        # T√≠nh to√°n bi·∫øn ƒë·ªông so v·ªõi k·ª≥ tr∆∞·ªõc
        for col in secretary_metrics:
            pivot_data[f'{col}_prev'] = pivot_data[col].shift(-1)
            pivot_data[f'{col}_change'] = pivot_data[col] - pivot_data[f'{col}_prev']
            pivot_data[f'{col}_change_pct'] = ((pivot_data[col] / pivot_data[f'{col}_prev'] - 1) * 100).round(1)
            pivot_data[f'{col}_change_pct'] = pivot_data[f'{col}_change_pct'].fillna(0)

        # T·∫°o DataFrame hi·ªÉn th·ªã v·ªõi bi·∫øn ƒë·ªông trong c√πng cell
        display_data = pivot_data.copy()

        # H√†m t·∫°o cell k·∫øt h·ª£p gi√° tr·ªã v√† bi·∫øn ƒë·ªông v·ªõi comma formatting
        def format_cell_with_change(row, col):
            current_val = row[col]
            change_val = row[f'{col}_change']
            change_pct = row[f'{col}_change_pct']
            prev_val = row[f'{col}_prev']

            # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu k·ª≥ tr∆∞·ªõc, ch·ªâ hi·ªÉn th·ªã gi√° tr·ªã hi·ªán t·∫°i v·ªõi comma
            if pd.isna(prev_val) or prev_val == 0:
                return f"{int(current_val):,}"

            # ƒê·ªãnh m√†u s·∫Øc theo chi·ªÅu h∆∞·ªõng thay ƒë·ªïi
            if change_val > 0:
                color_class = "increase"
                arrow = "‚Üó"
                sign = "+"
            elif change_val < 0:
                color_class = "decrease"
                arrow = "‚Üò"
                sign = ""
            else:
                color_class = "neutral"
                arrow = "‚Üí"
                sign = ""

            # Tr·∫£ v·ªÅ HTML v·ªõi m√†u s·∫Øc v√† comma formatting
            return f"""<div style="text-align: center; line-height: 1.2;">
                <div style="font-size: 16px; font-weight: 600;">{int(current_val):,}</div>
                <div class="{color_class}" style="font-size: 12px; margin-top: 2px;">
                    {arrow} {sign}{int(change_val):,} ({change_pct:+.1f}%)
                </div>
            </div>"""

        # T·∫°o c·ªôt hi·ªÉn th·ªã m·ªõi
        display_columns = ['period']
        column_names = {f'period': f'{period_type}'}

        for col in secretary_metrics:
            new_col = f'{col}_display'
            display_data[new_col] = display_data.apply(lambda row: format_cell_with_change(row, col), axis=1)
            display_columns.append(new_col)

            # Mapping t√™n c·ªôt cho hi·ªÉn th·ªã
            metric_names = {
                'tong_tk': 'T·ªïng th∆∞ k√Ω',
                'tuyen_moi': 'Tuy·ªÉn m·ªõi',
                'nghi_viec': 'Ngh·ªâ vi·ªác',
                'hanh_chinh': 'H√†nh ch√≠nh',
                'chuyen_mon': 'Chuy√™n m√¥n',
                'dao_tao': 'ƒê√†o t·∫°o (bu·ªïi)'
            }
            column_names[new_col] = metric_names.get(col, col)

        st.markdown(f"#### üìã T·ªïng h·ª£p theo {period_type} (bao g·ªìm bi·∫øn ƒë·ªông)")

        # Hi·ªÉn th·ªã b·∫£ng v·ªõi HTML ƒë·ªÉ render m√†u s·∫Øc
        df_display = display_data[display_columns].rename(columns=column_names)

        # T·∫°o HTML table v·ªõi sticky header
        html_table = "<div style='max-height: 400px; overflow-y: auto; border: 1px solid #ddd;'><table class='pivot-table-secretary' style='width: 100%; border-collapse: collapse; font-size: 16px;'>"

        # Header v·ªõi sticky positioning
        html_table += "<thead><tr>"
        for col in df_display.columns:
            html_table += f"<th style='position: sticky; top: 0; padding: 15px 8px; text-align: center; background-color: #f0f2f6; font-weight: bold; font-size: 17px; border: 1px solid #ddd; z-index: 10;'>{col}</th>"
        html_table += "</tr></thead>"

        # Body
        html_table += "<tbody>"
        for _, row in df_display.iterrows():
            html_table += "<tr>"
            for i, col in enumerate(df_display.columns):
                cell_value = row[col]
                style = "padding: 12px 8px; text-align: center; border: 1px solid #ddd;"
                html_table += f"<td style='{style}'>{cell_value}</td>"
            html_table += "</tr>"
        html_table += "</tbody></table></div>"

        st.markdown(html_table, unsafe_allow_html=True)

    else:
        st.info("üìä D·ªØ li·ªáu ch∆∞a c√≥ th√¥ng tin th·ªùi gian ƒë·ªÉ t·∫°o pivot table")
        # Hi·ªÉn th·ªã d·ªØ li·ªáu c∆° b·∫£n v·ªõi comma formatting
        if 'N·ªôi dung' in df.columns and 'S·ªë li·ªáu' in df.columns:
            summary_data = df[['N·ªôi dung', 'S·ªë li·ªáu']].copy()
            # Clean and format numbers with commas
            def format_summary_number(x):
                cleaned = str(x).replace('\xa0', '').replace(' ', '').strip()
                numeric_val = pd.to_numeric(cleaned, errors='coerce')
                if pd.isna(numeric_val):
                    return str(x)
                elif numeric_val >= 1:
                    return f"{numeric_val:,.0f}"
                else:
                    return f"{numeric_val:.1f}"

            summary_data['S·ªë li·ªáu'] = summary_data['S·ªë li·ªáu'].apply(format_summary_number)
            st.dataframe(summary_data, use_container_width=True, hide_index=True)

    return period_type

# H√†m t·∫°o pivot table cho B√£i gi·ªØ xe
def create_parking_pivot_table(df):
    st.markdown("### üìä B·∫£ng Pivot - Ph√¢n t√≠ch B√£i gi·ªØ xe theo th·ªùi gian")

    # CSS cho table l·ªõn h∆°n v√† ƒë·∫πp h∆°n
    st.markdown("""
    <style>
    .pivot-table-parking {
        font-size: 16px !important;
        font-weight: 500;
    }
    .pivot-table-parking td {
        padding: 12px 8px !important;
        text-align: center !important;
    }
    .pivot-table-parking th {
        padding: 15px 8px !important;
        text-align: center !important;
        background-color: #f0f2f6 !important;
        font-weight: bold !important;
        font-size: 17px !important;
    }
    .increase { color: #16a085; font-weight: 600; }
    .decrease { color: #e74c3c; font-weight: 600; }
    .neutral { color: #7f8c8d; font-weight: 600; }
    </style>
    """, unsafe_allow_html=True)

    col1, col2 = st.columns([1, 1])
    with col1:
        period_type = st.selectbox(
            "üìÖ T·ªïng h·ª£p theo:",
            options=['Tu·∫ßn', 'Th√°ng', 'NƒÉm'],  # Th√™m NƒÉm cho d·ªØ li·ªáu 2025
            index=0,  # M·∫∑c ƒë·ªãnh l√† Tu·∫ßn
            key="parking_period_type"
        )

    # D·ªØ li·ªáu B√£i gi·ªØ xe c√≥ c·∫•u tr√∫c kh√°c - c√≥ th·ªÉ c√≥ c·ªôt tu·∫ßn/th√°ng tr·ª±c ti·∫øp
    has_time_data = False
    df_period = df.copy()

    # Ki·ªÉm tra c√°c c·ªôt th·ªùi gian - data c√≥ Tu·∫ßn v√† Th√°ng
    if 'Tu·∫ßn' in df.columns or 'Th√°ng' in df.columns:
        has_time_data = True

        # Chu·∫©n b·ªã d·ªØ li·ªáu d·ª±a tr√™n period_type ƒë∆∞·ª£c ch·ªçn
        if period_type == 'Tu·∫ßn' and 'Tu·∫ßn' in df.columns:
            df_period['period'] = 'W' + df_period['Tu·∫ßn'].astype(str)
            df_period['period_sort'] = pd.to_numeric(df_period['Tu·∫ßn'], errors='coerce')
        elif period_type == 'Th√°ng' and 'Th√°ng' in df.columns:
            df_period['period'] = 'T' + df_period['Th√°ng'].astype(str)
            df_period['period_sort'] = pd.to_numeric(df_period['Th√°ng'], errors='coerce')
        elif period_type == 'NƒÉm':
            # D·ªØ li·ªáu nƒÉm 2025 - t·∫°o period nƒÉm
            df_period['period'] = '2025'
            df_period['period_sort'] = 2025
        else:
            # Fallback: s·ª≠ d·ª•ng Tu·∫ßn l√†m m·∫∑c ƒë·ªãnh
            if 'Tu·∫ßn' in df.columns:
                df_period['period'] = 'W' + df_period['Tu·∫ßn'].astype(str)
                df_period['period_sort'] = pd.to_numeric(df_period['Tu·∫ßn'], errors='coerce')
            else:
                has_time_data = False

    elif 'datetime' in df.columns:
        # X·ª≠ l√Ω datetime n·∫øu c√≥
        has_time_data = True
        df_period['datetime'] = pd.to_datetime(df_period['datetime'])
        df_period['year'] = df_period['datetime'].dt.year
        df_period['month'] = df_period['datetime'].dt.month
        df_period['week'] = df_period['datetime'].dt.isocalendar().week

        if period_type == 'Tu·∫ßn':
            df_period['period'] = 'W' + df_period['week'].astype(str) + '-' + df_period['year'].astype(str)
            df_period['period_sort'] = df_period['year'] * 100 + df_period['week']
        elif period_type == 'Th√°ng':
            df_period['period'] = 'T' + df_period['month'].astype(str) + '-' + df_period['year'].astype(str)
            df_period['period_sort'] = df_period['year'] * 100 + df_period['month']
    else:
        # Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi gian, t·∫°o period gi·∫£ l·∫≠p
        has_time_data = False

    if has_time_data:
        # T·∫°o pivot table v·ªõi c√°c ch·ªâ s·ªë B√£i gi·ªØ xe - m·ªü r·ªông ƒë·ªÉ bao g·ªìm t·∫•t c·∫£ metrics
        parking_metrics = ['ve_ngay', 've_thang', 'doanh_thu', 'cong_suat', 'ty_le_su_dung', 'khieu_nai']

        # N·∫øu d·ªØ li·ªáu kh√¥ng c√≥ c√°c c·ªôt metric, t·∫°o ch√∫ng t·ª´ N·ªôi dung/S·ªë li·ªáu
        if 'N·ªôi dung' in df_period.columns and 'S·ªë li·ªáu' in df_period.columns:
            for metric in parking_metrics:
                df_period[metric] = 0

            # Mapping c√°c metric t·ª´ N·ªôi dung - d·ª±a tr√™n data th·ª±c t·∫ø
            metric_mapping = {
                've_ngay': ['T·ªïng s·ªë l∆∞·ª£t v√© ng√†y'],
                've_thang': ['T·ªïng s·ªë l∆∞·ª£t v√© th√°ng'],
                'doanh_thu': ['Doanh thu'],
                'cong_suat': ['C√¥ng su·∫•t trung b√¨nh/ng√†y'],
                'ty_le_su_dung': ['T·ª∑ l·ªá s·ª≠ d·ª•ng'],
                'khieu_nai': ['S·ªë ph·∫£n √°nh khi·∫øu n·∫°i']
            }

            for metric, content_names in metric_mapping.items():
                for content_name in content_names:
                    mask = df_period['N·ªôi dung'] == content_name
                    df_period.loc[mask, metric] = pd.to_numeric(df_period.loc[mask, 'S·ªë li·ªáu'], errors='coerce').fillna(0)

        # T·∫°o pivot data
        pivot_data = df_period.groupby(['period', 'period_sort'])[parking_metrics].sum().reset_index()
        pivot_data = pivot_data.sort_values('period_sort', ascending=False)

        # T√≠nh to√°n bi·∫øn ƒë·ªông so v·ªõi k·ª≥ tr∆∞·ªõc
        for col in parking_metrics:
            pivot_data[f'{col}_prev'] = pivot_data[col].shift(-1)
            pivot_data[f'{col}_change'] = pivot_data[col] - pivot_data[f'{col}_prev']
            pivot_data[f'{col}_change_pct'] = ((pivot_data[col] / pivot_data[f'{col}_prev'] - 1) * 100).round(1)
            pivot_data[f'{col}_change_pct'] = pivot_data[f'{col}_change_pct'].fillna(0)

        # T·∫°o DataFrame hi·ªÉn th·ªã v·ªõi bi·∫øn ƒë·ªông trong c√πng cell
        display_data = pivot_data.copy()

        # H√†m t·∫°o cell k·∫øt h·ª£p gi√° tr·ªã v√† bi·∫øn ƒë·ªông v·ªõi comma formatting
        def format_cell_with_change(row, col):
            current_val = row[col]
            change_val = row[f'{col}_change']
            change_pct = row[f'{col}_change_pct']
            prev_val = row[f'{col}_prev']

            # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu k·ª≥ tr∆∞·ªõc, ch·ªâ hi·ªÉn th·ªã gi√° tr·ªã hi·ªán t·∫°i v·ªõi comma
            if pd.isna(prev_val) or prev_val == 0:
                if col == 'ty_le_su_dung':
                    return f"{current_val:.1f}%"
                return f"{int(current_val):,}"

            # ƒê·ªãnh m√†u s·∫Øc theo chi·ªÅu h∆∞·ªõng thay ƒë·ªïi
            if change_val > 0:
                color_class = "increase"
                arrow = "‚Üó"
                sign = "+"
            elif change_val < 0:
                color_class = "decrease"
                arrow = "‚Üò"
                sign = ""
            else:
                color_class = "neutral"
                arrow = "‚Üí"
                sign = ""

            # Tr·∫£ v·ªÅ HTML v·ªõi m√†u s·∫Øc v√† comma formatting
            if col == 'ty_le_su_dung':
                return f"""<div style="text-align: center; line-height: 1.2;">
                    <div style="font-size: 16px; font-weight: 600;">{current_val:.1f}%</div>
                    <div class="{color_class}" style="font-size: 12px; margin-top: 2px;">
                        {arrow} {sign}{change_val:.1f} ({change_pct:+.1f}%)
                    </div>
                </div>"""
            else:
                return f"""<div style="text-align: center; line-height: 1.2;">
                    <div style="font-size: 16px; font-weight: 600;">{int(current_val):,}</div>
                    <div class="{color_class}" style="font-size: 12px; margin-top: 2px;">
                        {arrow} {sign}{int(change_val):,} ({change_pct:+.1f}%)
                    </div>
                </div>"""

        # T·∫°o c·ªôt hi·ªÉn th·ªã m·ªõi
        display_columns = ['period']
        column_names = {f'period': f'{period_type}'}

        for col in parking_metrics:
            new_col = f'{col}_display'
            display_data[new_col] = display_data.apply(lambda row: format_cell_with_change(row, col), axis=1)
            display_columns.append(new_col)

            # Mapping t√™n c·ªôt cho hi·ªÉn th·ªã
            metric_names = {
                've_ngay': 'V√© ng√†y',
                've_thang': 'V√© th√°ng',
                'doanh_thu': 'Doanh thu (VND)',
                'cong_suat': 'C√¥ng su·∫•t',
                'ty_le_su_dung': 'T·ª∑ l·ªá SD (%)',
                'khieu_nai': 'Khi·∫øu n·∫°i'
            }
            column_names[new_col] = metric_names.get(col, col)

        st.markdown(f"#### üìã T·ªïng h·ª£p theo {period_type} (bao g·ªìm bi·∫øn ƒë·ªông)")

        # Hi·ªÉn th·ªã b·∫£ng v·ªõi HTML ƒë·ªÉ render m√†u s·∫Øc
        df_display = display_data[display_columns].rename(columns=column_names)

        # T·∫°o HTML table v·ªõi sticky header
        html_table = "<div style='max-height: 400px; overflow-y: auto; border: 1px solid #ddd;'><table class='pivot-table-parking' style='width: 100%; border-collapse: collapse; font-size: 16px;'>"

        # Header v·ªõi sticky positioning
        html_table += "<thead><tr>"
        for col in df_display.columns:
            html_table += f"<th style='position: sticky; top: 0; padding: 15px 8px; text-align: center; background-color: #f0f2f6; font-weight: bold; font-size: 17px; border: 1px solid #ddd; z-index: 10;'>{col}</th>"
        html_table += "</tr></thead>"

        # Body
        html_table += "<tbody>"
        for _, row in df_display.iterrows():
            html_table += "<tr>"
            for i, col in enumerate(df_display.columns):
                cell_value = row[col]
                style = "padding: 12px 8px; text-align: center; border: 1px solid #ddd;"
                html_table += f"<td style='{style}'>{cell_value}</td>"
            html_table += "</tr>"
        html_table += "</tbody></table></div>"

        st.markdown(html_table, unsafe_allow_html=True)

    else:
        st.info("üìä D·ªØ li·ªáu ch∆∞a c√≥ th√¥ng tin th·ªùi gian ƒë·ªÉ t·∫°o pivot table")
        # Hi·ªÉn th·ªã d·ªØ li·ªáu c∆° b·∫£n v·ªõi comma formatting
        if 'N·ªôi dung' in df.columns and 'S·ªë li·ªáu' in df.columns:
            summary_data = df[['N·ªôi dung', 'S·ªë li·ªáu']].copy()
            # Clean and format numbers with commas
            def format_summary_number(x):
                cleaned = str(x).replace('\xa0', '').replace(' ', '').strip()
                numeric_val = pd.to_numeric(cleaned, errors='coerce')
                if pd.isna(numeric_val):
                    return str(x)
                elif numeric_val >= 1:
                    return f"{numeric_val:,.0f}"
                else:
                    return f"{numeric_val:.1f}"

            summary_data['S·ªë li·ªáu'] = summary_data['S·ªë li·ªáu'].apply(format_summary_number)
            st.dataframe(summary_data, use_container_width=True, hide_index=True)

    return period_type

# H√†m t·∫°o charts cho T·ªï xe - gi·ªëng nh∆∞ document tabs
def create_vehicle_charts(df):
    col1, col2 = st.columns(2)

    with col1:
        # Chart doanh thu theo tu·∫ßn
        revenue_data = df[df['N·ªôi dung'] == 'Doanh thu T·ªï xe']
        if not revenue_data.empty and 'Tu·∫ßn' in revenue_data.columns:
            revenue_trend = revenue_data.copy()
            revenue_trend['Tu·∫ßn'] = pd.to_numeric(revenue_trend['Tu·∫ßn'], errors='coerce')
            revenue_trend['Doanh thu'] = pd.to_numeric(revenue_trend['S·ªë li·ªáu'].astype(str).str.replace('\xa0', '').str.replace(' ', '').str.strip(), errors='coerce')
            revenue_trend = revenue_trend.dropna().sort_values('Tu·∫ßn')

            fig_revenue = go.Figure()
            fig_revenue.add_trace(go.Scatter(
                x=revenue_trend['Tu·∫ßn'],
                y=revenue_trend['Doanh thu'],
                mode='lines+markers',
                name='Doanh thu',
                line=dict(color='#1f77b4', width=2),
                marker=dict(size=8)
            ))

            # ƒê∆∞·ªùng xu h∆∞·ªõng (n·∫øu ƒë·ªß d·ªØ li·ªáu)
            if len(revenue_trend) >= 3:
                ma_window = min(3, len(revenue_trend)//2)
                ma_trend = revenue_trend['Doanh thu'].rolling(window=ma_window, center=True).mean()
                fig_revenue.add_trace(go.Scatter(
                    x=revenue_trend['Tu·∫ßn'],
                    y=ma_trend,
                    mode='lines',
                    name=f'Xu h∆∞·ªõng ({ma_window} tu·∫ßn)',
                    line=dict(color='red', width=3, dash='dash'),
                    opacity=0.8
                ))

            fig_revenue.update_layout(
                title='üí∞ Doanh thu theo tu·∫ßn (c√≥ xu h∆∞·ªõng)',
                xaxis_title='Tu·∫ßn',
                yaxis_title='Doanh thu (VNƒê)',
                hovermode='x unified'
            )
            st.plotly_chart(fig_revenue, use_container_width=True)

    with col2:
        # Chart km ch·∫°y theo tu·∫ßn
        km_data = df[df['N·ªôi dung'] == 'T·ªïng km ch·∫°y']
        if not km_data.empty and 'Tu·∫ßn' in km_data.columns:
            km_trend = km_data.copy()
            km_trend['Tu·∫ßn'] = pd.to_numeric(km_trend['Tu·∫ßn'], errors='coerce')
            km_trend['Km ch·∫°y'] = pd.to_numeric(km_trend['S·ªë li·ªáu'].astype(str).str.replace('\xa0', '').str.replace(' ', '').str.strip(), errors='coerce')
            km_trend = km_trend.dropna().sort_values('Tu·∫ßn')

            fig_km = go.Figure()
            fig_km.add_trace(go.Scatter(
                x=km_trend['Tu·∫ßn'],
                y=km_trend['Km ch·∫°y'],
                mode='lines+markers',
                name='Km ch·∫°y',
                line=dict(color='#1f77b4', width=2),
                marker=dict(size=8)
            ))

            # ƒê∆∞·ªùng xu h∆∞·ªõng
            if len(km_trend) >= 3:
                ma_window = min(3, len(km_trend)//2)
                ma_trend = km_trend['Km ch·∫°y'].rolling(window=ma_window, center=True).mean()
                fig_km.add_trace(go.Scatter(
                    x=km_trend['Tu·∫ßn'],
                    y=ma_trend,
                    mode='lines',
                    name=f'Xu h∆∞·ªõng ({ma_window} tu·∫ßn)',
                    line=dict(color='red', width=3, dash='dash'),
                    opacity=0.8
                ))

            fig_km.update_layout(
                title='üõ£Ô∏è Km ch·∫°y theo tu·∫ßn (c√≥ xu h∆∞·ªõng)',
                xaxis_title='Tu·∫ßn',
                yaxis_title='Km ch·∫°y',
                hovermode='x unified'
            )
            st.plotly_chart(fig_km, use_container_width=True)

# Tab 4: T·ªï xe
with tab4:
    st.markdown('<div class="tab-header">üöó B√°o c√°o T·ªï xe</div>', unsafe_allow_html=True)

    def create_vehicle_data():
        """T·∫°o d·ªØ li·ªáu m·∫´u cho t·ªï xe t·ª´ format ƒë√£ cho"""
        return pd.DataFrame({
            'Tu·∫ßn': [39, 39, 39, 39, 39, 39, 39, 39, 39],
            'Th√°ng': [9, 9, 9, 9, 9, 9, 9, 9, 9],
            'N·ªôi dung': [
                'S·ªë chuy·∫øn xe',
                'T·ªïng s·ªë nhi√™n li·ªáu ti√™u th·ª•',
                'T·ªïng km ch·∫°y',
                'Km ch·∫°y c·ªßa h√†nh ch√≠nh',
                'Km ch·∫°y c·ªßa xe c·ª©u th∆∞∆°ng',
                'Chi ph√≠ b·∫£o d∆∞·ª°ng',
                'Doanh thu T·ªï xe',
                'S·ªë phi·∫øu kh·∫£o s√°t h√†i l√≤ng',
                'T·ª∑ l·ªá h√†i l√≤ng c·ªßa kh√°ch h√†ng'
            ],
            'S·ªë li·ªáu': [245, 1200, 8500, 5200, 3300, 15000000, 25000000, 180, 92.5]
        })

    # Load data t·ª´ DataManager ho·∫∑c d·ªØ li·ªáu m·∫´u
    df_vehicle = data_manager.get_category_data('T·ªï xe')

    if df_vehicle is not None:
        st.info(f"‚úÖ ƒê√£ t·∫£i {len(df_vehicle)} b·∫£n ghi cho T·ªï xe t·ª´ file: {data_manager.metadata['filename']}")
    else:
        st.info("üìÅ Ch∆∞a c√≥ d·ªØ li·ªáu ƒë∆∞·ª£c t·∫£i t·ª´ sidebar. Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u.")
        df_vehicle = create_vehicle_data()

    if not df_vehicle.empty:
        # Metrics overview t·ªïng quan
        st.markdown('<div class="section-header">üìä T·ªïng quan ho·∫°t ƒë·ªông T·ªï xe</div>', unsafe_allow_html=True)

        col1, col2, col3, col4 = st.columns(4)

        # Debug: Hi·ªÉn th·ªã c·∫•u tr√∫c d·ªØ li·ªáu
        with st.expander("üîç Debug: C·∫•u tr√∫c d·ªØ li·ªáu T·ªï xe", expanded=False):
            st.write("**Columns:**", list(df_vehicle.columns))
            st.write("**Shape:**", df_vehicle.shape)
            if 'N·ªôi dung' in df_vehicle.columns:
                st.write("**N·ªôi dung values:**", df_vehicle['N·ªôi dung'].unique().tolist())
            st.dataframe(df_vehicle.head())

        # T√≠nh to√°n metrics t·ª´ d·ªØ li·ªáu - C·ªòNG T·ªîNG T·∫§T C·∫¢ C√ÅC TU·∫¶N
        def get_metric_value(content_name):
            if 'N·ªôi dung' not in df_vehicle.columns or 'S·ªë li·ªáu' not in df_vehicle.columns:
                return 0

            # L·∫•y t·∫•t c·∫£ c√°c h√†ng c√≥ n·ªôi dung n√†y v√† c·ªông t·ªïng
            result = df_vehicle[df_vehicle['N·ªôi dung'] == content_name]['S·ªë li·ªáu']
            if len(result) > 0:
                # Clean data: remove non-breaking spaces and other whitespace characters
                cleaned_result = result.astype(str).str.replace('\xa0', '').str.replace(' ', '').str.strip()
                # Convert t·∫•t c·∫£ values th√†nh numeric v√† c·ªông t·ªïng
                numeric_values = pd.to_numeric(cleaned_result, errors='coerce').fillna(0)
                total = numeric_values.sum()
                return total
            return 0

        so_chuyen = get_metric_value('S·ªë chuy·∫øn xe')
        km_chay = get_metric_value('T·ªïng km ch·∫°y')
        doanh_thu = get_metric_value('Doanh thu T·ªï xe')

        with col1:
            st.metric("üöó S·ªë chuy·∫øn", f"{int(so_chuyen):,}", help="T·ªïng s·ªë chuy·∫øn xe t·∫•t c·∫£ c√°c tu·∫ßn")
        with col2:
            st.metric("üõ£Ô∏è T·ªïng km", f"{int(km_chay):,}", help="T·ªïng s·ªë kilomet ƒë√£ ch·∫°y t·∫•t c·∫£ c√°c tu·∫ßn")
        with col3:
            st.metric("üí∞ Doanh thu", f"{int(doanh_thu):,}", help="T·ªïng doanh thu T·ªï xe t·∫•t c·∫£ c√°c tu·∫ßn (VNƒê)")
        with col4:
            # T√≠nh trung b√¨nh t·ª∑ l·ªá h√†i l√≤ng - CH·ªà T√çNH NH·ªÆNG TU·∫¶N C√ì KH·∫¢O S√ÅT
            hai_long_data = df_vehicle[df_vehicle['N·ªôi dung'] == 'T·ª∑ l·ªá h√†i l√≤ng c·ªßa kh√°ch h√†ng']['S·ªë li·ªáu']
            if len(hai_long_data) > 0:
                # Clean data: remove non-breaking spaces and other whitespace characters
                cleaned_hai_long = hai_long_data.astype(str).str.replace('\xa0', '').str.replace(' ', '').str.strip()
                hai_long_numeric = pd.to_numeric(cleaned_hai_long, errors='coerce')
                # Ch·ªâ t√≠nh nh·ªØng tu·∫ßn c√≥ t·ª∑ l·ªá h√†i l√≤ng > 0 (c√≥ l√†m kh·∫£o s√°t)
                hai_long_valid = hai_long_numeric[hai_long_numeric > 0]
                hai_long_avg = hai_long_valid.mean() if len(hai_long_valid) > 0 else 0
            else:
                hai_long_avg = 0
            st.metric("üòä H√†i l√≤ng", f"{hai_long_avg:.1f}%", help="T·ª∑ l·ªá h√†i l√≤ng trung b√¨nh (ch·ªâ t√≠nh tu·∫ßn c√≥ kh·∫£o s√°t)")

        # Th√™m h√†ng metrics th·ª© 2
        col5, col6, col7, col8 = st.columns(4)

        nhien_lieu = get_metric_value('T·ªïng s·ªë nhi√™n li·ªáu ti√™u th·ª•')
        # X·ª≠ l√Ω typo trong d·ªØ li·ªáu th·ª±c: "Km ch·∫°y c·ªßa Km ch·∫°y c·ªßa xe h√†nh ch√≠nh"
        km_hanh_chinh = get_metric_value('Km ch·∫°y c·ªßa Km ch·∫°y c·ªßa xe h√†nh ch√≠nh') or get_metric_value('Km ch·∫°y c·ªßa h√†nh ch√≠nh')
        km_cuu_thuong = get_metric_value('Km ch·∫°y c·ªßa Km ch·∫°y c·ªßa xe c·ª©u th∆∞∆°ng') or get_metric_value('Km ch·∫°y c·ªßa xe c·ª©u th∆∞∆°ng')
        bao_duong = get_metric_value('Chi ph√≠ b·∫£o d∆∞·ª°ng')

        with col5:
            st.metric("‚õΩ Nhi√™n li·ªáu", f"{int(nhien_lieu):,}", help="T·ªïng nhi√™n li·ªáu ti√™u th·ª• t·∫•t c·∫£ c√°c tu·∫ßn (l√≠t)")
        with col6:
            st.metric("üè¢ H√†nh ch√≠nh", f"{int(km_hanh_chinh):,} km", help="T·ªïng km ch·∫°y h√†nh ch√≠nh t·∫•t c·∫£ c√°c tu·∫ßn")
        with col7:
            st.metric("üöë C·ª©u th∆∞∆°ng", f"{int(km_cuu_thuong):,} km", help="T·ªïng km ch·∫°y xe c·ª©u th∆∞∆°ng t·∫•t c·∫£ c√°c tu·∫ßn")
        with col8:
            st.metric("üîß B·∫£o d∆∞·ª°ng", f"{int(bao_duong):,}", help="T·ªïng chi ph√≠ b·∫£o d∆∞·ª°ng t·∫•t c·∫£ c√°c tu·∫ßn (VNƒê)")

        st.markdown("<br>", unsafe_allow_html=True)

        # Pivot Table Section - gi·ªëng nh∆∞ document tabs
        create_vehicle_pivot_table(df_vehicle)

        st.markdown("<br>", unsafe_allow_html=True)

        # Bi·ªÉu ƒë·ªì t·ªïng quan
        st.markdown('<div class="section-header">üìà Bi·ªÉu ƒë·ªì ph√¢n t√≠ch</div>', unsafe_allow_html=True)

        col_chart1, col_chart2 = st.columns(2)

        with col_chart1:
            # Bi·ªÉu ƒë·ªì ph√¢n b·ªë km ch·∫°y (x·ª≠ l√Ω typo)
            km_patterns = ['Km ch·∫°y c·ªßa Km ch·∫°y c·ªßa xe h√†nh ch√≠nh', 'Km ch·∫°y c·ªßa Km ch·∫°y c·ªßa xe c·ª©u th∆∞∆°ng',
                          'Km ch·∫°y c·ªßa h√†nh ch√≠nh', 'Km ch·∫°y c·ªßa xe c·ª©u th∆∞∆°ng']
            km_data = df_vehicle[df_vehicle['N·ªôi dung'].isin(km_patterns)]

            if not km_data.empty:
                # L√†m s·∫°ch t√™n hi·ªÉn th·ªã
                km_data_clean = km_data.copy()
                km_data_clean['N·ªôi dung'] = km_data_clean['N·ªôi dung'].str.replace('Km ch·∫°y c·ªßa Km ch·∫°y c·ªßa xe ', '').str.replace('Km ch·∫°y c·ªßa ', '')

                fig_km = px.pie(km_data_clean, values='S·ªë li·ªáu', names='N·ªôi dung',
                              title='üõ£Ô∏è Ph√¢n b·ªë Km ch·∫°y theo lo·∫°i xe',
                              hole=0.4)
                fig_km.update_layout(height=400)
                st.plotly_chart(fig_km, use_container_width=True)

        with col_chart2:
            # Bi·ªÉu ƒë·ªì doanh thu vs chi ph√≠
            finance_data = df_vehicle[df_vehicle['N·ªôi dung'].isin(['Doanh thu T·ªï xe', 'Chi ph√≠ b·∫£o d∆∞·ª°ng'])]
            if not finance_data.empty:
                fig_finance = px.bar(finance_data, x='N·ªôi dung', y='S·ªë li·ªáu',
                                   title='üí∞ So s√°nh Doanh thu - Chi ph√≠',
                                   color='N·ªôi dung')
                fig_finance.update_layout(height=400)
                st.plotly_chart(fig_finance, use_container_width=True)

        # Bi·ªÉu ƒë·ªì ph√¢n t√≠ch chi ti·∫øt
        st.markdown('<div class="section-header">üìà Bi·ªÉu ƒë·ªì ph√¢n t√≠ch chi ti·∫øt</div>', unsafe_allow_html=True)

        # Bi·ªÉu ƒë·ªì ph√¢n t√≠ch theo th·ªùi gian
        col_chart3, col_chart4 = st.columns(2)

        with col_chart3:
            # Xu h∆∞·ªõng s·ªë chuy·∫øn v√† doanh thu theo tu·∫ßn
            vehicle_time_data = df_vehicle[df_vehicle['N·ªôi dung'].isin(['S·ªë chuy·∫øn xe', 'Doanh thu T·ªï xe'])]

            if not vehicle_time_data.empty and 'Tu·∫ßn' in vehicle_time_data.columns:
                # Pivot ƒë·ªÉ c√≥ s·ªë chuy·∫øn v√† doanh thu theo tu·∫ßn
                time_pivot = vehicle_time_data.pivot(index='Tu·∫ßn', columns='N·ªôi dung', values='S·ªë li·ªáu').fillna(0)
                time_pivot = time_pivot.reset_index()
                time_pivot['Tu·∫ßn'] = pd.to_numeric(time_pivot['Tu·∫ßn'], errors='coerce')
                time_pivot = time_pivot.sort_values('Tu·∫ßn')

                if 'Doanh thu T·ªï xe' in time_pivot.columns and 'S·ªë chuy·∫øn xe' in time_pivot.columns:
                    time_pivot['Doanh thu T·ªï xe'] = pd.to_numeric(time_pivot['Doanh thu T·ªï xe'], errors='coerce')
                    time_pivot['S·ªë chuy·∫øn xe'] = pd.to_numeric(time_pivot['S·ªë chuy·∫øn xe'], errors='coerce')

                    fig_trend = go.Figure()

                    # Doanh thu (tr·ª•c y b√™n tr√°i)
                    fig_trend.add_trace(go.Scatter(
                        x=time_pivot['Tu·∫ßn'],
                        y=time_pivot['Doanh thu T·ªï xe'],
                        name='Doanh thu',
                        line=dict(color='#2ecc71', width=3),
                        yaxis='y'
                    ))

                    # S·ªë chuy·∫øn (tr·ª•c y b√™n ph·∫£i)
                    fig_trend.add_trace(go.Scatter(
                        x=time_pivot['Tu·∫ßn'],
                        y=time_pivot['S·ªë chuy·∫øn xe'],
                        name='S·ªë chuy·∫øn',
                        line=dict(color='#3498db', width=3),
                        yaxis='y2'
                    ))

                    fig_trend.update_layout(
                        title='üìà Xu h∆∞·ªõng doanh thu v√† s·ªë chuy·∫øn theo tu·∫ßn',
                        height=350,
                        xaxis=dict(title='Tu·∫ßn', title_standoff=35),
                        yaxis=dict(title='Doanh thu (VNƒê)', side='left', color='#2ecc71'),
                        yaxis2=dict(title='S·ªë chuy·∫øn', side='right', overlaying='y', color='#3498db'),
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=-0.35,
                            xanchor="center",
                            x=0.5
                        ),
                        margin=dict(b=100)
                    )

                    st.plotly_chart(fig_trend, use_container_width=True)

        with col_chart4:
            # Xu h∆∞·ªõng km ch·∫°y theo tu·∫ßn
            km_time_data = df_vehicle[df_vehicle['N·ªôi dung'].isin(['T·ªïng km ch·∫°y', 'T·ªïng s·ªë nhi√™n li·ªáu ti√™u th·ª•'])]

            if not km_time_data.empty and 'Tu·∫ßn' in km_time_data.columns:
                km_pivot = km_time_data.pivot(index='Tu·∫ßn', columns='N·ªôi dung', values='S·ªë li·ªáu').fillna(0)
                km_pivot = km_pivot.reset_index()
                km_pivot['Tu·∫ßn'] = pd.to_numeric(km_pivot['Tu·∫ßn'], errors='coerce')
                km_pivot = km_pivot.sort_values('Tu·∫ßn')

                if 'T·ªïng km ch·∫°y' in km_pivot.columns and 'T·ªïng s·ªë nhi√™n li·ªáu ti√™u th·ª•' in km_pivot.columns:
                    km_pivot['T·ªïng km ch·∫°y'] = pd.to_numeric(km_pivot['T·ªïng km ch·∫°y'], errors='coerce')
                    km_pivot['T·ªïng s·ªë nhi√™n li·ªáu ti√™u th·ª•'] = pd.to_numeric(km_pivot['T·ªïng s·ªë nhi√™n li·ªáu ti√™u th·ª•'], errors='coerce')

                    fig_km_trend = go.Figure()

                    # Km ch·∫°y
                    fig_km_trend.add_trace(go.Scatter(
                        x=km_pivot['Tu·∫ßn'],
                        y=km_pivot['T·ªïng km ch·∫°y'],
                        name='Km ch·∫°y',
                        line=dict(color='#9b59b6', width=3),
                        yaxis='y'
                    ))

                    # Nhi√™n li·ªáu (tr·ª•c ph·∫£i)
                    fig_km_trend.add_trace(go.Scatter(
                        x=km_pivot['Tu·∫ßn'],
                        y=km_pivot['T·ªïng s·ªë nhi√™n li·ªáu ti√™u th·ª•'],
                        name='Nhi√™n li·ªáu',
                        line=dict(color='#f39c12', width=3),
                        yaxis='y2'
                    ))

                    fig_km_trend.update_layout(
                        title='üõ£Ô∏è Xu h∆∞·ªõng km ch·∫°y v√† nhi√™n li·ªáu theo tu·∫ßn',
                        height=350,
                        xaxis=dict(title='Tu·∫ßn', title_standoff=35),
                        yaxis=dict(title='Km ch·∫°y', side='left', color='#9b59b6'),
                        yaxis2=dict(title='Nhi√™n li·ªáu (l√≠t)', side='right', overlaying='y', color='#f39c12'),
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=-0.35,
                            xanchor="center",
                            x=0.5
                        ),
                        margin=dict(b=100)
                    )

                    st.plotly_chart(fig_km_trend, use_container_width=True)

        # Row 2: Ph√¢n t√≠ch ch·∫•t l∆∞·ª£ng v√† chi ph√≠ theo th·ªùi gian
        col_chart5, col_chart6 = st.columns(2)

        with col_chart5:
            # Xu h∆∞·ªõng ch·∫•t l∆∞·ª£ng d·ªãch v·ª• theo tu·∫ßn
            quality_time_data = df_vehicle[df_vehicle['N·ªôi dung'].isin(['T·ª∑ l·ªá h√†i l√≤ng c·ªßa kh√°ch h√†ng', 'S·ªë phi·∫øu kh·∫£o s√°t h√†i l√≤ng'])]

            if not quality_time_data.empty and 'Tu·∫ßn' in quality_time_data.columns:
                quality_pivot = quality_time_data.pivot(index='Tu·∫ßn', columns='N·ªôi dung', values='S·ªë li·ªáu').fillna(0)
                quality_pivot = quality_pivot.reset_index()
                quality_pivot['Tu·∫ßn'] = pd.to_numeric(quality_pivot['Tu·∫ßn'], errors='coerce')
                quality_pivot = quality_pivot.sort_values('Tu·∫ßn')

                if 'T·ª∑ l·ªá h√†i l√≤ng c·ªßa kh√°ch h√†ng' in quality_pivot.columns:
                    quality_pivot['T·ª∑ l·ªá h√†i l√≤ng c·ªßa kh√°ch h√†ng'] = pd.to_numeric(quality_pivot['T·ª∑ l·ªá h√†i l√≤ng c·ªßa kh√°ch h√†ng'], errors='coerce')

                    fig_quality_trend = px.line(
                        quality_pivot,
                        x='Tu·∫ßn',
                        y='T·ª∑ l·ªá h√†i l√≤ng c·ªßa kh√°ch h√†ng',
                        title='üòä Xu h∆∞·ªõng m·ª©c ƒë·ªô h√†i l√≤ng theo tu·∫ßn',
                        line_shape='linear',
                        color_discrete_sequence=['#27ae60']
                    )
                    fig_quality_trend.update_layout(height=300, yaxis_title='T·ª∑ l·ªá h√†i l√≤ng (%)')
                    fig_quality_trend.update_traces(line_width=3)
                    st.plotly_chart(fig_quality_trend, use_container_width=True)

        with col_chart6:
            # Xu h∆∞·ªõng chi ph√≠ b·∫£o d∆∞·ª°ng theo tu·∫ßn
            cost_time_data = df_vehicle[df_vehicle['N·ªôi dung'] == 'Chi ph√≠ b·∫£o d∆∞·ª°ng']

            if not cost_time_data.empty and 'Tu·∫ßn' in cost_time_data.columns:
                cost_time_data['Tu·∫ßn'] = pd.to_numeric(cost_time_data['Tu·∫ßn'], errors='coerce')
                cost_time_data['Chi ph√≠ b·∫£o d∆∞·ª°ng'] = pd.to_numeric(cost_time_data['S·ªë li·ªáu'], errors='coerce')
                cost_time_data = cost_time_data.sort_values('Tu·∫ßn')

                fig_cost_trend = px.bar(
                    cost_time_data,
                    x='Tu·∫ßn',
                    y='Chi ph√≠ b·∫£o d∆∞·ª°ng',
                    title='üîß Chi ph√≠ b·∫£o d∆∞·ª°ng theo tu·∫ßn',
                    color_discrete_sequence=['#e74c3c']
                )
                fig_cost_trend.update_layout(height=300, yaxis_title='Chi ph√≠ (VNƒê)')
                st.plotly_chart(fig_cost_trend, use_container_width=True)

        # üìà Bi·ªÉu ƒë·ªì ph√¢n t√≠ch chi ti·∫øt
        st.markdown('<div class="section-header">üìà Bi·ªÉu ƒë·ªì ph√¢n t√≠ch chi ti·∫øt</div>', unsafe_allow_html=True)

        # Row 3: Bi·ªÉu ƒë·ªì ph√¢n t√≠ch chi ti·∫øt theo format 2 bi·ªÉu ƒë·ªì cu·ªëi
        col_detail1, col_detail2 = st.columns(2)

        with col_detail1:
            # Bi·ªÉu ƒë·ªì ph√¢n t√≠ch hi·ªáu su·∫•t v·∫≠n h√†nh (km h√†nh ch√≠nh vs c·ª©u th∆∞∆°ng)
            km_detail_data = df_vehicle[df_vehicle['N·ªôi dung'].isin(['Km ch·∫°y c·ªßa h√†nh ch√≠nh', 'Km ch·∫°y c·ªßa xe c·ª©u th∆∞∆°ng'])]

            if not km_detail_data.empty and 'Tu·∫ßn' in km_detail_data.columns:
                km_detail_pivot = km_detail_data.pivot(index='Tu·∫ßn', columns='N·ªôi dung', values='S·ªë li·ªáu').fillna(0).infer_objects(copy=False)
                km_detail_pivot = km_detail_pivot.reset_index()
                km_detail_pivot['Tu·∫ßn'] = pd.to_numeric(km_detail_pivot['Tu·∫ßn'], errors='coerce')
                km_detail_pivot = km_detail_pivot.sort_values('Tu·∫ßn')

                if 'Km ch·∫°y c·ªßa h√†nh ch√≠nh' in km_detail_pivot.columns and 'Km ch·∫°y c·ªßa xe c·ª©u th∆∞∆°ng' in km_detail_pivot.columns:
                    km_detail_pivot['Km ch·∫°y c·ªßa h√†nh ch√≠nh'] = pd.to_numeric(km_detail_pivot['Km ch·∫°y c·ªßa h√†nh ch√≠nh'], errors='coerce')
                    km_detail_pivot['Km ch·∫°y c·ªßa xe c·ª©u th∆∞∆°ng'] = pd.to_numeric(km_detail_pivot['Km ch·∫°y c·ªßa xe c·ª©u th∆∞∆°ng'], errors='coerce')

                    fig_km_detail = go.Figure()

                    # Km h√†nh ch√≠nh
                    fig_km_detail.add_trace(go.Scatter(
                        x=km_detail_pivot['Tu·∫ßn'],
                        y=km_detail_pivot['Km ch·∫°y c·ªßa h√†nh ch√≠nh'],
                        mode='lines',
                        name='Km h√†nh ch√≠nh',
                        line=dict(color='#3498db', width=3),
                        yaxis='y'
                    ))

                    # Km c·ª©u th∆∞∆°ng (tr·ª•c ph·∫£i)
                    fig_km_detail.add_trace(go.Scatter(
                        x=km_detail_pivot['Tu·∫ßn'],
                        y=km_detail_pivot['Km ch·∫°y c·ªßa xe c·ª©u th∆∞∆°ng'],
                        mode='lines',
                        name='Km c·ª©u th∆∞∆°ng',
                        line=dict(color='#e74c3c', width=3),
                        yaxis='y2'
                    ))

                    fig_km_detail.update_layout(
                        title='üöó Ph√¢n t√≠ch km ch·∫°y theo lo·∫°i xe',
                        height=350,
                        xaxis=dict(title='Tu·∫ßn', title_standoff=35),
                        yaxis=dict(title='Km h√†nh ch√≠nh', side='left', color='#3498db'),
                        yaxis2=dict(title='Km c·ª©u th∆∞∆°ng', side='right', overlaying='y', color='#e74c3c'),
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=-0.35,
                            xanchor="center",
                            x=0.5
                        ),
                        margin=dict(b=100)
                    )

                    st.plotly_chart(fig_km_detail, use_container_width=True)

        with col_detail2:
            # Bi·ªÉu ƒë·ªì t∆∞∆°ng quan doanh thu - chi ph√≠
            revenue_cost_data = df_vehicle[df_vehicle['N·ªôi dung'].isin(['Doanh thu T·ªï xe', 'Chi ph√≠ b·∫£o d∆∞·ª°ng'])]

            if not revenue_cost_data.empty and 'Tu·∫ßn' in revenue_cost_data.columns:
                rc_pivot = revenue_cost_data.pivot(index='Tu·∫ßn', columns='N·ªôi dung', values='S·ªë li·ªáu').fillna(0).infer_objects(copy=False)
                rc_pivot = rc_pivot.reset_index()
                rc_pivot['Tu·∫ßn'] = pd.to_numeric(rc_pivot['Tu·∫ßn'], errors='coerce')
                rc_pivot = rc_pivot.sort_values('Tu·∫ßn')

                if 'Doanh thu T·ªï xe' in rc_pivot.columns and 'Chi ph√≠ b·∫£o d∆∞·ª°ng' in rc_pivot.columns:
                    rc_pivot['Doanh thu T·ªï xe'] = pd.to_numeric(rc_pivot['Doanh thu T·ªï xe'], errors='coerce')
                    rc_pivot['Chi ph√≠ b·∫£o d∆∞·ª°ng'] = pd.to_numeric(rc_pivot['Chi ph√≠ b·∫£o d∆∞·ª°ng'], errors='coerce')

                    fig_revenue_cost = go.Figure()

                    # Doanh thu
                    fig_revenue_cost.add_trace(go.Scatter(
                        x=rc_pivot['Tu·∫ßn'],
                        y=rc_pivot['Doanh thu T·ªï xe'],
                        mode='lines',
                        name='Doanh thu',
                        line=dict(color='#2ecc71', width=3),
                        yaxis='y'
                    ))

                    # Chi ph√≠ (tr·ª•c ph·∫£i)
                    fig_revenue_cost.add_trace(go.Scatter(
                        x=rc_pivot['Tu·∫ßn'],
                        y=rc_pivot['Chi ph√≠ b·∫£o d∆∞·ª°ng'],
                        mode='lines',
                        name='Chi ph√≠ b·∫£o d∆∞·ª°ng',
                        line=dict(color='#f39c12', width=3),
                        yaxis='y2'
                    ))

                    fig_revenue_cost.update_layout(
                        title='üí∞ Ph√¢n t√≠ch doanh thu - chi ph√≠',
                        height=350,
                        xaxis=dict(title='Tu·∫ßn', title_standoff=35),
                        yaxis=dict(title='Doanh thu (VNƒê)', side='left', color='#2ecc71'),
                        yaxis2=dict(title='Chi ph√≠ (VNƒê)', side='right', overlaying='y', color='#f39c12'),
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=-0.35,
                            xanchor="center",
                            x=0.5
                        ),
                        margin=dict(b=100)
                    )

                    st.plotly_chart(fig_revenue_cost, use_container_width=True)

        # Bi·ªÉu ƒë·ªì gi·ªëng nh∆∞ document tabs
        create_vehicle_charts(df_vehicle)

        # B·∫£ng d·ªØ li·ªáu chi ti·∫øt
        st.markdown('<div class="section-header">üìä D·ªØ li·ªáu chi ti·∫øt</div>', unsafe_allow_html=True)

        # Hi·ªÉn th·ªã b·∫£ng v·ªõi formatting
        display_df = df_vehicle.copy()
        # Clean and format the data display
        def clean_and_format_number(x):
            # Clean non-breaking spaces and other whitespace
            cleaned = str(x).replace('\xa0', '').replace(' ', '').strip()
            numeric_val = pd.to_numeric(cleaned, errors='coerce')
            if pd.isna(numeric_val):
                return str(x)  # Return original if conversion fails
            elif numeric_val >= 1:
                return f"{numeric_val:,.0f}"
            else:
                return f"{numeric_val:.1f}"

        display_df['S·ªë li·ªáu'] = display_df['S·ªë li·ªáu'].apply(clean_and_format_number)
        st.dataframe(display_df, use_container_width=True, hide_index=True)

    else:
        st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu T·ªï xe")
        st.info("üìÅ Upload d·ªØ li·ªáu ho·∫∑c ki·ªÉm tra k·∫øt n·ªëi GitHub ƒë·ªÉ xem th·ªëng k√™ chi ti·∫øt")


        # Pivot Table theo tu·∫ßn
        st.markdown('<div class="section-header">üìà B·∫£ng ph√¢n t√≠ch theo tu·∫ßn</div>', unsafe_allow_html=True)

        def create_call_pivot_table(df):
            """T·∫°o pivot table cho d·ªØ li·ªáu t·ªïng ƒë√†i"""
            if 'Tu·∫ßn' not in df.columns:
                st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt 'Tu·∫ßn' trong d·ªØ li·ªáu")
                return None

            # Ch·ªçn c√°c metrics ch√≠nh ƒë·ªÉ hi·ªÉn th·ªã trong pivot table
            main_metrics = [
                'T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán',
                'T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do t·ª´ ch·ªëi',
                'T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do kh√¥ng b·∫Øt m√°y',
                'T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn Hotline'
            ]

            # L·ªçc data cho c√°c metrics ch√≠nh
            pivot_data = df[df['N·ªôi dung'].isin(main_metrics)].copy()

            if pivot_data.empty:
                st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu cho c√°c metrics ch√≠nh")
                return None

            # Clean data
            pivot_data['S·ªë li·ªáu'] = pivot_data['S·ªë li·ªáu'].astype(str).str.replace('\xa0', '').str.replace(' ', '').str.strip()
            pivot_data['S·ªë li·ªáu'] = pd.to_numeric(pivot_data['S·ªë li·ªáu'], errors='coerce').fillna(0)

            # T·∫°o pivot table
            pivot = pivot_data.pivot(index='Tu·∫ßn', columns='N·ªôi dung', values='S·ªë li·ªáu').fillna(0)
            pivot = pivot.reset_index()
            pivot['Tu·∫ßn'] = pd.to_numeric(pivot['Tu·∫ßn'], errors='coerce')
            pivot = pivot.sort_values('Tu·∫ßn')

            # T√≠nh t·ª∑ l·ªá tr·∫£ l·ªùi cho t·ª´ng tu·∫ßn
            if 'T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán' in pivot.columns and 'T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do t·ª´ ch·ªëi' in pivot.columns and 'T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do kh√¥ng b·∫Øt m√°y' in pivot.columns:
                pivot['T·ªïng cu·ªôc g·ªçi nh·ª°'] = pivot['T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do t·ª´ ch·ªëi'] + pivot['T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do kh√¥ng b·∫Øt m√°y']
                pivot['T·ª∑ l·ªá tr·∫£ l·ªùi (%)'] = ((pivot['T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán'] - pivot['T·ªïng cu·ªôc g·ªçi nh·ª°']) / pivot['T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán'] * 100).fillna(0)

            return pivot

        pivot_df = create_call_pivot_table(df_calls)

        if pivot_df is not None:
            # Format hi·ªÉn th·ªã pivot table
            display_pivot = pivot_df.copy()

            # Format c√°c c·ªôt ch√≠nh
            main_cols = ['T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán', 'T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do t·ª´ ch·ªëi', 'T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do kh√¥ng b·∫Øt m√°y', 'T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn Hotline']
            for col in main_cols:
                if col in display_pivot.columns:
                    display_pivot[col] = display_pivot[col].apply(lambda x: f"{int(x):,}" if pd.notna(x) else "0")

            # Format t·ª∑ l·ªá tr·∫£ l·ªùi
            if 'T·ª∑ l·ªá tr·∫£ l·ªùi (%)' in display_pivot.columns:
                display_pivot['T·ª∑ l·ªá tr·∫£ l·ªùi (%)'] = display_pivot['T·ª∑ l·ªá tr·∫£ l·ªùi (%)'].apply(lambda x: f"{x:.1f}%" if pd.notna(x) else "0%")

            # Format change columns (·∫©n c√°c c·ªôt kh√¥ng c·∫ßn thi·∫øt ƒë·ªÉ table g·ªçn h∆°n)
            cols_to_drop = [col for col in display_pivot.columns if '_Change' in col or col == 'T·ªïng cu·ªôc g·ªçi nh·ª°']
            if cols_to_drop:
                display_pivot = display_pivot.drop(columns=cols_to_drop)

            st.dataframe(display_pivot, use_container_width=True, hide_index=True)

# Tab 5: T·ªïng ƒë√†i
with tab5:
    st.markdown('<div class="tab-header">üìû B√°o c√°o T·ªïng ƒë√†i</div>', unsafe_allow_html=True)

    def create_call_center_data():
        """T·∫°o d·ªØ li·ªáu m·∫´u cho t·ªïng ƒë√†i"""
        return pd.DataFrame({
            'Tu·∫ßn': [39] * 12,
            'Th√°ng': [9] * 12,
            'N·ªôi dung': [
                'T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán',
                'T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do t·ª´ ch·ªëi',
                'T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do kh√¥ng b·∫Øt m√°y',
                'S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 0-T·ªïng ƒë√†i vi√™n)',
                'Nh·ª° do t·ª´ ch·ªëi (Nh√°nh 0-T·ªïng ƒë√†i vi√™n)',
                'Nh·ª° do kh√¥ng b·∫Øt m√°y (Nh√°nh 0-T·ªïng ƒë√†i vi√™n)',
                'S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 1-C·∫•p c·ª©u)',
                'S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 2-T∆∞ v·∫•n Thu·ªëc)',
                'S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 3-PKQT)',
                'S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 4-V·∫•n ƒë·ªÅ kh√°c)',
                'Hottline',
                'T·ª∑ l·ªá tr·∫£ l·ªùi'
            ],
            'S·ªë li·ªáu': [1250, 185, 95, 450, 65, 35, 320, 280, 150, 120, 85, 87.2]
        })

    # Load data t·ª´ DataManager ho·∫∑c d·ªØ li·ªáu m·∫´u
    df_calls = data_manager.get_category_data('T·ªïng ƒë√†i')

    if df_calls is not None:
        st.info(f"‚úÖ ƒê√£ t·∫£i {len(df_calls)} b·∫£n ghi cho T·ªïng ƒë√†i t·ª´ file: {data_manager.metadata['filename']}")
    else:
        st.info("üìÅ Ch∆∞a c√≥ d·ªØ li·ªáu ƒë∆∞·ª£c t·∫£i t·ª´ sidebar. Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u.")
        df_calls = create_call_center_data()

    if not df_calls.empty:
        # Metrics overview t·ªïng quan
        st.markdown('<div class="section-header">üìä T·ªïng quan ho·∫°t ƒë·ªông T·ªïng ƒë√†i</div>', unsafe_allow_html=True)

        col1, col2, col3, col4 = st.columns(4)

        # Debug: Hi·ªÉn th·ªã c·∫•u tr√∫c d·ªØ li·ªáu
        with st.expander("üîç Debug: C·∫•u tr√∫c d·ªØ li·ªáu T·ªïng ƒë√†i", expanded=False):
            st.write("**Columns:**", list(df_calls.columns))
            st.write("**Shape:**", df_calls.shape)
            if 'N·ªôi dung' in df_calls.columns:
                st.write("**N·ªôi dung values:**", df_calls['N·ªôi dung'].unique().tolist())
            st.dataframe(df_calls.head())

        # T√≠nh to√°n metrics t·ª´ d·ªØ li·ªáu - C·ªòNG T·ªîNG T·∫§T C·∫¢ C√ÅC TU·∫¶N
        def get_call_metric_value(content_name):
            if 'N·ªôi dung' not in df_calls.columns or 'S·ªë li·ªáu' not in df_calls.columns:
                return 0

            # L·∫•y t·∫•t c·∫£ c√°c h√†ng c√≥ n·ªôi dung n√†y v√† c·ªông t·ªïng
            result = df_calls[df_calls['N·ªôi dung'] == content_name]['S·ªë li·ªáu']
            if len(result) > 0:
                # Clean data: remove non-breaking spaces and other whitespace characters
                cleaned_result = result.astype(str).str.replace('\xa0', '').str.replace(' ', '').str.strip()
                # Convert t·∫•t c·∫£ values th√†nh numeric v√† c·ªông t·ªïng
                numeric_values = pd.to_numeric(cleaned_result, errors='coerce').fillna(0)
                total = numeric_values.sum()
                return total
            return 0

        tong_goi = get_call_metric_value('T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán')
        nho_tu_choi = get_call_metric_value('T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do t·ª´ ch·ªëi')
        nho_ko_bat = get_call_metric_value('T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do kh√¥ng b·∫Øt m√°y')
        ty_le_raw = get_call_metric_value('T·ª∑ l·ªá tr·∫£ l·ªùi')

        # T√≠nh t·ª∑ l·ªá tr·∫£ l·ªùi t·ª´ d·ªØ li·ªáu c√≥ s·∫µn (t·ªïng cu·ªôc g·ªçi - cu·ªôc g·ªçi nh·ª°) / t·ªïng cu·ªôc g·ªçi * 100
        ty_le = 0
        if tong_goi > 0:
            tong_nho = nho_tu_choi + nho_ko_bat
            cuoc_goi_tra_loi = tong_goi - tong_nho
            ty_le = (cuoc_goi_tra_loi / tong_goi) * 100 if tong_goi > 0 else 0

        with col1:
            st.metric("üìû T·ªïng cu·ªôc g·ªçi", f"{int(tong_goi):,}", help="T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán t·∫•t c·∫£ c√°c tu·∫ßn")
        with col2:
            st.metric("‚ùå T·ª´ ch·ªëi", f"{int(nho_tu_choi):,}", help="T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do t·ª´ ch·ªëi t·∫•t c·∫£ c√°c tu·∫ßn")
        with col3:
            st.metric("üìµ Kh√¥ng b·∫Øt", f"{int(nho_ko_bat):,}", help="T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do kh√¥ng b·∫Øt m√°y t·∫•t c·∫£ c√°c tu·∫ßn")
        with col4:
            st.metric("‚úÖ T·ª∑ l·ªá tr·∫£ l·ªùi", f"{ty_le:.1f}%", help="T·ª∑ l·ªá tr·∫£ l·ªùi trung b√¨nh")

        # Th√™m h√†ng metrics th·ª© 2
        col5, col6, col7, col8 = st.columns(4)

        nhanh_0 = get_call_metric_value('S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 0-T·ªïng ƒë√†i vi√™n)')
        nhanh_1 = get_call_metric_value('S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 1-C·∫•p c·ª©u)')
        nhanh_2 = get_call_metric_value('S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 2-T∆∞ v·∫•n Thu·ªëc)')
        hotline = get_call_metric_value('Hottline')

        with col5:
            st.metric("üìû Nh√°nh 0", f"{int(nhanh_0):,}", help="T·ªïng cu·ªôc g·ªçi ƒë·∫øn Nh√°nh 0-T·ªïng ƒë√†i vi√™n t·∫•t c·∫£ c√°c tu·∫ßn")
        with col6:
            st.metric("üöë Nh√°nh 1", f"{int(nhanh_1):,}", help="T·ªïng cu·ªôc g·ªçi ƒë·∫øn Nh√°nh 1-C·∫•p c·ª©u t·∫•t c·∫£ c√°c tu·∫ßn")
        with col7:
            st.metric("üíä Nh√°nh 2", f"{int(nhanh_2):,}", help="T·ªïng cu·ªôc g·ªçi ƒë·∫øn Nh√°nh 2-T∆∞ v·∫•n Thu·ªëc t·∫•t c·∫£ c√°c tu·∫ßn")
        with col8:
            st.metric("‚òéÔ∏è Hotline", f"{int(hotline):,}", help="T·ªïng cu·ªôc g·ªçi Hotline t·∫•t c·∫£ c√°c tu·∫ßn")

        st.markdown("<br>", unsafe_allow_html=True)

        # Pivot Table Section - gi·ªëng nh∆∞ Tab 4
        create_call_pivot_table(df_calls)

        st.markdown("<br>", unsafe_allow_html=True)

        # Bi·ªÉu ƒë·ªì t·ªïng quan
        st.markdown('<div class="section-header">üìà Bi·ªÉu ƒë·ªì ph√¢n t√≠ch</div>', unsafe_allow_html=True)

        col_chart1, col_chart2 = st.columns(2)

        with col_chart1:
            # Bi·ªÉu ƒë·ªì ph√¢n b·ªë cu·ªôc g·ªçi theo nh√°nh
            branch_patterns = ['S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 0-T·ªïng ƒë√†i vi√™n)', 'S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 1-C·∫•p c·ª©u)',
                              'S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 2-T∆∞ v·∫•n Thu·ªëc)', 'S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 3-PKQT)',
                              'S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 4-V·∫•n ƒë·ªÅ kh√°c)']
            branch_data = df_calls[df_calls['N·ªôi dung'].isin(branch_patterns)]

            if not branch_data.empty:
                # L√†m s·∫°ch t√™n hi·ªÉn th·ªã
                branch_data_clean = branch_data.copy()
                branch_data_clean['N·ªôi dung'] = branch_data_clean['N·ªôi dung'].str.replace('S·ªë cu·ªôc g·ªçi ƒë·∫øn (', '').str.replace(')', '')

                fig_branch = px.pie(branch_data_clean, values='S·ªë li·ªáu', names='N·ªôi dung',
                                  title='üìû Ph√¢n b·ªë cu·ªôc g·ªçi theo nh√°nh',
                                  hole=0.4)
                fig_branch.update_layout(height=400)
                st.plotly_chart(fig_branch, use_container_width=True)

        with col_chart2:
            # Bi·ªÉu ƒë·ªì t·ª∑ l·ªá tr·∫£ l·ªùi vs cu·ªôc g·ªçi nh·ª°
            response_data = df_calls[df_calls['N·ªôi dung'].isin(['T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán', 'T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do t·ª´ ch·ªëi', 'T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do kh√¥ng b·∫Øt m√°y'])]
            if not response_data.empty:
                # T√≠nh to√°n d·ªØ li·ªáu hi·ªÉn th·ªã
                tong_goi_chart = get_call_metric_value('T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán')
                nho_tu_choi_chart = get_call_metric_value('T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do t·ª´ ch·ªëi')
                nho_ko_bat_chart = get_call_metric_value('T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do kh√¥ng b·∫Øt m√°y')
                tra_loi_chart = tong_goi_chart - nho_tu_choi_chart - nho_ko_bat_chart

                response_summary = pd.DataFrame({
                    'Lo·∫°i': ['Tr·∫£ l·ªùi', 'T·ª´ ch·ªëi', 'Kh√¥ng b·∫Øt'],
                    'S·ªë li·ªáu': [tra_loi_chart, nho_tu_choi_chart, nho_ko_bat_chart]
                })

                fig_response = px.bar(response_summary, x='Lo·∫°i', y='S·ªë li·ªáu',
                                    title='üìä T·ª∑ l·ªá tr·∫£ l·ªùi cu·ªôc g·ªçi',
                                    color='Lo·∫°i',
                                    color_discrete_map={'Tr·∫£ l·ªùi': '#2ecc71', 'T·ª´ ch·ªëi': '#e74c3c', 'Kh√¥ng b·∫Øt': '#f39c12'})
                fig_response.update_layout(height=400)
                st.plotly_chart(fig_response, use_container_width=True)

        # Bi·ªÉu ƒë·ªì ph√¢n t√≠ch chi ti·∫øt
        st.markdown('<div class="section-header">üìà Bi·ªÉu ƒë·ªì ph√¢n t√≠ch chi ti·∫øt</div>', unsafe_allow_html=True)

        # Row 1: Bi·ªÉu ƒë·ªì t·ªïng quan v√† ph√¢n t√≠ch nh√°nh
        col_chart1, col_chart2 = st.columns(2)

        with col_chart1:
            # Xu h∆∞·ªõng t·ªïng cu·ªôc g·ªçi v√† cu·ªôc g·ªçi nh·ª° theo tu·∫ßn
            call_time_data = df_calls[df_calls['N·ªôi dung'].isin(['T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán', 'T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do t·ª´ ch·ªëi', 'T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do kh√¥ng b·∫Øt m√°y'])]

            if not call_time_data.empty and 'Tu·∫ßn' in call_time_data.columns:
                call_pivot = call_time_data.pivot(index='Tu·∫ßn', columns='N·ªôi dung', values='S·ªë li·ªáu').fillna(0).infer_objects(copy=False)
                call_pivot = call_pivot.reset_index()
                call_pivot['Tu·∫ßn'] = pd.to_numeric(call_pivot['Tu·∫ßn'], errors='coerce')
                call_pivot = call_pivot.sort_values('Tu·∫ßn')

                # Clean data
                for col in call_pivot.columns:
                    if col != 'Tu·∫ßn':
                        call_pivot[col] = pd.to_numeric(call_pivot[col], errors='coerce').fillna(0)

                if 'T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán' in call_pivot.columns:
                    fig_call_trend = go.Figure()

                    # T·ªïng cu·ªôc g·ªçi
                    fig_call_trend.add_trace(go.Scatter(
                        x=call_pivot['Tu·∫ßn'],
                        y=call_pivot['T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán'],
                        mode='lines',
                        name='T·ªïng cu·ªôc g·ªçi',
                        line=dict(color='#2ecc71', width=3),
                        yaxis='y'
                    ))

                    # Cu·ªôc g·ªçi nh·ª° (tr·ª•c ph·∫£i) - t√≠nh t·ªïng t·ª´ ch·ªëi + kh√¥ng b·∫Øt
                    if 'T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do t·ª´ ch·ªëi' in call_pivot.columns and 'T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do kh√¥ng b·∫Øt m√°y' in call_pivot.columns:
                        call_pivot['T·ªïng cu·ªôc g·ªçi nh·ª°'] = call_pivot['T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do t·ª´ ch·ªëi'] + call_pivot['T·ªïng s·ªë cu·ªôc g·ªçi nh·ª° do kh√¥ng b·∫Øt m√°y']

                        fig_call_trend.add_trace(go.Scatter(
                            x=call_pivot['Tu·∫ßn'],
                            y=call_pivot['T·ªïng cu·ªôc g·ªçi nh·ª°'],
                            mode='lines',
                            name='Cu·ªôc g·ªçi nh·ª°',
                            line=dict(color='#e74c3c', width=3),
                            yaxis='y2'
                        ))

                    fig_call_trend.update_layout(
                        title='üìû Xu h∆∞·ªõng cu·ªôc g·ªçi theo tu·∫ßn',
                        height=350,
                        xaxis=dict(title='Tu·∫ßn', title_standoff=35),
                        yaxis=dict(title='T·ªïng cu·ªôc g·ªçi', side='left', color='#2ecc71'),
                        yaxis2=dict(title='Cu·ªôc g·ªçi nh·ª°', side='right', overlaying='y', color='#e74c3c'),
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=-0.35,
                            xanchor="center",
                            x=0.5
                        ),
                        margin=dict(b=100)
                    )

                    st.plotly_chart(fig_call_trend, use_container_width=True)

        with col_chart2:
            # Ph√¢n t√≠ch cu·ªôc g·ªçi theo nh√°nh
            branch_data = df_calls[df_calls['N·ªôi dung'].str.contains('Nh√°nh', na=False)]

            if not branch_data.empty and 'Tu·∫ßn' in branch_data.columns:
                # L·ªçc ch·ªâ l·∫•y s·ªë cu·ªôc g·ªçi ƒë·∫øn c√°c nh√°nh (kh√¥ng l·∫•y nh·ª°)
                branch_call_data = branch_data[branch_data['N·ªôi dung'].str.contains('S·ªë cu·ªôc g·ªçi ƒë·∫øn', na=False)]

                if not branch_call_data.empty:
                    branch_pivot = branch_call_data.pivot(index='Tu·∫ßn', columns='N·ªôi dung', values='S·ªë li·ªáu').fillna(0).infer_objects(copy=False)
                    branch_pivot = branch_pivot.reset_index()
                    branch_pivot['Tu·∫ßn'] = pd.to_numeric(branch_pivot['Tu·∫ßn'], errors='coerce')
                    branch_pivot = branch_pivot.sort_values('Tu·∫ßn')

                    # Clean data
                    for col in branch_pivot.columns:
                        if col != 'Tu·∫ßn':
                            branch_pivot[col] = pd.to_numeric(branch_pivot[col], errors='coerce').fillna(0)

                    # T·∫°o bi·ªÉu ƒë·ªì stacked bar
                    fig_branch = go.Figure()

                    colors = ['#3498db', '#9b59b6', '#f39c12', '#1abc9c', '#34495e']
                    color_idx = 0

                    for col in branch_pivot.columns:
                        if col != 'Tu·∫ßn':
                            fig_branch.add_trace(go.Bar(
                                x=branch_pivot['Tu·∫ßn'],
                                y=branch_pivot[col],
                                name=col.replace('S·ªë cu·ªôc g·ªçi ƒë·∫øn (', '').replace(')', ''),
                                marker_color=colors[color_idx % len(colors)]
                            ))
                            color_idx += 1

                    fig_branch.update_layout(
                        title='üîó Ph√¢n b·ªë cu·ªôc g·ªçi theo nh√°nh',
                        height=350,
                        xaxis=dict(title='Tu·∫ßn', title_standoff=35),
                        yaxis_title='S·ªë cu·ªôc g·ªçi',
                        barmode='stack',
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=-0.35,
                            xanchor="center",
                            x=0.5
                        ),
                        margin=dict(b=100)
                    )

                    st.plotly_chart(fig_branch, use_container_width=True)

        # üìà Bi·ªÉu ƒë·ªì ph√¢n t√≠ch chi ti·∫øt
        st.markdown('<div class="section-header">üìà Bi·ªÉu ƒë·ªì ph√¢n t√≠ch chi ti·∫øt</div>', unsafe_allow_html=True)

        # Row 2: Bi·ªÉu ƒë·ªì ph√¢n t√≠ch chi ti·∫øt theo format dual axis
        col_detail1, col_detail2 = st.columns(2)

        with col_detail1:
            # Bi·ªÉu ƒë·ªì ph√¢n t√≠ch t·ª∑ l·ªá tr·∫£ l·ªùi v√† t·ªïng cu·ªôc g·ªçi
            performance_data = df_calls[df_calls['N·ªôi dung'].isin(['T·ª∑ l·ªá tr·∫£ l·ªùi', 'T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán'])]

            if not performance_data.empty and 'Tu·∫ßn' in performance_data.columns:
                perf_pivot = performance_data.pivot(index='Tu·∫ßn', columns='N·ªôi dung', values='S·ªë li·ªáu').fillna(0).infer_objects(copy=False)
                perf_pivot = perf_pivot.reset_index()
                perf_pivot['Tu·∫ßn'] = pd.to_numeric(perf_pivot['Tu·∫ßn'], errors='coerce')
                perf_pivot = perf_pivot.sort_values('Tu·∫ßn')

                if 'T·ª∑ l·ªá tr·∫£ l·ªùi' in perf_pivot.columns and 'T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán' in perf_pivot.columns:
                    perf_pivot['T·ª∑ l·ªá tr·∫£ l·ªùi'] = pd.to_numeric(perf_pivot['T·ª∑ l·ªá tr·∫£ l·ªùi'], errors='coerce')
                    perf_pivot['T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán'] = pd.to_numeric(perf_pivot['T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán'], errors='coerce')

                    fig_performance = go.Figure()

                    # T·ª∑ l·ªá tr·∫£ l·ªùi
                    fig_performance.add_trace(go.Scatter(
                        x=perf_pivot['Tu·∫ßn'],
                        y=perf_pivot['T·ª∑ l·ªá tr·∫£ l·ªùi'],
                        mode='lines',
                        name='T·ª∑ l·ªá tr·∫£ l·ªùi',
                        line=dict(color='#27ae60', width=3),
                        yaxis='y'
                    ))

                    # T·ªïng cu·ªôc g·ªçi (tr·ª•c ph·∫£i)
                    fig_performance.add_trace(go.Scatter(
                        x=perf_pivot['Tu·∫ßn'],
                        y=perf_pivot['T·ªïng s·ªë cu·ªôc g·ªçi ƒë·∫øn B·ªánh vi·ªán'],
                        mode='lines',
                        name='T·ªïng cu·ªôc g·ªçi',
                        line=dict(color='#3498db', width=3),
                        yaxis='y2'
                    ))

                    fig_performance.update_layout(
                        title='üìà T∆∞∆°ng quan t·ª∑ l·ªá tr·∫£ l·ªùi - t·ªïng cu·ªôc g·ªçi',
                        height=350,
                        xaxis=dict(title='Tu·∫ßn', title_standoff=35),
                        yaxis=dict(title='T·ª∑ l·ªá tr·∫£ l·ªùi (%)', side='left', color='#27ae60'),
                        yaxis2=dict(title='T·ªïng cu·ªôc g·ªçi', side='right', overlaying='y', color='#3498db'),
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=-0.35,
                            xanchor="center",
                            x=0.5
                        ),
                        margin=dict(b=100)
                    )

                    st.plotly_chart(fig_performance, use_container_width=True)

        with col_detail2:
            # Bi·ªÉu ƒë·ªì ph√¢n t√≠ch hotline v√† t·ªïng ƒë√†i vi√™n
            operator_data = df_calls[df_calls['N·ªôi dung'].isin(['Hottline', 'S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 0-T·ªïng ƒë√†i vi√™n)'])]

            if not operator_data.empty and 'Tu·∫ßn' in operator_data.columns:
                op_pivot = operator_data.pivot(index='Tu·∫ßn', columns='N·ªôi dung', values='S·ªë li·ªáu').fillna(0).infer_objects(copy=False)
                op_pivot = op_pivot.reset_index()
                op_pivot['Tu·∫ßn'] = pd.to_numeric(op_pivot['Tu·∫ßn'], errors='coerce')
                op_pivot = op_pivot.sort_values('Tu·∫ßn')

                if 'Hottline' in op_pivot.columns and 'S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 0-T·ªïng ƒë√†i vi√™n)' in op_pivot.columns:
                    op_pivot['Hottline'] = pd.to_numeric(op_pivot['Hottline'], errors='coerce')
                    op_pivot['S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 0-T·ªïng ƒë√†i vi√™n)'] = pd.to_numeric(op_pivot['S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 0-T·ªïng ƒë√†i vi√™n)'], errors='coerce')

                    fig_operator = go.Figure()

                    # Hotline
                    fig_operator.add_trace(go.Scatter(
                        x=op_pivot['Tu·∫ßn'],
                        y=op_pivot['Hottline'],
                        mode='lines',
                        name='Hotline',
                        line=dict(color='#e67e22', width=3),
                        yaxis='y'
                    ))

                    # T·ªïng ƒë√†i vi√™n (tr·ª•c ph·∫£i)
                    fig_operator.add_trace(go.Scatter(
                        x=op_pivot['Tu·∫ßn'],
                        y=op_pivot['S·ªë cu·ªôc g·ªçi ƒë·∫øn (Nh√°nh 0-T·ªïng ƒë√†i vi√™n)'],
                        mode='lines',
                        name='Nh√°nh t·ªïng ƒë√†i vi√™n',
                        line=dict(color='#8e44ad', width=3),
                        yaxis='y2'
                    ))

                    fig_operator.update_layout(
                        title='‚òéÔ∏è Ph√¢n t√≠ch hotline - t·ªïng ƒë√†i vi√™n',
                        height=350,
                        xaxis=dict(title='Tu·∫ßn', title_standoff=35),
                        yaxis=dict(title='Hotline', side='left', color='#e67e22'),
                        yaxis2=dict(title='Nh√°nh t·ªïng ƒë√†i vi√™n', side='right', overlaying='y', color='#8e44ad'),
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=-0.35,
                            xanchor="center",
                            x=0.5
                        ),
                        margin=dict(b=100)
                    )

                    st.plotly_chart(fig_operator, use_container_width=True)

        # B·∫£ng d·ªØ li·ªáu chi ti·∫øt
        st.markdown('<div class="section-header">üìä D·ªØ li·ªáu chi ti·∫øt</div>', unsafe_allow_html=True)

        # Hi·ªÉn th·ªã b·∫£ng v·ªõi formatting
        display_df = df_calls.copy()
        # Clean and format the data display
        def clean_and_format_call_number(x):
            # Clean non-breaking spaces and other whitespace
            cleaned = str(x).replace('\xa0', '').replace(' ', '').strip()
            numeric_val = pd.to_numeric(cleaned, errors='coerce')
            if pd.isna(numeric_val):
                return str(x)  # Return original if conversion fails
            elif numeric_val >= 1:
                return f"{numeric_val:,.0f}"
            else:
                return f"{numeric_val:.1f}"

        display_df['S·ªë li·ªáu'] = display_df['S·ªë li·ªáu'].apply(clean_and_format_call_number)
        st.dataframe(display_df, use_container_width=True, hide_index=True)

    else:
        st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu T·ªïng ƒë√†i")
        st.info("üìÅ Upload d·ªØ li·ªáu ho·∫∑c ki·ªÉm tra k·∫øt n·ªëi GitHub ƒë·ªÉ xem th·ªëng k√™ chi ti·∫øt")

# Tab 6: H·ªá th·ªëng th∆∞ k√Ω
with tab6:
    st.markdown('<div class="tab-header">üë• H·ªá th·ªëng Th∆∞ k√Ω B·ªánh vi·ªán</div>', unsafe_allow_html=True)

    def create_secretary_data():
        """T·∫°o d·ªØ li·ªáu m·∫´u cho h·ªá th·ªëng th∆∞ k√Ω"""
        return pd.DataFrame({
            'Tu·∫ßn': [39] * 14,
            'Th√°ng': [9] * 14,
            'N·ªôi dung': [
                'S·ªë th∆∞ k√Ω ƒë∆∞·ª£c s∆° tuy·ªÉn',
                'S·ªë th∆∞ k√Ω ƒë∆∞·ª£c tuy·ªÉn d·ª•ng',
                'S·ªë th∆∞ k√Ω nh·∫≠n vi·ªác',
                'S·ªë th∆∞ k√Ω ngh·ªâ vi·ªác',
                'S·ªë th∆∞ k√Ω ƒë∆∞·ª£c ƒëi·ªÅu ƒë·ªông',
                'T·ªïng s·ªë th∆∞ k√Ω',
                '- Th∆∞ k√Ω h√†nh ch√≠nh',
                '- Th∆∞ k√Ω chuy√™n m√¥n',
                'S·ªë bu·ªïi sinh ho·∫°t cho th∆∞ k√Ω',
                'S·ªë th∆∞ k√Ω tham gia sinh ho·∫°t',
                'S·ªë bu·ªïi t·∫≠p hu·∫•n, ƒë√†o t·∫°o cho th∆∞ k√Ω',
                'S·ªë th∆∞ k√Ω tham gia t·∫≠p hu·∫•n, ƒë√†o t·∫°o',
                'S·ªë bu·ªïi tham quan, h·ªçc t·∫≠p',
                'S·ªë th∆∞ k√Ω tham gia tham quan, h·ªçc t·∫≠p'
            ],
            'S·ªë li·ªáu': [15, 12, 10, 3, 2, 85, 45, 40, 4, 78, 6, 82, 2, 35]
        })

    # Load data t·ª´ DataManager ho·∫∑c d·ªØ li·ªáu m·∫´u
    df_secretary = data_manager.get_category_data('H·ªá th·ªëng th∆∞ k√Ω B·ªánh vi·ªán')

    if df_secretary is not None:
        st.info(f"‚úÖ ƒê√£ t·∫£i {len(df_secretary)} b·∫£n ghi cho H·ªá th·ªëng th∆∞ k√Ω t·ª´ file: {data_manager.metadata['filename']}")
    else:
        st.info("üìÅ Ch∆∞a c√≥ d·ªØ li·ªáu ƒë∆∞·ª£c t·∫£i t·ª´ sidebar. Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u.")
        df_secretary = create_secretary_data()

    # Metrics
    col1, col2, col3, col4 = st.columns(4)

    if not df_secretary.empty:
        # Metrics overview t·ªïng quan
        st.markdown('<div class="section-header">üìä T·ªïng quan ho·∫°t ƒë·ªông H·ªá th·ªëng th∆∞ k√Ω</div>', unsafe_allow_html=True)

        col1, col2, col3, col4 = st.columns(4)

        # Debug: Hi·ªÉn th·ªã c·∫•u tr√∫c d·ªØ li·ªáu
        with st.expander("üîç Debug: C·∫•u tr√∫c d·ªØ li·ªáu H·ªá th·ªëng th∆∞ k√Ω", expanded=False):
            st.write("**Columns:**", list(df_secretary.columns))
            st.write("**Shape:**", df_secretary.shape)
            if 'N·ªôi dung' in df_secretary.columns:
                st.write("**N·ªôi dung values:**", df_secretary['N·ªôi dung'].unique().tolist())
            st.dataframe(df_secretary.head())

        # T√≠nh to√°n metrics t·ª´ d·ªØ li·ªáu - C·ªòNG T·ªîNG T·∫§T C·∫¢ C√ÅC TU·∫¶N
        def get_secretary_metric_value(content_name):
            if 'N·ªôi dung' not in df_secretary.columns or 'S·ªë li·ªáu' not in df_secretary.columns:
                return 0

            # L·∫•y t·∫•t c·∫£ c√°c h√†ng c√≥ n·ªôi dung n√†y v√† c·ªông t·ªïng
            result = df_secretary[df_secretary['N·ªôi dung'] == content_name]['S·ªë li·ªáu']
            if len(result) > 0:
                # Clean data: remove non-breaking spaces and other whitespace characters
                cleaned_result = result.astype(str).str.replace('\xa0', '').str.replace(' ', '').str.strip()
                # Convert t·∫•t c·∫£ values th√†nh numeric v√† c·ªông t·ªïng
                numeric_values = pd.to_numeric(cleaned_result, errors='coerce').fillna(0)
                total = numeric_values.sum()
                return total
            return 0

        tong_tk = get_secretary_metric_value('T·ªïng s·ªë th∆∞ k√Ω')
        tuyen_moi = get_secretary_metric_value('S·ªë th∆∞ k√Ω ƒë∆∞·ª£c tuy·ªÉn d·ª•ng')
        nghi_viec = get_secretary_metric_value('S·ªë th∆∞ k√Ω ngh·ªâ vi·ªác')
        dao_tao = get_secretary_metric_value('S·ªë bu·ªïi t·∫≠p hu·∫•n, ƒë√†o t·∫°o cho th∆∞ k√Ω')

        with col1:
            st.metric("üë• T·ªïng th∆∞ k√Ω", f"{int(tong_tk):,}", help="T·ªïng s·ªë th∆∞ k√Ω t·∫•t c·∫£ c√°c tu·∫ßn")
        with col2:
            st.metric("‚úÖ Tuy·ªÉn m·ªõi", f"{int(tuyen_moi):,}", help="T·ªïng s·ªë th∆∞ k√Ω ƒë∆∞·ª£c tuy·ªÉn d·ª•ng t·∫•t c·∫£ c√°c tu·∫ßn")
        with col3:
            st.metric("‚ùå Ngh·ªâ vi·ªác", f"{int(nghi_viec):,}", help="T·ªïng s·ªë th∆∞ k√Ω ngh·ªâ vi·ªác t·∫•t c·∫£ c√°c tu·∫ßn")
        with col4:
            st.metric("üìö ƒê√†o t·∫°o", f"{int(dao_tao):,} bu·ªïi", help="T·ªïng s·ªë bu·ªïi t·∫≠p hu·∫•n, ƒë√†o t·∫°o t·∫•t c·∫£ c√°c tu·∫ßn")

        # Th√™m h√†ng metrics th·ª© 2
        col5, col6, col7, col8 = st.columns(4)

        hanh_chinh = get_secretary_metric_value('- Th∆∞ k√Ω h√†nh ch√≠nh')
        chuyen_mon = get_secretary_metric_value('- Th∆∞ k√Ω chuy√™n m√¥n')
        sinh_hoat = get_secretary_metric_value('S·ªë bu·ªïi sinh ho·∫°t cho th∆∞ k√Ω')
        tham_quan = get_secretary_metric_value('S·ªë bu·ªïi tham quan, h·ªçc t·∫≠p')

        with col5:
            st.metric("üè¢ H√†nh ch√≠nh", f"{int(hanh_chinh):,}", help="T·ªïng s·ªë th∆∞ k√Ω h√†nh ch√≠nh t·∫•t c·∫£ c√°c tu·∫ßn")
        with col6:
            st.metric("‚öïÔ∏è Chuy√™n m√¥n", f"{int(chuyen_mon):,}", help="T·ªïng s·ªë th∆∞ k√Ω chuy√™n m√¥n t·∫•t c·∫£ c√°c tu·∫ßn")
        with col7:
            st.metric("üéØ Sinh ho·∫°t", f"{int(sinh_hoat):,} bu·ªïi", help="T·ªïng s·ªë bu·ªïi sinh ho·∫°t t·∫•t c·∫£ c√°c tu·∫ßn")
        with col8:
            st.metric("üéì Tham quan", f"{int(tham_quan):,} bu·ªïi", help="T·ªïng s·ªë bu·ªïi tham quan, h·ªçc t·∫≠p t·∫•t c·∫£ c√°c tu·∫ßn")

        st.markdown("<br>", unsafe_allow_html=True)

        # Pivot Table Section - gi·ªëng nh∆∞ Tab 4
        create_secretary_pivot_table(df_secretary)

        st.markdown("<br>", unsafe_allow_html=True)

        # Bi·ªÉu ƒë·ªì t·ªïng quan
        st.markdown('<div class="section-header">üìà Bi·ªÉu ƒë·ªì ph√¢n t√≠ch</div>', unsafe_allow_html=True)

        col_chart1, col_chart2 = st.columns(2)

        with col_chart1:
            # Bi·ªÉu ƒë·ªì ph√¢n b·ªë th∆∞ k√Ω theo lo·∫°i
            type_data = df_secretary[df_secretary['N·ªôi dung'].isin(['- Th∆∞ k√Ω h√†nh ch√≠nh', '- Th∆∞ k√Ω chuy√™n m√¥n'])]

            if not type_data.empty:
                # L√†m s·∫°ch t√™n hi·ªÉn th·ªã
                type_data_clean = type_data.copy()
                type_data_clean['N·ªôi dung'] = type_data_clean['N·ªôi dung'].str.replace('- Th∆∞ k√Ω ', '')

                fig_type = px.pie(type_data_clean, values='S·ªë li·ªáu', names='N·ªôi dung',
                                title='üë• Ph√¢n b·ªë th∆∞ k√Ω theo lo·∫°i',
                                hole=0.4)
                fig_type.update_layout(height=400)
                st.plotly_chart(fig_type, use_container_width=True)

        with col_chart2:
            # Bi·ªÉu ƒë·ªì tuy·ªÉn d·ª•ng vs ngh·ªâ vi·ªác
            hr_data = df_secretary[df_secretary['N·ªôi dung'].isin(['S·ªë th∆∞ k√Ω ƒë∆∞·ª£c tuy·ªÉn d·ª•ng', 'S·ªë th∆∞ k√Ω ngh·ªâ vi·ªác'])]
            if not hr_data.empty:
                hr_summary = pd.DataFrame({
                    'Lo·∫°i': ['Tuy·ªÉn d·ª•ng', 'Ngh·ªâ vi·ªác'],
                    'S·ªë li·ªáu': [get_secretary_metric_value('S·ªë th∆∞ k√Ω ƒë∆∞·ª£c tuy·ªÉn d·ª•ng'), get_secretary_metric_value('S·ªë th∆∞ k√Ω ngh·ªâ vi·ªác')]
                })

                fig_hr = px.bar(hr_summary, x='Lo·∫°i', y='S·ªë li·ªáu',
                              title='üìä Tuy·ªÉn d·ª•ng vs Ngh·ªâ vi·ªác',
                              color='Lo·∫°i',
                              color_discrete_map={'Tuy·ªÉn d·ª•ng': '#2ecc71', 'Ngh·ªâ vi·ªác': '#e74c3c'})
                fig_hr.update_layout(height=400)
                st.plotly_chart(fig_hr, use_container_width=True)

        # Bi·ªÉu ƒë·ªì ph√¢n t√≠ch chi ti·∫øt
        st.markdown('<div class="section-header">üìà Bi·ªÉu ƒë·ªì ph√¢n t√≠ch chi ti·∫øt</div>', unsafe_allow_html=True)

        # Row 1: Bi·ªÉu ƒë·ªì t·ªïng quan ho·∫°t ƒë·ªông
        col_detail1, col_detail2 = st.columns(2)

        with col_detail1:
            # Xu h∆∞·ªõng t·ªïng s·ªë th∆∞ k√Ω theo tu·∫ßn
            secretary_time_data = df_secretary[df_secretary['N·ªôi dung'].isin(['T·ªïng s·ªë th∆∞ k√Ω', 'S·ªë th∆∞ k√Ω ƒë∆∞·ª£c tuy·ªÉn d·ª•ng', 'S·ªë th∆∞ k√Ω ngh·ªâ vi·ªác'])]

            if not secretary_time_data.empty and 'Tu·∫ßn' in secretary_time_data.columns:
                secretary_pivot = secretary_time_data.pivot(index='Tu·∫ßn', columns='N·ªôi dung', values='S·ªë li·ªáu').fillna(0)
                secretary_pivot = secretary_pivot.reset_index()
                secretary_pivot['Tu·∫ßn'] = pd.to_numeric(secretary_pivot['Tu·∫ßn'], errors='coerce')
                secretary_pivot = secretary_pivot.sort_values('Tu·∫ßn')

                # Clean data
                for col in secretary_pivot.columns:
                    if col != 'Tu·∫ßn':
                        secretary_pivot[col] = pd.to_numeric(secretary_pivot[col], errors='coerce').fillna(0)

                if 'T·ªïng s·ªë th∆∞ k√Ω' in secretary_pivot.columns:
                    fig_secretary_trend = go.Figure()

                    # T·ªïng s·ªë th∆∞ k√Ω
                    fig_secretary_trend.add_trace(go.Scatter(
                        x=secretary_pivot['Tu·∫ßn'],
                        y=secretary_pivot['T·ªïng s·ªë th∆∞ k√Ω'],
                        mode='lines',
                        name='T·ªïng s·ªë th∆∞ k√Ω',
                        line=dict(color='#3498db', width=3),
                        yaxis='y'
                    ))

                    # Tuy·ªÉn d·ª•ng v√† ngh·ªâ vi·ªác (tr·ª•c ph·∫£i)
                    if 'S·ªë th∆∞ k√Ω ƒë∆∞·ª£c tuy·ªÉn d·ª•ng' in secretary_pivot.columns:
                        fig_secretary_trend.add_trace(go.Scatter(
                            x=secretary_pivot['Tu·∫ßn'],
                            y=secretary_pivot['S·ªë th∆∞ k√Ω ƒë∆∞·ª£c tuy·ªÉn d·ª•ng'],
                            mode='lines',
                            name='Tuy·ªÉn d·ª•ng',
                            line=dict(color='#2ecc71', width=3),
                            yaxis='y2'
                        ))

                    if 'S·ªë th∆∞ k√Ω ngh·ªâ vi·ªác' in secretary_pivot.columns:
                        fig_secretary_trend.add_trace(go.Scatter(
                            x=secretary_pivot['Tu·∫ßn'],
                            y=secretary_pivot['S·ªë th∆∞ k√Ω ngh·ªâ vi·ªác'],
                            mode='lines',
                            name='Ngh·ªâ vi·ªác',
                            line=dict(color='#e74c3c', width=3),
                            yaxis='y2'
                        ))

                    fig_secretary_trend.update_layout(
                        title='üë• Xu h∆∞·ªõng th∆∞ k√Ω theo tu·∫ßn',
                        height=350,
                        xaxis=dict(title='Tu·∫ßn', title_standoff=35),
                        yaxis=dict(title='T·ªïng s·ªë th∆∞ k√Ω', side='left', color='#3498db'),
                        yaxis2=dict(title='Tuy·ªÉn d·ª•ng/Ngh·ªâ vi·ªác', side='right', overlaying='y', color='#2ecc71'),
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=-0.35,
                            xanchor="center",
                            x=0.5
                        ),
                        margin=dict(b=100)
                    )

                    st.plotly_chart(fig_secretary_trend, use_container_width=True)

        with col_detail2:
            # Ph√¢n t√≠ch ho·∫°t ƒë·ªông ƒë√†o t·∫°o
            training_data = df_secretary[df_secretary['N·ªôi dung'].isin(['S·ªë bu·ªïi t·∫≠p hu·∫•n, ƒë√†o t·∫°o cho th∆∞ k√Ω', 'S·ªë bu·ªïi sinh ho·∫°t cho th∆∞ k√Ω', 'S·ªë bu·ªïi tham quan, h·ªçc t·∫≠p'])]

            if not training_data.empty and 'Tu·∫ßn' in training_data.columns:
                training_pivot = training_data.pivot(index='Tu·∫ßn', columns='N·ªôi dung', values='S·ªë li·ªáu').fillna(0)
                training_pivot = training_pivot.reset_index()
                training_pivot['Tu·∫ßn'] = pd.to_numeric(training_pivot['Tu·∫ßn'], errors='coerce')
                training_pivot = training_pivot.sort_values('Tu·∫ßn')

                # Clean data
                for col in training_pivot.columns:
                    if col != 'Tu·∫ßn':
                        training_pivot[col] = pd.to_numeric(training_pivot[col], errors='coerce').fillna(0)

                # T·∫°o bi·ªÉu ƒë·ªì stacked bar
                fig_training = go.Figure()

                colors = ['#f39c12', '#9b59b6', '#1abc9c']
                color_idx = 0

                for col in training_pivot.columns:
                    if col != 'Tu·∫ßn':
                        display_name = col.replace('S·ªë bu·ªïi ', '').replace(' cho th∆∞ k√Ω', '')
                        fig_training.add_trace(go.Bar(
                            x=training_pivot['Tu·∫ßn'],
                            y=training_pivot[col],
                            name=display_name,
                            marker_color=colors[color_idx % len(colors)]
                        ))
                        color_idx += 1

                fig_training.update_layout(
                    title='üìö Ho·∫°t ƒë·ªông ƒë√†o t·∫°o theo tu·∫ßn',
                    height=350,
                    xaxis=dict(title='Tu·∫ßn', title_standoff=35),
                    yaxis_title='S·ªë bu·ªïi',
                    barmode='stack',
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=-0.35,
                        xanchor="center",
                        x=0.5
                    ),
                    margin=dict(b=100)
                )

                st.plotly_chart(fig_training, use_container_width=True)

        # B·∫£ng d·ªØ li·ªáu chi ti·∫øt
        st.markdown('<div class="section-header">üìä D·ªØ li·ªáu chi ti·∫øt</div>', unsafe_allow_html=True)

        # Hi·ªÉn th·ªã b·∫£ng v·ªõi formatting
        display_df = df_secretary.copy()
        # Clean and format the data display
        def clean_and_format_secretary_number(x):
            # Clean non-breaking spaces and other whitespace
            cleaned = str(x).replace('\xa0', '').replace(' ', '').strip()
            numeric_val = pd.to_numeric(cleaned, errors='coerce')
            if pd.isna(numeric_val):
                return str(x)  # Return original if conversion fails
            elif numeric_val >= 1:
                return f"{numeric_val:,.0f}"
            else:
                return f"{numeric_val:.1f}"

        display_df['S·ªë li·ªáu'] = display_df['S·ªë li·ªáu'].apply(clean_and_format_secretary_number)
        st.dataframe(display_df, use_container_width=True, hide_index=True)

    else:
        st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu H·ªá th·ªëng th∆∞ k√Ω")
        st.info("üìÅ Upload d·ªØ li·ªáu ho·∫∑c ki·ªÉm tra k·∫øt n·ªëi GitHub ƒë·ªÉ xem th·ªëng k√™ chi ti·∫øt")

# Tab 7: B√£i gi·ªØ xe
with tab7:
    st.markdown('<div class="tab-header">üÖøÔ∏è B√°o c√°o B√£i gi·ªØ xe</div>', unsafe_allow_html=True)

    def create_parking_data():
        """T·∫°o d·ªØ li·ªáu m·∫´u cho b√£i gi·ªØ xe"""
        return pd.DataFrame({
            'Tu·∫ßn': [39] * 6,
            'Th√°ng': [9] * 6,
            'N·ªôi dung': [
                'T·ªïng s·ªë l∆∞·ª£t v√© ng√†y',
                'T·ªïng s·ªë l∆∞·ª£t v√© th√°ng',
                'C√¥ng su·∫•t trung b√¨nh/ng√†y',
                'Doanh thu',
                'S·ªë ph·∫£n √°nh khi·∫øu n·∫°i',
                'T·ª∑ l·ªá s·ª≠ d·ª•ng'
            ],
            'S·ªë li·ªáu': [1850, 145, 265, 18500000, 8, 78.5]
        })

    # Load data t·ª´ DataManager ho·∫∑c d·ªØ li·ªáu m·∫´u
    df_parking = data_manager.get_category_data('B√£i gi·ªØ xe')

    if df_parking is not None:
        st.info(f"‚úÖ ƒê√£ t·∫£i {len(df_parking)} b·∫£n ghi cho B√£i gi·ªØ xe t·ª´ file: {data_manager.metadata['filename']}")
    else:
        st.info("üìÅ Ch∆∞a c√≥ d·ªØ li·ªáu ƒë∆∞·ª£c t·∫£i t·ª´ sidebar. Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u.")
        df_parking = create_parking_data()

    # Metrics
    col1, col2, col3, col4 = st.columns(4)

    if not df_parking.empty:
        # Metrics overview t·ªïng quan
        st.markdown('<div class="section-header">üìä T·ªïng quan ho·∫°t ƒë·ªông B√£i gi·ªØ xe</div>', unsafe_allow_html=True)

        col1, col2, col3, col4 = st.columns(4)

        # Debug: Hi·ªÉn th·ªã c·∫•u tr√∫c d·ªØ li·ªáu
        with st.expander("üîç Debug: C·∫•u tr√∫c d·ªØ li·ªáu B√£i gi·ªØ xe", expanded=False):
            st.write("**Columns:**", list(df_parking.columns))
            st.write("**Shape:**", df_parking.shape)
            if 'N·ªôi dung' in df_parking.columns:
                st.write("**N·ªôi dung values:**", df_parking['N·ªôi dung'].unique().tolist())
            st.dataframe(df_parking.head())

        # T√≠nh to√°n metrics t·ª´ d·ªØ li·ªáu - C·ªòNG T·ªîNG T·∫§T C·∫¢ C√ÅC TU·∫¶N
        def get_parking_metric_value(content_name):
            if 'N·ªôi dung' not in df_parking.columns or 'S·ªë li·ªáu' not in df_parking.columns:
                return 0

            # L·∫•y t·∫•t c·∫£ c√°c h√†ng c√≥ n·ªôi dung n√†y v√† c·ªông t·ªïng
            result = df_parking[df_parking['N·ªôi dung'] == content_name]['S·ªë li·ªáu']
            if len(result) > 0:
                # Clean data: remove non-breaking spaces and other whitespace characters
                cleaned_result = result.astype(str).str.replace('\xa0', '').str.replace(' ', '').str.strip()
                # Convert t·∫•t c·∫£ values th√†nh numeric v√† c·ªông t·ªïng
                numeric_values = pd.to_numeric(cleaned_result, errors='coerce').fillna(0)
                total = numeric_values.sum()
                return total
            return 0

        ve_ngay = get_parking_metric_value('T·ªïng s·ªë l∆∞·ª£t v√© ng√†y')
        ve_thang = get_parking_metric_value('T·ªïng s·ªë l∆∞·ª£t v√© th√°ng')
        doanh_thu = get_parking_metric_value('Doanh thu')
        khieu_nai = get_parking_metric_value('S·ªë ph·∫£n √°nh khi·∫øu n·∫°i')

        with col1:
            st.metric("üé´ V√© ng√†y", f"{int(ve_ngay):,}", help="T·ªïng s·ªë l∆∞·ª£t v√© ng√†y t·∫•t c·∫£ c√°c tu·∫ßn")
        with col2:
            st.metric("üìÖ V√© th√°ng", f"{int(ve_thang):,}", help="T·ªïng s·ªë l∆∞·ª£t v√© th√°ng t·∫•t c·∫£ c√°c tu·∫ßn")
        with col3:
            st.metric("üí∞ Doanh thu", f"{int(doanh_thu):,} VND", help="T·ªïng doanh thu t·∫•t c·∫£ c√°c tu·∫ßn")
        with col4:
            st.metric("üì¢ Khi·∫øu n·∫°i", f"{int(khieu_nai):,}", help="T·ªïng s·ªë ph·∫£n √°nh khi·∫øu n·∫°i t·∫•t c·∫£ c√°c tu·∫ßn")

        # Th√™m h√†ng metrics th·ª© 2
        col5, col6, col7, col8 = st.columns(4)

        cong_suat = get_parking_metric_value('C√¥ng su·∫•t trung b√¨nh/ng√†y')
        ty_le_su_dung = get_parking_metric_value('T·ª∑ l·ªá s·ª≠ d·ª•ng')
        # T√≠nh t·ªïng v√© (ng√†y + th√°ng)
        tong_ve = ve_ngay + ve_thang
        # T√≠nh doanh thu trung b√¨nh m·ªói v√©
        doanh_thu_per_ve = (doanh_thu / tong_ve) if tong_ve > 0 else 0

        with col5:
            st.metric("‚ö° C√¥ng su·∫•t", f"{int(cong_suat):,} xe/ng√†y", help="C√¥ng su·∫•t trung b√¨nh m·ªói ng√†y t·∫•t c·∫£ c√°c tu·∫ßn")
        with col6:
            st.metric("üìä T·ª∑ l·ªá SD", f"{ty_le_su_dung:.1f}%", help="T·ª∑ l·ªá s·ª≠ d·ª•ng trung b√¨nh t·∫•t c·∫£ c√°c tu·∫ßn")
        with col7:
            st.metric("üìù T·ªïng v√©", f"{int(tong_ve):,}", help="T·ªïng t·∫•t c·∫£ v√© (ng√†y + th√°ng)")
        with col8:
            st.metric("üíµ DT/v√©", f"{int(doanh_thu_per_ve):,} VND", help="Doanh thu trung b√¨nh m·ªói v√©")

        st.markdown("<br>", unsafe_allow_html=True)

        # Pivot Table Section - gi·ªëng nh∆∞ Tab 4
        create_parking_pivot_table(df_parking)

        st.markdown("<br>", unsafe_allow_html=True)

        # Bi·ªÉu ƒë·ªì t·ªïng quan
        st.markdown('<div class="section-header">üìà Bi·ªÉu ƒë·ªì ph√¢n t√≠ch</div>', unsafe_allow_html=True)

        col_chart1, col_chart2 = st.columns(2)

        with col_chart1:
            # Bi·ªÉu ƒë·ªì ph√¢n b·ªë v√© ng√†y vs v√© th√°ng
            ticket_data = df_parking[df_parking['N·ªôi dung'].isin(['T·ªïng s·ªë l∆∞·ª£t v√© ng√†y', 'T·ªïng s·ªë l∆∞·ª£t v√© th√°ng'])]

            if not ticket_data.empty:
                # L√†m s·∫°ch t√™n hi·ªÉn th·ªã
                ticket_data_clean = ticket_data.copy()
                ticket_data_clean['N·ªôi dung'] = ticket_data_clean['N·ªôi dung'].str.replace('T·ªïng s·ªë l∆∞·ª£t ', '')

                fig_ticket = px.pie(ticket_data_clean, values='S·ªë li·ªáu', names='N·ªôi dung',
                                  title='üé´ Ph√¢n b·ªë lo·∫°i v√©',
                                  hole=0.4)
                fig_ticket.update_layout(height=400)
                st.plotly_chart(fig_ticket, use_container_width=True)

        with col_chart2:
            # Bi·ªÉu ƒë·ªì doanh thu v√† khi·∫øu n·∫°i
            summary_data = pd.DataFrame({
                'Ch·ªâ s·ªë': ['Doanh thu (tri·ªáu VND)', 'Khi·∫øu n·∫°i'],
                'Gi√° tr·ªã': [doanh_thu/1000000, khieu_nai]  # Doanh thu t√≠nh theo tri·ªáu
            })

            fig_summary = px.bar(summary_data, x='Ch·ªâ s·ªë', y='Gi√° tr·ªã',
                               title='üí∞ Doanh thu v√† Khi·∫øu n·∫°i',
                               color='Ch·ªâ s·ªë',
                               color_discrete_map={'Doanh thu (tri·ªáu VND)': '#2ecc71', 'Khi·∫øu n·∫°i': '#e74c3c'})
            fig_summary.update_layout(height=400, yaxis_title='Gi√° tr·ªã')
            st.plotly_chart(fig_summary, use_container_width=True)

        # Bi·ªÉu ƒë·ªì ph√¢n t√≠ch chi ti·∫øt
        st.markdown('<div class="section-header">üìà Bi·ªÉu ƒë·ªì ph√¢n t√≠ch chi ti·∫øt</div>', unsafe_allow_html=True)

        # Row 1: Bi·ªÉu ƒë·ªì t·ªïng quan ho·∫°t ƒë·ªông
        col_detail1, col_detail2 = st.columns(2)

        with col_detail1:
            # Xu h∆∞·ªõng doanh thu v√† s·ªë v√© theo tu·∫ßn
            parking_time_data = df_parking[df_parking['N·ªôi dung'].isin(['Doanh thu', 'T·ªïng s·ªë l∆∞·ª£t v√© ng√†y', 'T·ªïng s·ªë l∆∞·ª£t v√© th√°ng'])]

            if not parking_time_data.empty and 'Tu·∫ßn' in parking_time_data.columns:
                parking_pivot = parking_time_data.pivot(index='Tu·∫ßn', columns='N·ªôi dung', values='S·ªë li·ªáu').fillna(0).infer_objects(copy=False)
                parking_pivot = parking_pivot.reset_index()
                parking_pivot['Tu·∫ßn'] = pd.to_numeric(parking_pivot['Tu·∫ßn'], errors='coerce')
                parking_pivot = parking_pivot.sort_values('Tu·∫ßn')

                # Clean data
                for col in parking_pivot.columns:
                    if col != 'Tu·∫ßn':
                        parking_pivot[col] = pd.to_numeric(parking_pivot[col], errors='coerce').fillna(0)

                # T√≠nh t·ªïng v√©
                if 'T·ªïng s·ªë l∆∞·ª£t v√© ng√†y' in parking_pivot.columns and 'T·ªïng s·ªë l∆∞·ª£t v√© th√°ng' in parking_pivot.columns:
                    parking_pivot['T·ªïng v√©'] = parking_pivot['T·ªïng s·ªë l∆∞·ª£t v√© ng√†y'] + parking_pivot['T·ªïng s·ªë l∆∞·ª£t v√© th√°ng']

                if 'Doanh thu' in parking_pivot.columns and 'T·ªïng v√©' in parking_pivot.columns:
                    fig_parking_trend = go.Figure()

                    # Doanh thu (tr·ª•c tr√°i)
                    fig_parking_trend.add_trace(go.Scatter(
                        x=parking_pivot['Tu·∫ßn'],
                        y=parking_pivot['Doanh thu'],
                        mode='lines',
                        name='Doanh thu',
                        line=dict(color='#2ecc71', width=3),
                        yaxis='y'
                    ))

                    # T·ªïng v√© (tr·ª•c ph·∫£i)
                    fig_parking_trend.add_trace(go.Scatter(
                        x=parking_pivot['Tu·∫ßn'],
                        y=parking_pivot['T·ªïng v√©'],
                        mode='lines',
                        name='T·ªïng v√©',
                        line=dict(color='#3498db', width=3),
                        yaxis='y2'
                    ))

                    fig_parking_trend.update_layout(
                        title='üí∞ Xu h∆∞·ªõng doanh thu v√† s·ªë v√© theo tu·∫ßn',
                        height=350,
                        xaxis=dict(title='Tu·∫ßn', title_standoff=35),
                        yaxis=dict(title='Doanh thu (VND)', side='left', color='#2ecc71'),
                        yaxis2=dict(title='S·ªë v√©', side='right', overlaying='y', color='#3498db'),
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=-0.35,
                            xanchor="center",
                            x=0.5
                        ),
                        margin=dict(b=100)
                    )

                    st.plotly_chart(fig_parking_trend, use_container_width=True)

        with col_detail2:
            # Ph√¢n t√≠ch c√¥ng su·∫•t v√† t·ª∑ l·ªá s·ª≠ d·ª•ng
            capacity_data = df_parking[df_parking['N·ªôi dung'].isin(['C√¥ng su·∫•t trung b√¨nh/ng√†y', 'T·ª∑ l·ªá s·ª≠ d·ª•ng', 'S·ªë ph·∫£n √°nh khi·∫øu n·∫°i'])]

            if not capacity_data.empty and 'Tu·∫ßn' in capacity_data.columns:
                capacity_pivot = capacity_data.pivot(index='Tu·∫ßn', columns='N·ªôi dung', values='S·ªë li·ªáu').fillna(0).infer_objects(copy=False)
                capacity_pivot = capacity_pivot.reset_index()
                capacity_pivot['Tu·∫ßn'] = pd.to_numeric(capacity_pivot['Tu·∫ßn'], errors='coerce')
                capacity_pivot = capacity_pivot.sort_values('Tu·∫ßn')

                # Clean data
                for col in capacity_pivot.columns:
                    if col != 'Tu·∫ßn':
                        capacity_pivot[col] = pd.to_numeric(capacity_pivot[col], errors='coerce').fillna(0)

                if 'C√¥ng su·∫•t trung b√¨nh/ng√†y' in capacity_pivot.columns and 'T·ª∑ l·ªá s·ª≠ d·ª•ng' in capacity_pivot.columns:
                    fig_capacity = go.Figure()

                    # C√¥ng su·∫•t (tr·ª•c tr√°i)
                    fig_capacity.add_trace(go.Scatter(
                        x=capacity_pivot['Tu·∫ßn'],
                        y=capacity_pivot['C√¥ng su·∫•t trung b√¨nh/ng√†y'],
                        mode='lines',
                        name='C√¥ng su·∫•t',
                        line=dict(color='#9b59b6', width=3),
                        yaxis='y'
                    ))

                    # T·ª∑ l·ªá s·ª≠ d·ª•ng (tr·ª•c ph·∫£i)
                    fig_capacity.add_trace(go.Scatter(
                        x=capacity_pivot['Tu·∫ßn'],
                        y=capacity_pivot['T·ª∑ l·ªá s·ª≠ d·ª•ng'],
                        mode='lines',
                        name='T·ª∑ l·ªá s·ª≠ d·ª•ng (%)',
                        line=dict(color='#f39c12', width=3),
                        yaxis='y2'
                    ))

                    # Khi·∫øu n·∫°i (n·∫øu c√≥)
                    if 'S·ªë ph·∫£n √°nh khi·∫øu n·∫°i' in capacity_pivot.columns:
                        fig_capacity.add_trace(go.Bar(
                            x=capacity_pivot['Tu·∫ßn'],
                            y=capacity_pivot['S·ªë ph·∫£n √°nh khi·∫øu n·∫°i'],
                            name='Khi·∫øu n·∫°i',
                            marker_color='#e74c3c',
                            opacity=0.7,
                            yaxis='y'
                        ))

                    fig_capacity.update_layout(
                        title='‚ö° Ph√¢n t√≠ch c√¥ng su·∫•t v√† ch·∫•t l∆∞·ª£ng',
                        height=350,
                        xaxis=dict(title='Tu·∫ßn', title_standoff=35),
                        yaxis=dict(title='C√¥ng su·∫•t / Khi·∫øu n·∫°i', side='left', color='#9b59b6'),
                        yaxis2=dict(title='T·ª∑ l·ªá s·ª≠ d·ª•ng (%)', side='right', overlaying='y', color='#f39c12'),
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=-0.35,
                            xanchor="center",
                            x=0.5
                        ),
                        margin=dict(b=100)
                    )

                    st.plotly_chart(fig_capacity, use_container_width=True)

        # B·∫£ng d·ªØ li·ªáu chi ti·∫øt
        st.markdown('<div class="section-header">üìä D·ªØ li·ªáu chi ti·∫øt</div>', unsafe_allow_html=True)

        # Hi·ªÉn th·ªã b·∫£ng v·ªõi formatting
        display_df = df_parking.copy()
        # Clean and format the data display
        def clean_and_format_parking_number(x):
            # Clean non-breaking spaces and other whitespace
            cleaned = str(x).replace('\xa0', '').replace(' ', '').strip()
            numeric_val = pd.to_numeric(cleaned, errors='coerce')
            if pd.isna(numeric_val):
                return str(x)  # Return original if conversion fails
            elif numeric_val >= 1:
                return f"{numeric_val:,.0f}"
            else:
                return f"{numeric_val:.1f}"

        display_df['S·ªë li·ªáu'] = display_df['S·ªë li·ªáu'].apply(clean_and_format_parking_number)
        st.dataframe(display_df, use_container_width=True, hide_index=True)

    else:
        st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu B√£i gi·ªØ xe")
        st.info("üìÅ Upload d·ªØ li·ªáu ho·∫∑c ki·ªÉm tra k·∫øt n·ªëi GitHub ƒë·ªÉ xem th·ªëng k√™ chi ti·∫øt")

def create_event_pivot_table(df):
    """T·∫°o pivot table cho d·ªØ li·ªáu s·ª± ki·ªán"""

    # CSS cho table
    st.markdown("""
    <style>
    .pivot-table-event {
        font-size: 16px !important;
        font-weight: 500;
    }
    .pivot-table-event td {
        padding: 12px 8px !important;
        text-align: center !important;
    }
    .pivot-table-event th {
        padding: 15px 8px !important;
        text-align: center !important;
        background-color: #f0f2f6 !important;
        font-weight: bold !important;
        font-size: 17px !important;
    }
    .increase { color: #16a085; font-weight: 600; }
    .decrease { color: #e74c3c; font-weight: 600; }
    .neutral { color: #7f8c8d; font-weight: 600; }
    </style>
    """, unsafe_allow_html=True)

    col1, col2 = st.columns([1, 1])
    with col1:
        period_type = st.selectbox(
            "üìÖ T·ªïng h·ª£p theo:",
            options=['Tu·∫ßn', 'Th√°ng', 'NƒÉm'],
            index=0,
            key="event_period_type"
        )

    # X·ª≠ l√Ω d·ªØ li·ªáu th·ªùi gian
    has_time_data = False
    df_period = df.copy()

    if 'Tu·∫ßn' in df.columns or 'Th√°ng' in df.columns:
        has_time_data = True

        if period_type == 'Tu·∫ßn' and 'Tu·∫ßn' in df.columns:
            df_period['period'] = 'W' + df_period['Tu·∫ßn'].astype(str)
            df_period['period_sort'] = pd.to_numeric(df_period['Tu·∫ßn'], errors='coerce')
        elif period_type == 'Th√°ng' and 'Th√°ng' in df.columns:
            df_period['period'] = 'T' + df_period['Th√°ng'].astype(str)
            df_period['period_sort'] = pd.to_numeric(df_period['Th√°ng'], errors='coerce')
        elif period_type == 'NƒÉm':
            df_period['period'] = '2025'
            df_period['period_sort'] = 2025
        else:
            if 'Tu·∫ßn' in df.columns:
                df_period['period'] = 'W' + df_period['Tu·∫ßn'].astype(str)
                df_period['period_sort'] = pd.to_numeric(df_period['Tu·∫ßn'], errors='coerce')
            else:
                has_time_data = False

    if has_time_data:
        # C√°c metric cho s·ª± ki·ªán
        event_metrics = ['tong_su_kien', 'chu_tri', 'phoi_hop', 'quan_trong', 'hoi_nghi', 'doi_ngoai']

        # T·∫°o metric columns t·ª´ d·ªØ li·ªáu N·ªôi dung/S·ªë li·ªáu
        if 'N·ªôi dung' in df_period.columns and 'S·ªë li·ªáu' in df_period.columns:
            for metric in event_metrics:
                df_period[metric] = 0

            # Mapping c√°c metric t·ª´ N·ªôi dung
            metric_mapping = {
                'tong_su_kien': ['T·ªïng s·ªë s·ª± ki·ªán h√†nh ch√≠nh c·ªßa B·ªánh vi·ªán'],
                'chu_tri': ['Ph√≤ng H√†nh ch√≠nh ch·ªß tr√¨'],
                'phoi_hop': ['Ph√≤ng H√†nh ch√≠nh ph·ªëi h·ª£p'],
                'quan_trong': ['S·ª± ki·ªán quan tr·ªçng'],
                'hoi_nghi': ['H·ªôi ngh·ªã h·ªôi th·∫£o'],
                'doi_ngoai': ['Ho·∫°t ƒë·ªông ƒë·ªëi ngo·∫°i']
            }

            for metric, content_names in metric_mapping.items():
                for content_name in content_names:
                    mask = df_period['N·ªôi dung'] == content_name
                    df_period.loc[mask, metric] = pd.to_numeric(df_period.loc[mask, 'S·ªë li·ªáu'], errors='coerce').fillna(0)

        # T·∫°o pivot data
        pivot_data = df_period.groupby(['period', 'period_sort'])[event_metrics].sum().reset_index()
        pivot_data = pivot_data.sort_values('period_sort', ascending=False)

        # T√≠nh to√°n bi·∫øn ƒë·ªông
        for col in event_metrics:
            pivot_data[f'{col}_prev'] = pivot_data[col].shift(-1)
            pivot_data[f'{col}_change'] = pivot_data[col] - pivot_data[f'{col}_prev']
            pivot_data[f'{col}_change_pct'] = ((pivot_data[col] / pivot_data[f'{col}_prev'] - 1) * 100).round(1)
            pivot_data[f'{col}_change_pct'] = pivot_data[f'{col}_change_pct'].fillna(0)

        # H√†m format cell v·ªõi bi·∫øn ƒë·ªông
        def format_cell_with_change(row, col):
            current_val = row[col]
            change_val = row[f'{col}_change']
            change_pct = row[f'{col}_change_pct']
            prev_val = row[f'{col}_prev']

            if pd.isna(prev_val) or prev_val == 0:
                return f"{int(current_val):,}"

            if change_val > 0:
                color_class = "increase"
                arrow = "‚Üó"
                sign = "+"
            elif change_val < 0:
                color_class = "decrease"
                arrow = "‚Üò"
                sign = ""
            else:
                color_class = "neutral"
                arrow = "‚Üí"
                sign = ""

            return f"""<div style="text-align: center; line-height: 1.2;">
                <div style="font-size: 16px; font-weight: 600;">{int(current_val):,}</div>
                <div class="{color_class}" style="font-size: 12px;">{arrow} {sign}{int(change_val):,} ({sign}{change_pct:.1f}%)</div>
            </div>"""

        # T·∫°o HTML table
        display_data = pivot_data.copy()

        # T·∫°o header
        html_table = '''
        <table class="pivot-table-event" style="width: 100%; border-collapse: collapse; margin: 20px 0; border: 2px solid #34495e;">
            <thead>
                <tr style="background: linear-gradient(90deg, #34495e, #2c3e50); color: white;">
                    <th style="border: 1px solid #ddd; position: sticky; left: 0; background: #2c3e50; z-index: 10;">K·ª≥</th>
                    <th style="border: 1px solid #ddd;">üéâ T·ªïng SK</th>
                    <th style="border: 1px solid #ddd;">üëë Ch·ªß tr√¨</th>
                    <th style="border: 1px solid #ddd;">ü§ù Ph·ªëi h·ª£p</th>
                    <th style="border: 1px solid #ddd;">‚≠ê Quan tr·ªçng</th>
                    <th style="border: 1px solid #ddd;">üèõÔ∏è H·ªôi ngh·ªã</th>
                    <th style="border: 1px solid #ddd;">üåç ƒê·ªëi ngo·∫°i</th>
                </tr>
            </thead>
            <tbody>
        '''

        # Th√™m c√°c row d·ªØ li·ªáu
        for i, row in display_data.iterrows():
            period_display = row['period']

            # Alternating row colors
            row_color = "#f8f9fa" if i % 2 == 0 else "#ffffff"

            html_table += f'''
            <tr style="background-color: {row_color};">
                <td style="border: 1px solid #ddd; font-weight: bold; background-color: #ecf0f1; position: sticky; left: 0; z-index: 5;">{period_display}</td>
                <td style="border: 1px solid #ddd;">{format_cell_with_change(row, 'tong_su_kien')}</td>
                <td style="border: 1px solid #ddd;">{format_cell_with_change(row, 'chu_tri')}</td>
                <td style="border: 1px solid #ddd;">{format_cell_with_change(row, 'phoi_hop')}</td>
                <td style="border: 1px solid #ddd;">{format_cell_with_change(row, 'quan_trong')}</td>
                <td style="border: 1px solid #ddd;">{format_cell_with_change(row, 'hoi_nghi')}</td>
                <td style="border: 1px solid #ddd;">{format_cell_with_change(row, 'doi_ngoai')}</td>
            </tr>
            '''

        html_table += '''
            </tbody>
        </table>
        <div style="text-align: center; margin: 10px 0; color: #7f8c8d; font-size: 12px;">
            üìà <span style="color: #16a085;">‚Üó TƒÉng</span> |
            üìâ <span style="color: #e74c3c;">‚Üò Gi·∫£m</span> |
            ‚û°Ô∏è <span style="color: #7f8c8d;">‚Üí Kh√¥ng ƒë·ªïi</span>
        </div>
        '''

        return html_table
    else:
        return "<p style='text-align: center; color: #e74c3c;'>‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi gian ƒë·ªÉ t·∫°o b·∫£ng pivot</p>"

# Tab 8: S·ª± ki·ªán
with tab8:
    st.markdown('<div class="tab-header">üéâ B√°o c√°o S·ª± ki·ªán</div>', unsafe_allow_html=True)

    def create_events_data():
        """T·∫°o d·ªØ li·ªáu m·∫´u cho s·ª± ki·ªán"""
        return pd.DataFrame({
            'Tu·∫ßn': [39] * 8,
            'Th√°ng': [9] * 8,
            'N·ªôi dung': [
                'T·ªïng s·ªë s·ª± ki·ªán h√†nh ch√≠nh c·ªßa B·ªánh vi·ªán',
                'Ph√≤ng H√†nh ch√≠nh ch·ªß tr√¨',
                'Ph√≤ng H√†nh ch√≠nh ph·ªëi h·ª£p',
                'T·ª∑ l·ªá th√†nh c√¥ng',
                'S·ª± ki·ªán quan tr·ªçng',
                'H·ªôi ngh·ªã h·ªôi th·∫£o',
                'Ho·∫°t ƒë·ªông ƒë·ªëi ngo·∫°i',
                'M·ª©c ƒë·ªô h√†i l√≤ng'
            ],
            'S·ªë li·ªáu': [25, 15, 10, 96.0, 8, 12, 5, 92.5]
        })

    # Load data t·ª´ DataManager ho·∫∑c d·ªØ li·ªáu m·∫´u
    df_events = data_manager.get_category_data('S·ª± ki·ªán')

    if df_events is not None:
        st.info(f"‚úÖ ƒê√£ t·∫£i {len(df_events)} b·∫£n ghi cho S·ª± ki·ªán t·ª´ file: {data_manager.metadata['filename']}")
    else:
        st.info("üìÅ Ch∆∞a c√≥ d·ªØ li·ªáu ƒë∆∞·ª£c t·∫£i t·ª´ sidebar. Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u.")
        df_events = create_events_data()

    # Metrics
    col1, col2, col3, col4 = st.columns(4)

    if not df_events.empty:
        # Metrics overview t·ªïng quan
        st.markdown('<div class="section-header">üìä T·ªïng quan ho·∫°t ƒë·ªông S·ª± ki·ªán</div>', unsafe_allow_html=True)

        col1, col2, col3, col4 = st.columns(4)

        # Debug: Hi·ªÉn th·ªã c·∫•u tr√∫c d·ªØ li·ªáu
        with st.expander("üîç Debug: C·∫•u tr√∫c d·ªØ li·ªáu S·ª± ki·ªán", expanded=False):
            st.write("**Columns:**", list(df_events.columns))
            st.write("**Shape:**", df_events.shape)
            if 'N·ªôi dung' in df_events.columns:
                st.write("**N·ªôi dung values:**", df_events['N·ªôi dung'].unique().tolist())
            st.dataframe(df_events.head())

        # T√≠nh to√°n metrics t·ª´ d·ªØ li·ªáu - C·ªòNG T·ªîNG T·∫§T C·∫¢ C√ÅC TU·∫¶N
        def get_event_metric_value(content_name):
            if 'N·ªôi dung' not in df_events.columns or 'S·ªë li·ªáu' not in df_events.columns:
                return 0

            # L·∫•y t·∫•t c·∫£ c√°c h√†ng c√≥ n·ªôi dung n√†y v√† c·ªông t·ªïng
            result = df_events[df_events['N·ªôi dung'] == content_name]['S·ªë li·ªáu']
            if len(result) > 0:
                # Clean data: remove non-breaking spaces and other whitespace characters
                cleaned_result = result.astype(str).str.replace('\xa0', '').str.replace(' ', '').str.strip()
                # Convert t·∫•t c·∫£ values th√†nh numeric v√† c·ªông t·ªïng
                numeric_values = pd.to_numeric(cleaned_result, errors='coerce').fillna(0)
                total = numeric_values.sum()
                return total
            return 0

        tong_sk = get_event_metric_value('T·ªïng s·ªë s·ª± ki·ªán h√†nh ch√≠nh c·ªßa B·ªánh vi·ªán')
        chu_tri = get_event_metric_value('Ph√≤ng H√†nh ch√≠nh ch·ªß tr√¨')
        phoi_hop = get_event_metric_value('Ph√≤ng H√†nh ch√≠nh ph·ªëi h·ª£p')
        thanh_cong = get_event_metric_value('T·ª∑ l·ªá th√†nh c√¥ng')

        with col1:
            st.metric("üéâ T·ªïng s·ª± ki·ªán", f"{int(tong_sk):,}", help="T·ªïng s·ªë s·ª± ki·ªán h√†nh ch√≠nh t·∫•t c·∫£ c√°c tu·∫ßn")
        with col2:
            st.metric("üëë Ch·ªß tr√¨", f"{int(chu_tri):,}", help="T·ªïng s·ªë s·ª± ki·ªán ch·ªß tr√¨ t·∫•t c·∫£ c√°c tu·∫ßn")
        with col3:
            st.metric("ü§ù Ph·ªëi h·ª£p", f"{int(phoi_hop):,}", help="T·ªïng s·ªë s·ª± ki·ªán ph·ªëi h·ª£p t·∫•t c·∫£ c√°c tu·∫ßn")
        with col4:
            st.metric("‚úÖ Th√†nh c√¥ng", f"{thanh_cong:.1f}%", help="T·ª∑ l·ªá th√†nh c√¥ng trung b√¨nh t·∫•t c·∫£ c√°c tu·∫ßn")

        # Th√™m h√†ng metrics th·ª© 2
        col5, col6, col7, col8 = st.columns(4)

        quan_trong = get_event_metric_value('S·ª± ki·ªán quan tr·ªçng')
        hoi_nghi = get_event_metric_value('H·ªôi ngh·ªã h·ªôi th·∫£o')
        doi_ngoai = get_event_metric_value('Ho·∫°t ƒë·ªông ƒë·ªëi ngo·∫°i')
        hai_long = get_event_metric_value('M·ª©c ƒë·ªô h√†i l√≤ng')

        with col5:
            st.metric("‚≠ê Quan tr·ªçng", f"{int(quan_trong):,}", help="T·ªïng s·ªë s·ª± ki·ªán quan tr·ªçng t·∫•t c·∫£ c√°c tu·∫ßn")
        with col6:
            st.metric("üèõÔ∏è H·ªôi ngh·ªã", f"{int(hoi_nghi):,}", help="T·ªïng s·ªë h·ªôi ngh·ªã h·ªôi th·∫£o t·∫•t c·∫£ c√°c tu·∫ßn")
        with col7:
            st.metric("üåç ƒê·ªëi ngo·∫°i", f"{int(doi_ngoai):,}", help="T·ªïng s·ªë ho·∫°t ƒë·ªông ƒë·ªëi ngo·∫°i t·∫•t c·∫£ c√°c tu·∫ßn")
        with col8:
            st.metric("üòä H√†i l√≤ng", f"{hai_long:.1f}%", help="M·ª©c ƒë·ªô h√†i l√≤ng trung b√¨nh t·∫•t c·∫£ c√°c tu·∫ßn")

        st.markdown("<br>", unsafe_allow_html=True)

        # Pivot Table Section - gi·ªëng nh∆∞ Tab 4
        create_event_pivot_table(df_events)

        st.markdown("<br>", unsafe_allow_html=True)

        # Bi·ªÉu ƒë·ªì t·ªïng quan
        st.markdown('<div class="section-header">üìà Bi·ªÉu ƒë·ªì ph√¢n t√≠ch</div>', unsafe_allow_html=True)

        col_chart1, col_chart2 = st.columns(2)

        with col_chart1:
            # Bi·ªÉu ƒë·ªì ph√¢n b·ªë lo·∫°i s·ª± ki·ªán
            event_distribution_data = pd.DataFrame({
                'Lo·∫°i s·ª± ki·ªán': ['Ch·ªß tr√¨', 'Ph·ªëi h·ª£p', 'Quan tr·ªçng', 'H·ªôi ngh·ªã', 'ƒê·ªëi ngo·∫°i'],
                'S·ªë l∆∞·ª£ng': [int(chu_tri), int(phoi_hop), int(quan_trong), int(hoi_nghi), int(doi_ngoai)]
            })

            fig_event = px.pie(event_distribution_data, values='S·ªë l∆∞·ª£ng', names='Lo·∫°i s·ª± ki·ªán',
                              title='üéØ Ph√¢n b·ªë lo·∫°i s·ª± ki·ªán',
                              hole=0.4)
            fig_event.update_layout(height=400)
            st.plotly_chart(fig_event, use_container_width=True)

        with col_chart2:
            # Bi·ªÉu ƒë·ªì hi·ªáu qu·∫£ v√† h√†i l√≤ng
            efficiency_data = pd.DataFrame({
                'Ch·ªâ s·ªë': ['T·ª∑ l·ªá th√†nh c√¥ng (%)', 'M·ª©c ƒë·ªô h√†i l√≤ng (%)'],
                'Gi√° tr·ªã': [float(thanh_cong), float(hai_long)]
            })

            fig_efficiency = px.bar(efficiency_data, x='Ch·ªâ s·ªë', y='Gi√° tr·ªã',
                                   title='üìä Hi·ªáu qu·∫£ t·ªï ch·ª©c s·ª± ki·ªán',
                                   color='Ch·ªâ s·ªë',
                                   color_discrete_map={'T·ª∑ l·ªá th√†nh c√¥ng (%)': '#2ecc71', 'M·ª©c ƒë·ªô h√†i l√≤ng (%)': '#3498db'})
            fig_efficiency.update_layout(height=400, yaxis_title='T·ª∑ l·ªá (%)')
            st.plotly_chart(fig_efficiency, use_container_width=True)

        # Bi·ªÉu ƒë·ªì ph√¢n t√≠ch chi ti·∫øt
        st.markdown('<div class="section-header">üìà Bi·ªÉu ƒë·ªì ph√¢n t√≠ch chi ti·∫øt</div>', unsafe_allow_html=True)

        # Row 1: Bi·ªÉu ƒë·ªì t·ªïng quan ho·∫°t ƒë·ªông
        col_detail1, col_detail2 = st.columns(2)

        with col_detail1:
            # Xu h∆∞·ªõng t·ªïng s·ª± ki·ªán v√† ch·ªß tr√¨ theo tu·∫ßn
            events_time_data = df_events[df_events['N·ªôi dung'].isin(['T·ªïng s·ªë s·ª± ki·ªán h√†nh ch√≠nh c·ªßa B·ªánh vi·ªán', 'Ph√≤ng H√†nh ch√≠nh ch·ªß tr√¨', 'Ph√≤ng H√†nh ch√≠nh ph·ªëi h·ª£p'])]

            if not events_time_data.empty and 'Tu·∫ßn' in events_time_data.columns:
                events_pivot = events_time_data.pivot(index='Tu·∫ßn', columns='N·ªôi dung', values='S·ªë li·ªáu').fillna(0)
                events_pivot = events_pivot.reset_index()
                events_pivot['Tu·∫ßn'] = pd.to_numeric(events_pivot['Tu·∫ßn'], errors='coerce')
                events_pivot = events_pivot.sort_values('Tu·∫ßn')

                # Clean data
                for col in events_pivot.columns:
                    if col != 'Tu·∫ßn':
                        events_pivot[col] = pd.to_numeric(events_pivot[col], errors='coerce').fillna(0)

                # T√≠nh t·ªïng s·ª± ki·ªán do ph√≤ng h√†nh ch√≠nh th·ª±c hi·ªán
                if 'Ph√≤ng H√†nh ch√≠nh ch·ªß tr√¨' in events_pivot.columns and 'Ph√≤ng H√†nh ch√≠nh ph·ªëi h·ª£p' in events_pivot.columns:
                    events_pivot['HC th·ª±c hi·ªán'] = events_pivot['Ph√≤ng H√†nh ch√≠nh ch·ªß tr√¨'] + events_pivot['Ph√≤ng H√†nh ch√≠nh ph·ªëi h·ª£p']

                if 'T·ªïng s·ªë s·ª± ki·ªán h√†nh ch√≠nh c·ªßa B·ªánh vi·ªán' in events_pivot.columns and 'HC th·ª±c hi·ªán' in events_pivot.columns:
                    fig_events_trend = go.Figure()

                    # T·ªïng s·ª± ki·ªán (tr·ª•c tr√°i)
                    fig_events_trend.add_trace(go.Scatter(
                        x=events_pivot['Tu·∫ßn'],
                        y=events_pivot['T·ªïng s·ªë s·ª± ki·ªán h√†nh ch√≠nh c·ªßa B·ªánh vi·ªán'],
                        mode='lines',
                        name='T·ªïng s·ª± ki·ªán',
                        line=dict(color='#3498db', width=3),
                        yaxis='y'
                    ))

                    # HC th·ª±c hi·ªán (tr·ª•c ph·∫£i)
                    fig_events_trend.add_trace(go.Scatter(
                        x=events_pivot['Tu·∫ßn'],
                        y=events_pivot['HC th·ª±c hi·ªán'],
                        mode='lines',
                        name='HC th·ª±c hi·ªán',
                        line=dict(color='#e74c3c', width=3),
                        yaxis='y2'
                    ))

                    fig_events_trend.update_layout(
                        title='üéâ Xu h∆∞·ªõng s·ª± ki·ªán theo tu·∫ßn',
                        height=350,
                        xaxis=dict(title='Tu·∫ßn', title_standoff=35),
                        yaxis=dict(title='T·ªïng s·ª± ki·ªán', side='left', color='#3498db'),
                        yaxis2=dict(title='HC th·ª±c hi·ªán', side='right', overlaying='y', color='#e74c3c'),
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=-0.35,
                            xanchor="center",
                            x=0.5
                        ),
                        margin=dict(b=100)
                    )

                    st.plotly_chart(fig_events_trend, use_container_width=True)

        with col_detail2:
            # Ph√¢n t√≠ch hi·ªáu qu·∫£ v√† ch·∫•t l∆∞·ª£ng
            quality_data = df_events[df_events['N·ªôi dung'].isin(['T·ª∑ l·ªá th√†nh c√¥ng', 'M·ª©c ƒë·ªô h√†i l√≤ng', 'S·ª± ki·ªán quan tr·ªçng'])]

            if not quality_data.empty and 'Tu·∫ßn' in quality_data.columns:
                quality_pivot = quality_data.pivot(index='Tu·∫ßn', columns='N·ªôi dung', values='S·ªë li·ªáu').fillna(0)
                quality_pivot = quality_pivot.reset_index()
                quality_pivot['Tu·∫ßn'] = pd.to_numeric(quality_pivot['Tu·∫ßn'], errors='coerce')
                quality_pivot = quality_pivot.sort_values('Tu·∫ßn')

                # Clean data
                for col in quality_pivot.columns:
                    if col != 'Tu·∫ßn':
                        quality_pivot[col] = pd.to_numeric(quality_pivot[col], errors='coerce').fillna(0)

                if 'T·ª∑ l·ªá th√†nh c√¥ng' in quality_pivot.columns and 'M·ª©c ƒë·ªô h√†i l√≤ng' in quality_pivot.columns:
                    fig_quality = go.Figure()

                    # T·ª∑ l·ªá th√†nh c√¥ng (tr·ª•c tr√°i)
                    fig_quality.add_trace(go.Scatter(
                        x=quality_pivot['Tu·∫ßn'],
                        y=quality_pivot['T·ª∑ l·ªá th√†nh c√¥ng'],
                        mode='lines',
                        name='Th√†nh c√¥ng (%)',
                        line=dict(color='#27ae60', width=3),
                        yaxis='y'
                    ))

                    # M·ª©c ƒë·ªô h√†i l√≤ng (tr·ª•c ph·∫£i)
                    fig_quality.add_trace(go.Scatter(
                        x=quality_pivot['Tu·∫ßn'],
                        y=quality_pivot['M·ª©c ƒë·ªô h√†i l√≤ng'],
                        mode='lines',
                        name='H√†i l√≤ng (%)',
                        line=dict(color='#f39c12', width=3),
                        yaxis='y2'
                    ))

                    # S·ª± ki·ªán quan tr·ªçng (n·∫øu c√≥)
                    if 'S·ª± ki·ªán quan tr·ªçng' in quality_pivot.columns:
                        fig_quality.add_trace(go.Bar(
                            x=quality_pivot['Tu·∫ßn'],
                            y=quality_pivot['S·ª± ki·ªán quan tr·ªçng'],
                            name='SK quan tr·ªçng',
                            marker_color='#9b59b6',
                            opacity=0.7,
                            yaxis='y'
                        ))

                    fig_quality.update_layout(
                        title='üìä Ph√¢n t√≠ch ch·∫•t l∆∞·ª£ng v√† hi·ªáu qu·∫£',
                        height=350,
                        xaxis=dict(title='Tu·∫ßn', title_standoff=35),
                        yaxis=dict(title='Th√†nh c√¥ng (%) / SK quan tr·ªçng', side='left', color='#27ae60'),
                        yaxis2=dict(title='H√†i l√≤ng (%)', side='right', overlaying='y', color='#f39c12'),
                        legend=dict(
                            orientation="h",
                            yanchor="bottom",
                            y=-0.35,
                            xanchor="center",
                            x=0.5
                        ),
                        margin=dict(b=100)
                    )

                    st.plotly_chart(fig_quality, use_container_width=True)

        # B·∫£ng d·ªØ li·ªáu chi ti·∫øt
        st.markdown('<div class="section-header">üìä D·ªØ li·ªáu chi ti·∫øt</div>', unsafe_allow_html=True)

        # Hi·ªÉn th·ªã b·∫£ng v·ªõi formatting
        display_df = df_events.copy()
        # Clean and format the data display
        def clean_and_format_event_number(x):
            # Clean non-breaking spaces and other whitespace
            cleaned = str(x).replace('\xa0', '').replace(' ', '').strip()
            numeric_val = pd.to_numeric(cleaned, errors='coerce')
            if pd.isna(numeric_val):
                return str(x)  # Return original if conversion fails
            elif numeric_val >= 1:
                return f"{numeric_val:,.0f}"
            else:
                return f"{numeric_val:.1f}"

        display_df['S·ªë li·ªáu'] = display_df['S·ªë li·ªáu'].apply(clean_and_format_event_number)
        st.dataframe(display_df, use_container_width=True, hide_index=True)

    else:
        st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu S·ª± ki·ªán")
        st.info("üìÅ Upload d·ªØ li·ªáu ho·∫∑c ki·ªÉm tra k·∫øt n·ªëi GitHub ƒë·ªÉ xem th·ªëng k√™ chi ti·∫øt")

# Tab 12: Kh√°c (cho c√°c danh m·ª•c kh√¥ng ph√¢n lo·∫°i)
with tab12:
    st.markdown('<div class="tab-header">üîó D·ªØ li·ªáu kh√°c</div>', unsafe_allow_html=True)

    st.info("üìÅ Tab n√†y s·∫Ω hi·ªÉn th·ªã c√°c d·ªØ li·ªáu kh√¥ng thu·ªôc c√°c danh m·ª•c ƒë√£ ƒë·ªãnh nghƒ©a ·ªü tr√™n")

    def create_other_data():
        """T·∫°o d·ªØ li·ªáu m·∫´u cho c√°c danh m·ª•c kh√°c"""
        return pd.DataFrame({
            'Tu·∫ßn': [39] * 8,
            'Th√°ng': [9] * 8,
            'Danh m·ª•c': ['L·ªÖ t√¢n', 'Ti·∫øp kh√°ch trong n∆∞·ªõc', 'ƒê√≥n ti·∫øp kh√°ch VIP',
                        'T·ªï ch·ª©c cu·ªôc h·ªçp tr·ª±c tuy·∫øn', 'Trang ƒëi·ªÅu h√†nh t√°c nghi·ªáp',
                        'L·ªÖ t√¢n', 'Ti·∫øp kh√°ch trong n∆∞·ªõc', 'Ti·∫øp kh√°ch trong n∆∞·ªõc'],
            'N·ªôi dung': [
                'H·ªó tr·ª£ l·ªÖ t√¢n cho h·ªôi ngh·ªã/h·ªôi th·∫£o',
                'T·ªïng s·ªë ƒëo√†n kh√°ch trong n∆∞·ªõc, trong ƒë√≥:',
                'S·ªë l∆∞·ª£t kh√°ch VIP ƒë∆∞·ª£c l·ªÖ t√¢n ti·∫øp ƒë√≥n, h·ªó tr·ª£ kh√°m ch·ªØa b·ªánh',
                'T·ªïng s·ªë cu·ªôc h·ªçp tr·ª±c tuy·∫øn do Ph√≤ng H√†nh ch√≠nh chu·∫©n b·ªã',
                'S·ªë l∆∞·ª£ng tin ƒëƒÉng ƒêHTN',
                'Tham quan, h·ªçc t·∫≠p',
                'L√†m vi·ªác',
                'T·ª∑ l·ªá h√†i l√≤ng'
            ],
            'S·ªë li·ªáu': [12, 35, 125, 18, 45, 28, 7, 89.5]
        })

    # Load data t·ª´ DataManager ho·∫∑c d·ªØ li·ªáu m·∫´u
    main_categories = ['T·ªï xe', 'T·ªïng ƒë√†i', 'H·ªá th·ªëng th∆∞ k√Ω B·ªánh vi·ªán', 'B√£i gi·ªØ xe', 'S·ª± ki·ªán']
    df_other = data_manager.get_other_categories_data(main_categories)

    if df_other is not None:
        st.info(f"‚úÖ ƒê√£ t·∫£i {len(df_other)} b·∫£n ghi cho danh m·ª•c kh√°c t·ª´ file: {data_manager.metadata['filename']}")
    else:
        st.info("üìÅ Ch∆∞a c√≥ d·ªØ li·ªáu ƒë∆∞·ª£c t·∫£i t·ª´ sidebar. Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u.")
        df_other = create_other_data()

    # Display by category if Danh m·ª•c column exists
    if 'Danh m·ª•c' in df_other.columns:
        categories = df_other['Danh m·ª•c'].unique()
        for category in categories:
            with st.expander(f"üìÅ {category}", expanded=True):
                category_data = df_other[df_other['Danh m·ª•c'] == category]
                st.dataframe(category_data, use_container_width=True)
    else:
        st.subheader("üìä Chi ti·∫øt d·ªØ li·ªáu")
        st.dataframe(df_other, use_container_width=True)

# Footer
st.markdown("---")
st.markdown("### üîß H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
with st.expander("üí° Xem h∆∞·ªõng d·∫´n chi ti·∫øt"):
    st.markdown("""
    **C√°ch s·ª≠ d·ª•ng Dashboard:**
    
    1. **üìÅ Upload d·ªØ li·ªáu**: M·ªói tab c√≥ m·ª•c upload ri√™ng, h·ªó tr·ª£ file JSON v√† CSV
    2. **üìä Xem th·ªëng k√™**: Sau khi upload, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t√≠nh to√°n v√† hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
    3. **üîç L·ªçc d·ªØ li·ªáu**: S·ª≠ d·ª•ng c√°c b·ªô l·ªçc ƒë·ªÉ xem d·ªØ li·ªáu theo ƒëi·ªÅu ki·ªán c·ª• th·ªÉ
    4. **üìà Bi·ªÉu ƒë·ªì t∆∞∆°ng t√°c**: Click v√†o bi·ªÉu ƒë·ªì ƒë·ªÉ xem chi ti·∫øt
    
    **üìã C·∫•u tr√∫c d·ªØ li·ªáu:**
    - VƒÉn b·∫£n ƒë·∫øn: C·∫ßn c√≥ c√°c tr∆∞·ªùng date, month, year, total_incoming, processed_on_time, processed_late
    - C√°c module kh√°c s·∫Ω c√≥ c·∫•u tr√∫c t∆∞∆°ng t·ª± t√πy theo y√™u c·∫ßu nghi·ªáp v·ª•
    """)

st.markdown("""
<div style='text-align: center; padding: 2rem; color: #7f8c8d;'>
    <p>üìä Dashboard Ph√≤ng H√†nh ch√≠nh - Phi√™n b·∫£n 1.0</p>
    <p>üîÑ D·ªØ li·ªáu c·∫≠p nh·∫≠t t·ª´ GitHub Repository</p>
</div>
""", unsafe_allow_html=True)
